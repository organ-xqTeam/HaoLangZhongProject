2019-07-11 09:12:59.649 INFO  13240 [           main] [com.jeesite.modules.Application        ] - Starting Application on DESKTOP-FVHI4E5 with PID 13240 (E:\gitlabHome\HaoLangZhongProject\HaoLangZhong\src\main\webapp\WEB-INF\classes started by 1111111 in E:\gitlabHome\HaoLangZhongProject\HaoLangZhong)
2019-07-11 09:12:59.654 DEBUG 13240 [           main] [com.jeesite.modules.Application        ] - Running with Spring Boot v2.0.6.RELEASE, Spring v5.0.10.RELEASE
2019-07-11 09:12:59.654 INFO  13240 [           main] [com.jeesite.modules.Application        ] - The following profiles are active: default
2019-07-11 09:13:02.460 INFO  13240 [           main] [com.jeesite.common.config.Global       ] - Config files: [classpath:config/jeesite-core.yml, classpath:config/application.yml]
2019-07-11 09:13:02.462 INFO  13240 [           main] [com.jeesite.common.config.Global       ] - Spring cache cluster mode: false, session manager name: J1CacheSession
2019-07-11 09:13:03.388 INFO  13240 [           main] [com.jeesite.common.config.Global       ] - user.home: C:/Users/15040
2019-07-11 09:13:03.389 INFO  13240 [           main] [com.jeesite.common.config.Global       ] - user.dir: E:/gitlabHome/HaoLangZhongProject/HaoLangZhong
2019-07-11 09:13:03.389 INFO  13240 [           main] [com.jeesite.common.config.Global       ] - logPath: E:/gitlabHome/HaoLangZhongProject/HaoLangZhong/src/main/webapp/WEB-INF/classes

   _____        ___  _   _           ___
  |_   _|      / __'(_)_| |_        /   |
  _ | | __  __ \___ | |_   _| __   / /| |
 ( .| |/__\/__\ ___)| | | |_ /__\ / /_| |_
  \___|\__.\__.|____|_| \___)\__.(____   _|  :: JeeSite V4.1.3 :: 
======================================|_|==========================

    欢迎使用 JeeSite Demo V4.1

    您当前的版本为社区版，官方网站：http://jeesite.com

    机器码是：6c59ab5175477606a72e1628bfd13f1a
    产品名称：JeeSite Demo
    公司名称：ThinkGem

===================================================================

2019-07-11 09:13:04.761 INFO  13240 [           main] [o.s.b.w.embedded.tomcat.TomcatWebServer] - Tomcat initialized with port(s): 8980 (http)
2019-07-11 09:13:05.501 DEBUG 13240 [           main] [com.jeesite.common.config.Global       ] - Update E:\gitlabHome\HaoLangZhongProject\HaoLangZhong\src\main\webapp\WEB-INF\classes\config\application.yml jdbc.password encryption success.
2019-07-11 09:13:05.967 DEBUG 13240 [           main] [c.j.common.datasource.RoutingDataSource] - Set default target data source success.
2019-07-11 09:13:12.553 DEBUG 13240 [           main] [com.jeesite.common.beetl.BeetlUtils    ] - Beetl config files: [classpath:/config/beetl-core.properties, classpath:/config/beetl.properties]
2019-07-11 09:13:12.916 DEBUG 13240 [           main] [c.j.c.m.m.provider.SelectSqlProvider   ] - 7毫秒: SELECT a.status AS "status", a.create_by AS "createBy", a.create_date AS "createDate", a.update_by AS "updateBy", a.update_date AS "updateDate", a.remarks AS "remarks", a.module_code AS "moduleCode", a.module_name AS "moduleName", a.description AS "description", a.main_class_name AS "mainClassName", a.current_version AS "currentVersion", a.upgrade_info AS "upgradeInfo" FROM js_sys_module a WHERE a.status = #{sqlMap.where#status#EQ1} ORDER BY a.update_date DESC
2019-07-11 09:13:12.952 DEBUG 13240 [           main] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@682482ee] will not be managed by Spring
2019-07-11 09:13:12.963 DEBUG 13240 [           main] [c.j.modules.sys.dao.ModuleDao.findList ] - ==>  Preparing: SELECT a.status AS "status", a.create_by AS "createBy", a.create_date AS "createDate", a.update_by AS "updateBy", a.update_date AS "updateDate", a.remarks AS "remarks", a.module_code AS "moduleCode", a.module_name AS "moduleName", a.description AS "description", a.main_class_name AS "mainClassName", a.current_version AS "currentVersion", a.upgrade_info AS "upgradeInfo" FROM js_sys_module a WHERE a.status = ? ORDER BY a.update_date DESC 
2019-07-11 09:13:12.999 DEBUG 13240 [           main] [c.j.modules.sys.dao.ModuleDao.findList ] - ==> Parameters: 0(String)
2019-07-11 09:13:13.042 DEBUG 13240 [           main] [c.j.modules.sys.dao.ModuleDao.findList ] - <==      Total: 2
2019-07-11 09:13:13.186 DEBUG 13240 [           main] [c.j.c.m.m.provider.SelectSqlProvider   ] - 1毫秒: SELECT a.corp_code AS "corpCode", a.corp_name AS "corpName", a.status AS "status", a.create_by AS "createBy", a.create_date AS "createDate", a.update_by AS "updateBy", a.update_date AS "updateDate", a.remarks AS "remarks", a.user_code AS "userCode", a.login_code AS "loginCode", a.user_name AS "userName", a.password AS "password", a.email AS "email", a.mobile AS "mobile", a.phone AS "phone", a.sex AS "sex", a.avatar AS "avatar", a.sign AS "sign", a.wx_openid AS "wxOpenid", a.mobile_imei AS "mobileImei", a.user_type AS "userType", a.ref_code AS "refCode", a.ref_name AS "refName", a.mgr_type AS "mgrType", a.pwd_security_level AS "pwdSecurityLevel", a.pwd_update_date AS "pwdUpdateDate", a.pwd_update_record AS "pwdUpdateRecord", a.pwd_question AS "pwdQuestion", a.pwd_question_answer AS "pwdQuestionAnswer", a.pwd_question_2 AS "pwdQuestion2", a.pwd_question_answer_2 AS "pwdQuestionAnswer2", a.pwd_question_3 AS "pwdQuestion3", a.pwd_question_answer_3 AS "pwdQuestionAnswer3", a.pwd_quest_update_date AS "pwdQuestUpdateDate", a.last_login_ip AS "lastLoginIp", a.last_login_date AS "lastLoginDate", a.freeze_date AS "freezeDate", a.freeze_cause AS "freezeCause", a.user_weight AS "userWeight", a.extend_s1 AS "extend.extendS1", a.extend_s2 AS "extend.extendS2", a.extend_s3 AS "extend.extendS3", a.extend_s4 AS "extend.extendS4", a.extend_s5 AS "extend.extendS5", a.extend_s6 AS "extend.extendS6", a.extend_s7 AS "extend.extendS7", a.extend_s8 AS "extend.extendS8", a.extend_i1 AS "extend.extendI1", a.extend_i2 AS "extend.extendI2", a.extend_i3 AS "extend.extendI3", a.extend_i4 AS "extend.extendI4", a.extend_f1 AS "extend.extendF1", a.extend_f2 AS "extend.extendF2", a.extend_f3 AS "extend.extendF3", a.extend_f4 AS "extend.extendF4", a.extend_d1 AS "extend.extendD1", a.extend_d2 AS "extend.extendD2", a.extend_d3 AS "extend.extendD3", a.extend_d4 AS "extend.extendD4" FROM js_sys_user a WHERE a.`user_code` = #{userCode}
2019-07-11 09:13:13.188 DEBUG 13240 [           main] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@682482ee] will be managed by Spring
2019-07-11 09:13:13.189 DEBUG 13240 [           main] [com.jeesite.modules.sys.dao.UserDao.get] - ==>  Preparing: SELECT a.corp_code AS "corpCode", a.corp_name AS "corpName", a.status AS "status", a.create_by AS "createBy", a.create_date AS "createDate", a.update_by AS "updateBy", a.update_date AS "updateDate", a.remarks AS "remarks", a.user_code AS "userCode", a.login_code AS "loginCode", a.user_name AS "userName", a.password AS "password", a.email AS "email", a.mobile AS "mobile", a.phone AS "phone", a.sex AS "sex", a.avatar AS "avatar", a.sign AS "sign", a.wx_openid AS "wxOpenid", a.mobile_imei AS "mobileImei", a.user_type AS "userType", a.ref_code AS "refCode", a.ref_name AS "refName", a.mgr_type AS "mgrType", a.pwd_security_level AS "pwdSecurityLevel", a.pwd_update_date AS "pwdUpdateDate", a.pwd_update_record AS "pwdUpdateRecord", a.pwd_question AS "pwdQuestion", a.pwd_question_answer AS "pwdQuestionAnswer", a.pwd_question_2 AS "pwdQuestion2", a.pwd_question_answer_2 AS "pwdQuestionAnswer2", a.pwd_question_3 AS "pwdQuestion3", a.pwd_question_answer_3 AS "pwdQuestionAnswer3", a.pwd_quest_update_date AS "pwdQuestUpdateDate", a.last_login_ip AS "lastLoginIp", a.last_login_date AS "lastLoginDate", a.freeze_date AS "freezeDate", a.freeze_cause AS "freezeCause", a.user_weight AS "userWeight", a.extend_s1 AS "extend.extendS1", a.extend_s2 AS "extend.extendS2", a.extend_s3 AS "extend.extendS3", a.extend_s4 AS "extend.extendS4", a.extend_s5 AS "extend.extendS5", a.extend_s6 AS "extend.extendS6", a.extend_s7 AS "extend.extendS7", a.extend_s8 AS "extend.extendS8", a.extend_i1 AS "extend.extendI1", a.extend_i2 AS "extend.extendI2", a.extend_i3 AS "extend.extendI3", a.extend_i4 AS "extend.extendI4", a.extend_f1 AS "extend.extendF1", a.extend_f2 AS "extend.extendF2", a.extend_f3 AS "extend.extendF3", a.extend_f4 AS "extend.extendF4", a.extend_d1 AS "extend.extendD1", a.extend_d2 AS "extend.extendD2", a.extend_d3 AS "extend.extendD3", a.extend_d4 AS "extend.extendD4" FROM js_sys_user a WHERE a.`user_code` = ? 
2019-07-11 09:13:13.190 DEBUG 13240 [           main] [com.jeesite.modules.sys.dao.UserDao.get] - ==> Parameters: system(String)
2019-07-11 09:13:13.217 DEBUG 13240 [           main] [com.jeesite.modules.sys.dao.UserDao.get] - <==      Total: 1
2019-07-11 09:13:13.263 DEBUG 13240 [           main] [c.j.m.s.dao.RoleDao.findListByUserCode ] - ==>  Preparing: SELECT a.corp_code AS "corpCode", a.corp_name AS "corpName", a.status AS "status", a.create_by AS "createBy", a.create_date AS "createDate", a.update_by AS "updateBy", a.update_date AS "updateDate", a.remarks AS "remarks", a.role_code AS "roleCode", a.role_name AS "roleName", a.role_type AS "roleType", a.role_sort AS "roleSort", a.is_sys AS "isSys", a.user_type AS "userType", a.data_scope AS "dataScope" FROM js_sys_role a JOIN js_sys_user_role ur ON a.role_code = ur.role_code WHERE a.status = ? AND ur.user_code = ? ORDER BY a.role_sort ASC 
2019-07-11 09:13:13.264 DEBUG 13240 [           main] [c.j.m.s.dao.RoleDao.findListByUserCode ] - ==> Parameters: 0(String), system(String)
2019-07-11 09:13:13.308 DEBUG 13240 [           main] [c.j.m.s.dao.RoleDao.findListByUserCode ] - <==      Total: 0
2019-07-11 09:13:13.351 DEBUG 13240 [           main] [c.j.c.m.m.provider.UpdateSqlProvider   ] - 242毫秒: UPDATE js_sys_menu SET `status` = #{param1.status}, `update_by` = #{param1.updateBy}, `update_date` = #{param1.updateDate} WHERE status != #{param2.STATUS_DELETE} AND module_codes LIKE #{param2.sqlMap.where#module_codes#LIKE1}
2019-07-11 09:13:13.352 DEBUG 13240 [           main] [c.j.m.s.d.MenuDao.updateStatusByEntity ] - ==>  Preparing: UPDATE js_sys_menu SET `status` = ?, `update_by` = ?, `update_date` = ? WHERE status != ? AND module_codes LIKE ? 
2019-07-11 09:13:13.355 DEBUG 13240 [           main] [c.j.m.s.d.MenuDao.updateStatusByEntity ] - ==> Parameters: 2(String), system(String), 2019-07-11 09:13:13.351(Timestamp), 1(String), %cms%(String)
2019-07-11 09:13:13.401 DEBUG 13240 [           main] [c.j.m.s.d.MenuDao.updateStatusByEntity ] - <==    Updates: 7
2019-07-11 09:13:13.522 DEBUG 13240 [           main] [c.j.c.m.m.provider.UpdateSqlProvider   ] - 2毫秒: UPDATE js_sys_menu SET `status` = #{param1.status}, `update_by` = #{param1.updateBy}, `update_date` = #{param1.updateDate} WHERE status != #{param2.STATUS_DELETE} AND module_codes LIKE #{param2.sqlMap.where#module_codes#LIKE1}
2019-07-11 09:13:13.522 DEBUG 13240 [           main] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@682482ee] will be managed by Spring
2019-07-11 09:13:13.522 DEBUG 13240 [           main] [c.j.m.s.d.MenuDao.updateStatusByEntity ] - ==>  Preparing: UPDATE js_sys_menu SET `status` = ?, `update_by` = ?, `update_date` = ? WHERE status != ? AND module_codes LIKE ? 
2019-07-11 09:13:13.523 DEBUG 13240 [           main] [c.j.m.s.d.MenuDao.updateStatusByEntity ] - ==> Parameters: 0(String), system(String), 2019-07-11 09:13:13.521(Timestamp), 1(String), %core%(String)
2019-07-11 09:13:13.569 DEBUG 13240 [           main] [c.j.m.s.d.MenuDao.updateStatusByEntity ] - <==    Updates: 70
2019-07-11 09:13:15.560 INFO  13240 [           main] [o.s.b.w.embedded.tomcat.TomcatWebServer] - Tomcat started on port(s): 8980 (http) with context path '/js'
2019-07-11 09:13:15.564 INFO  13240 [           main] [com.jeesite.modules.Application        ] - Started Application in 16.667 seconds (JVM running for 17.491)
2019-07-11 09:14:28.943 DEBUG 13240 [nio-8980-exec-1] [c.j.c.m.m.provider.SelectSqlProvider   ] - 1毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.product_count AS "productCount", a.total_price AS "totalPrice", a.logistics_price AS "logisticsPrice", a.discount_price AS "discountPrice", a.really_price AS "reallyPrice", a.pay_channel AS "payChannel", a.out_trade_no AS "outTradeNo", a.create_date AS "createDate", a.update_date AS "updateDate", a.create_by AS "createBy", a.update_by AS "updateBy", a.pay_date AS "payDate", a.user_id AS "userId", a.address_id AS "addressId", a.logistics_id AS "logisticsId", a.delivery_date AS "deliveryDate", a.del_flag AS "delFlag", a.delivery_name AS "deliveryName", a.delivery_address AS "deliveryAddress", a.delivery_phone AS "deliveryPhone", a.total_count AS "totalCount", a.trade_no AS "tradeNo" FROM sys_order a WHERE a.order_no = #{sqlMap.where#order_no#EQ1} ORDER BY a.update_date DESC
2019-07-11 09:14:28.969 DEBUG 13240 [nio-8980-exec-1] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@682482ee] will not be managed by Spring
2019-07-11 09:14:28.970 DEBUG 13240 [nio-8980-exec-1] [c.j.modules.app.dao.OrderDao.findList  ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.product_count AS "productCount", a.total_price AS "totalPrice", a.logistics_price AS "logisticsPrice", a.discount_price AS "discountPrice", a.really_price AS "reallyPrice", a.pay_channel AS "payChannel", a.out_trade_no AS "outTradeNo", a.create_date AS "createDate", a.update_date AS "updateDate", a.create_by AS "createBy", a.update_by AS "updateBy", a.pay_date AS "payDate", a.user_id AS "userId", a.address_id AS "addressId", a.logistics_id AS "logisticsId", a.delivery_date AS "deliveryDate", a.del_flag AS "delFlag", a.delivery_name AS "deliveryName", a.delivery_address AS "deliveryAddress", a.delivery_phone AS "deliveryPhone", a.total_count AS "totalCount", a.trade_no AS "tradeNo" FROM sys_order a WHERE a.order_no = ? ORDER BY a.update_date DESC 
2019-07-11 09:14:28.970 DEBUG 13240 [nio-8980-exec-1] [c.j.modules.app.dao.OrderDao.findList  ] - ==> Parameters: 071109142808201(String)
2019-07-11 09:14:29.000 DEBUG 13240 [nio-8980-exec-1] [c.j.modules.app.dao.OrderDao.findList  ] - <==      Total: 1
2019-07-11 09:14:29.011 DEBUG 13240 [nio-8980-exec-1] [c.j.c.m.m.provider.SelectSqlProvider   ] - 1毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", dd.id AS "userInfo.id", dd.mobile AS "userInfo.mobile", dd.password AS "userInfo.password", dd.icon AS "userInfo.icon", dd.regtime AS "userInfo.regtime", dd.lastlogin AS "userInfo.lastlogin", dd.islock AS "userInfo.islock", dd.isauthentication AS "userInfo.isauthentication", dd.type AS "userInfo.type", dd.create_by AS "userInfo.createBy", dd.create_date AS "userInfo.createDate", dd.update_by AS "userInfo.updateBy", dd.update_date AS "userInfo.updateDate", dd.remarks AS "userInfo.remarks", dd.del_flag AS "userInfo.delFlag", dd.nike_name AS "userInfo.nikeName", dd.is_invite AS "userInfo.isInvite", dd.third_id AS "userInfo.thirdId", dd.third_type AS "userInfo.thirdType", dd.third_icon AS "userInfo.thirdIcon", dd.member_lv AS "userInfo.memberLv", dd.member_flag AS "userInfo.memberFlag", dd.member_start AS "userInfo.memberStart", dd.member_end AS "userInfo.memberEnd", dd.invite_user_id AS "userInfo.inviteUserId", di.id AS "doctorInfos.id", di.doctorid AS "doctorInfos.doctorid", di.doctornum AS "doctorInfos.doctornum", di.name AS "doctorInfos.name", di.sex AS "doctorInfos.sex", di.age AS "doctorInfos.age", di.telephone AS "doctorInfos.telephone", di.idcard AS "doctorInfos.idcard", di.adress AS "doctorInfos.adress", di.technical AS "doctorInfos.technical", di.classify AS "doctorInfos.classify", di.introduce AS "doctorInfos.introduce", di.create_by AS "doctorInfos.createBy", di.cost AS "doctorInfos.cost", di.create_date AS "doctorInfos.createDate", di.update_by AS "doctorInfos.updateBy", di.update_date AS "doctorInfos.updateDate", di.remarks AS "doctorInfos.remarks", di.del_flag AS "doctorInfos.delFlag", di.cityid AS "doctorInfos.cityid", di.come_flag AS "doctorInfos.comeFlag", di.come_cost AS "doctorInfos.comeCost", di.own_flag AS "doctorInfos.ownFlag", di.first_count AS "doctorInfos.firstCount", di.star_lv AS "doctorInfos.starLv" FROM sys_tiaoli_order a LEFT JOIN sys_user_info dd ON a.userid = dd.id LEFT JOIN sys_doctor_info di ON a.docid = di.doctorid WHERE a.order_no = #{sqlMap.where#order_no#EQ1} ORDER BY a.create_date DESC
2019-07-11 09:14:29.012 DEBUG 13240 [nio-8980-exec-1] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@682482ee] will not be managed by Spring
2019-07-11 09:14:29.013 DEBUG 13240 [nio-8980-exec-1] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", dd.id AS "userInfo.id", dd.mobile AS "userInfo.mobile", dd.password AS "userInfo.password", dd.icon AS "userInfo.icon", dd.regtime AS "userInfo.regtime", dd.lastlogin AS "userInfo.lastlogin", dd.islock AS "userInfo.islock", dd.isauthentication AS "userInfo.isauthentication", dd.type AS "userInfo.type", dd.create_by AS "userInfo.createBy", dd.create_date AS "userInfo.createDate", dd.update_by AS "userInfo.updateBy", dd.update_date AS "userInfo.updateDate", dd.remarks AS "userInfo.remarks", dd.del_flag AS "userInfo.delFlag", dd.nike_name AS "userInfo.nikeName", dd.is_invite AS "userInfo.isInvite", dd.third_id AS "userInfo.thirdId", dd.third_type AS "userInfo.thirdType", dd.third_icon AS "userInfo.thirdIcon", dd.member_lv AS "userInfo.memberLv", dd.member_flag AS "userInfo.memberFlag", dd.member_start AS "userInfo.memberStart", dd.member_end AS "userInfo.memberEnd", dd.invite_user_id AS "userInfo.inviteUserId", di.id AS "doctorInfos.id", di.doctorid AS "doctorInfos.doctorid", di.doctornum AS "doctorInfos.doctornum", di.name AS "doctorInfos.name", di.sex AS "doctorInfos.sex", di.age AS "doctorInfos.age", di.telephone AS "doctorInfos.telephone", di.idcard AS "doctorInfos.idcard", di.adress AS "doctorInfos.adress", di.technical AS "doctorInfos.technical", di.classify AS "doctorInfos.classify", di.introduce AS "doctorInfos.introduce", di.create_by AS "doctorInfos.createBy", di.cost AS "doctorInfos.cost", di.create_date AS "doctorInfos.createDate", di.update_by AS "doctorInfos.updateBy", di.update_date AS "doctorInfos.updateDate", di.remarks AS "doctorInfos.remarks", di.del_flag AS "doctorInfos.delFlag", di.cityid AS "doctorInfos.cityid", di.come_flag AS "doctorInfos.comeFlag", di.come_cost AS "doctorInfos.comeCost", di.own_flag AS "doctorInfos.ownFlag", di.first_count AS "doctorInfos.firstCount", di.star_lv AS "doctorInfos.starLv" FROM sys_tiaoli_order a LEFT JOIN sys_user_info dd ON a.userid = dd.id LEFT JOIN sys_doctor_info di ON a.docid = di.doctorid WHERE a.order_no = ? ORDER BY a.create_date DESC 
2019-07-11 09:14:29.014 DEBUG 13240 [nio-8980-exec-1] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - ==> Parameters: 071109142808201(String)
2019-07-11 09:14:29.039 DEBUG 13240 [nio-8980-exec-1] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - <==      Total: 0
2019-07-11 09:14:29.041 DEBUG 13240 [nio-8980-exec-1] [c.j.c.m.m.provider.SelectSqlProvider   ] - 1毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", dd.id AS "userInfo.id", dd.mobile AS "userInfo.mobile", dd.password AS "userInfo.password", dd.icon AS "userInfo.icon", dd.regtime AS "userInfo.regtime", dd.lastlogin AS "userInfo.lastlogin", dd.islock AS "userInfo.islock", dd.isauthentication AS "userInfo.isauthentication", dd.type AS "userInfo.type", dd.create_by AS "userInfo.createBy", dd.create_date AS "userInfo.createDate", dd.update_by AS "userInfo.updateBy", dd.update_date AS "userInfo.updateDate", dd.remarks AS "userInfo.remarks", dd.del_flag AS "userInfo.delFlag", dd.nike_name AS "userInfo.nikeName", dd.is_invite AS "userInfo.isInvite", dd.third_id AS "userInfo.thirdId", dd.third_type AS "userInfo.thirdType", dd.third_icon AS "userInfo.thirdIcon", dd.member_lv AS "userInfo.memberLv", dd.member_flag AS "userInfo.memberFlag", dd.member_start AS "userInfo.memberStart", dd.member_end AS "userInfo.memberEnd", dd.invite_user_id AS "userInfo.inviteUserId", di.id AS "doctorInfos.id", di.doctorid AS "doctorInfos.doctorid", di.doctornum AS "doctorInfos.doctornum", di.name AS "doctorInfos.name", di.sex AS "doctorInfos.sex", di.age AS "doctorInfos.age", di.telephone AS "doctorInfos.telephone", di.idcard AS "doctorInfos.idcard", di.adress AS "doctorInfos.adress", di.technical AS "doctorInfos.technical", di.classify AS "doctorInfos.classify", di.introduce AS "doctorInfos.introduce", di.create_by AS "doctorInfos.createBy", di.cost AS "doctorInfos.cost", di.create_date AS "doctorInfos.createDate", di.update_by AS "doctorInfos.updateBy", di.update_date AS "doctorInfos.updateDate", di.remarks AS "doctorInfos.remarks", di.del_flag AS "doctorInfos.delFlag", di.cityid AS "doctorInfos.cityid", di.come_flag AS "doctorInfos.comeFlag", di.come_cost AS "doctorInfos.comeCost", di.own_flag AS "doctorInfos.ownFlag", di.first_count AS "doctorInfos.firstCount", di.star_lv AS "doctorInfos.starLv" FROM sys_tiaoli_order a LEFT JOIN sys_user_info dd ON a.userid = dd.id LEFT JOIN sys_doctor_info di ON a.docid = di.doctorid WHERE a.order_no = #{sqlMap.where#order_no#EQ1} ORDER BY a.create_date DESC
2019-07-11 09:14:29.041 DEBUG 13240 [nio-8980-exec-1] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@682482ee] will not be managed by Spring
2019-07-11 09:14:29.042 DEBUG 13240 [nio-8980-exec-1] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", dd.id AS "userInfo.id", dd.mobile AS "userInfo.mobile", dd.password AS "userInfo.password", dd.icon AS "userInfo.icon", dd.regtime AS "userInfo.regtime", dd.lastlogin AS "userInfo.lastlogin", dd.islock AS "userInfo.islock", dd.isauthentication AS "userInfo.isauthentication", dd.type AS "userInfo.type", dd.create_by AS "userInfo.createBy", dd.create_date AS "userInfo.createDate", dd.update_by AS "userInfo.updateBy", dd.update_date AS "userInfo.updateDate", dd.remarks AS "userInfo.remarks", dd.del_flag AS "userInfo.delFlag", dd.nike_name AS "userInfo.nikeName", dd.is_invite AS "userInfo.isInvite", dd.third_id AS "userInfo.thirdId", dd.third_type AS "userInfo.thirdType", dd.third_icon AS "userInfo.thirdIcon", dd.member_lv AS "userInfo.memberLv", dd.member_flag AS "userInfo.memberFlag", dd.member_start AS "userInfo.memberStart", dd.member_end AS "userInfo.memberEnd", dd.invite_user_id AS "userInfo.inviteUserId", di.id AS "doctorInfos.id", di.doctorid AS "doctorInfos.doctorid", di.doctornum AS "doctorInfos.doctornum", di.name AS "doctorInfos.name", di.sex AS "doctorInfos.sex", di.age AS "doctorInfos.age", di.telephone AS "doctorInfos.telephone", di.idcard AS "doctorInfos.idcard", di.adress AS "doctorInfos.adress", di.technical AS "doctorInfos.technical", di.classify AS "doctorInfos.classify", di.introduce AS "doctorInfos.introduce", di.create_by AS "doctorInfos.createBy", di.cost AS "doctorInfos.cost", di.create_date AS "doctorInfos.createDate", di.update_by AS "doctorInfos.updateBy", di.update_date AS "doctorInfos.updateDate", di.remarks AS "doctorInfos.remarks", di.del_flag AS "doctorInfos.delFlag", di.cityid AS "doctorInfos.cityid", di.come_flag AS "doctorInfos.comeFlag", di.come_cost AS "doctorInfos.comeCost", di.own_flag AS "doctorInfos.ownFlag", di.first_count AS "doctorInfos.firstCount", di.star_lv AS "doctorInfos.starLv" FROM sys_tiaoli_order a LEFT JOIN sys_user_info dd ON a.userid = dd.id LEFT JOIN sys_doctor_info di ON a.docid = di.doctorid WHERE a.order_no = ? ORDER BY a.create_date DESC 
2019-07-11 09:14:29.042 DEBUG 13240 [nio-8980-exec-1] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - ==> Parameters: 071109142808201(String)
2019-07-11 09:14:29.067 DEBUG 13240 [nio-8980-exec-1] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - <==      Total: 0
2019-07-11 09:14:29.081 DEBUG 13240 [nio-8980-exec-1] [c.j.c.m.m.provider.SelectSqlProvider   ] - 1毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.total_price AS "totalPrice", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag" FROM sys_member_order a WHERE a.order_no = #{sqlMap.where#order_no#EQ1} ORDER BY a.update_date DESC
2019-07-11 09:14:29.082 DEBUG 13240 [nio-8980-exec-1] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@682482ee] will not be managed by Spring
2019-07-11 09:14:29.082 DEBUG 13240 [nio-8980-exec-1] [c.j.m.app.dao.MemberOrderDao.findList  ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.total_price AS "totalPrice", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag" FROM sys_member_order a WHERE a.order_no = ? ORDER BY a.update_date DESC 
2019-07-11 09:14:29.083 DEBUG 13240 [nio-8980-exec-1] [c.j.m.app.dao.MemberOrderDao.findList  ] - ==> Parameters: 071109142808201(String)
2019-07-11 09:14:29.107 DEBUG 13240 [nio-8980-exec-1] [c.j.m.app.dao.MemberOrderDao.findList  ] - <==      Total: 0
2019-07-11 09:14:29.119 DEBUG 13240 [nio-8980-exec-1] [c.j.c.m.m.provider.SelectSqlProvider   ] - 1毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.total_price AS "totalPrice", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", a.doctor_user_id AS "doctorUserId" FROM sys_doctor_register_order a WHERE a.order_no = #{sqlMap.where#order_no#EQ1} ORDER BY a.update_date DESC
2019-07-11 09:14:29.120 DEBUG 13240 [nio-8980-exec-1] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@682482ee] will not be managed by Spring
2019-07-11 09:14:29.120 DEBUG 13240 [nio-8980-exec-1] [c.j.m.a.d.D.findList                   ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.total_price AS "totalPrice", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", a.doctor_user_id AS "doctorUserId" FROM sys_doctor_register_order a WHERE a.order_no = ? ORDER BY a.update_date DESC 
2019-07-11 09:14:29.120 DEBUG 13240 [nio-8980-exec-1] [c.j.m.a.d.D.findList                   ] - ==> Parameters: 071109142808201(String)
2019-07-11 09:14:29.144 DEBUG 13240 [nio-8980-exec-1] [c.j.m.a.d.D.findList                   ] - <==      Total: 0
2019-07-11 09:14:29.155 DEBUG 13240 [nio-8980-exec-1] [c.j.c.m.m.provider.SelectSqlProvider   ] - 0毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag" FROM sys_dashang_order a WHERE a.order_no = #{sqlMap.where#order_no#EQ1} ORDER BY a.update_date DESC
2019-07-11 09:14:29.156 DEBUG 13240 [nio-8980-exec-1] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@682482ee] will not be managed by Spring
2019-07-11 09:14:29.157 DEBUG 13240 [nio-8980-exec-1] [c.j.m.app.dao.DashangOrderDao.findList ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag" FROM sys_dashang_order a WHERE a.order_no = ? ORDER BY a.update_date DESC 
2019-07-11 09:14:29.157 DEBUG 13240 [nio-8980-exec-1] [c.j.m.app.dao.DashangOrderDao.findList ] - ==> Parameters: 071109142808201(String)
2019-07-11 09:14:29.181 DEBUG 13240 [nio-8980-exec-1] [c.j.m.app.dao.DashangOrderDao.findList ] - <==      Total: 0
2019-07-11 09:14:29.238 DEBUG 13240 [nio-8980-exec-1] [c.j.c.m.m.provider.UpdateSqlProvider   ] - 31毫秒: UPDATE sys_order SET `order_no` = #{orderNo}, `order_status` = #{orderStatus}, `product_count` = #{productCount}, `total_price` = #{totalPrice}, `logistics_price` = #{logisticsPrice}, `discount_price` = #{discountPrice}, `really_price` = #{reallyPrice}, `pay_channel` = #{payChannel}, `out_trade_no` = #{outTradeNo}, `update_by` = #{updateBy}, `user_id` = #{userId}, `del_flag` = #{delFlag}, `delivery_name` = #{deliveryName}, `delivery_address` = #{deliveryAddress}, `delivery_phone` = #{deliveryPhone}, `total_count` = #{totalCount} WHERE `id` = #{id}
2019-07-11 09:14:29.238 DEBUG 13240 [nio-8980-exec-1] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@682482ee] will be managed by Spring
2019-07-11 09:14:29.239 DEBUG 13240 [nio-8980-exec-1] [c.j.modules.app.dao.OrderDao.update    ] - ==>  Preparing: UPDATE sys_order SET `order_no` = ?, `order_status` = ?, `product_count` = ?, `total_price` = ?, `logistics_price` = ?, `discount_price` = ?, `really_price` = ?, `pay_channel` = ?, `out_trade_no` = ?, `update_by` = ?, `user_id` = ?, `del_flag` = ?, `delivery_name` = ?, `delivery_address` = ?, `delivery_phone` = ?, `total_count` = ? WHERE `id` = ? 
2019-07-11 09:14:29.240 DEBUG 13240 [nio-8980-exec-1] [c.j.modules.app.dao.OrderDao.update    ] - ==> Parameters: 071109142808201(String), 0(String), 1(String), 3000(String), 0(String), 0(String), 3000(String), null(String), 201907119142800000(String), system(String), 123(String), 0(String), 范耘诚123(String), 辽宁省铁西区铁西广场23(String), 15004001841(String), 6(String), 307(String)
2019-07-11 09:14:29.286 DEBUG 13240 [nio-8980-exec-1] [c.j.modules.app.dao.OrderDao.update    ] - <==    Updates: 1
2019-07-11 09:14:35.015 DEBUG 13240 [nio-8980-exec-2] [c.j.c.m.m.provider.SelectSqlProvider   ] - 0毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.product_count AS "productCount", a.total_price AS "totalPrice", a.logistics_price AS "logisticsPrice", a.discount_price AS "discountPrice", a.really_price AS "reallyPrice", a.pay_channel AS "payChannel", a.out_trade_no AS "outTradeNo", a.create_date AS "createDate", a.update_date AS "updateDate", a.create_by AS "createBy", a.update_by AS "updateBy", a.pay_date AS "payDate", a.user_id AS "userId", a.address_id AS "addressId", a.logistics_id AS "logisticsId", a.delivery_date AS "deliveryDate", a.del_flag AS "delFlag", a.delivery_name AS "deliveryName", a.delivery_address AS "deliveryAddress", a.delivery_phone AS "deliveryPhone", a.total_count AS "totalCount", a.trade_no AS "tradeNo" FROM sys_order a WHERE a.out_trade_no = #{sqlMap.where#out_trade_no#EQ1} ORDER BY a.update_date DESC
2019-07-11 09:14:35.016 DEBUG 13240 [nio-8980-exec-2] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@682482ee] will not be managed by Spring
2019-07-11 09:14:35.016 DEBUG 13240 [nio-8980-exec-2] [c.j.modules.app.dao.OrderDao.findList  ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.product_count AS "productCount", a.total_price AS "totalPrice", a.logistics_price AS "logisticsPrice", a.discount_price AS "discountPrice", a.really_price AS "reallyPrice", a.pay_channel AS "payChannel", a.out_trade_no AS "outTradeNo", a.create_date AS "createDate", a.update_date AS "updateDate", a.create_by AS "createBy", a.update_by AS "updateBy", a.pay_date AS "payDate", a.user_id AS "userId", a.address_id AS "addressId", a.logistics_id AS "logisticsId", a.delivery_date AS "deliveryDate", a.del_flag AS "delFlag", a.delivery_name AS "deliveryName", a.delivery_address AS "deliveryAddress", a.delivery_phone AS "deliveryPhone", a.total_count AS "totalCount", a.trade_no AS "tradeNo" FROM sys_order a WHERE a.out_trade_no = ? ORDER BY a.update_date DESC 
2019-07-11 09:14:35.017 DEBUG 13240 [nio-8980-exec-2] [c.j.modules.app.dao.OrderDao.findList  ] - ==> Parameters: 201907119142800000(String)
2019-07-11 09:14:35.042 DEBUG 13240 [nio-8980-exec-2] [c.j.modules.app.dao.OrderDao.findList  ] - <==      Total: 1
2019-07-11 09:14:35.043 DEBUG 13240 [nio-8980-exec-2] [c.j.c.m.m.provider.SelectSqlProvider   ] - 0毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", dd.id AS "userInfo.id", dd.mobile AS "userInfo.mobile", dd.password AS "userInfo.password", dd.icon AS "userInfo.icon", dd.regtime AS "userInfo.regtime", dd.lastlogin AS "userInfo.lastlogin", dd.islock AS "userInfo.islock", dd.isauthentication AS "userInfo.isauthentication", dd.type AS "userInfo.type", dd.create_by AS "userInfo.createBy", dd.create_date AS "userInfo.createDate", dd.update_by AS "userInfo.updateBy", dd.update_date AS "userInfo.updateDate", dd.remarks AS "userInfo.remarks", dd.del_flag AS "userInfo.delFlag", dd.nike_name AS "userInfo.nikeName", dd.is_invite AS "userInfo.isInvite", dd.third_id AS "userInfo.thirdId", dd.third_type AS "userInfo.thirdType", dd.third_icon AS "userInfo.thirdIcon", dd.member_lv AS "userInfo.memberLv", dd.member_flag AS "userInfo.memberFlag", dd.member_start AS "userInfo.memberStart", dd.member_end AS "userInfo.memberEnd", dd.invite_user_id AS "userInfo.inviteUserId", di.id AS "doctorInfos.id", di.doctorid AS "doctorInfos.doctorid", di.doctornum AS "doctorInfos.doctornum", di.name AS "doctorInfos.name", di.sex AS "doctorInfos.sex", di.age AS "doctorInfos.age", di.telephone AS "doctorInfos.telephone", di.idcard AS "doctorInfos.idcard", di.adress AS "doctorInfos.adress", di.technical AS "doctorInfos.technical", di.classify AS "doctorInfos.classify", di.introduce AS "doctorInfos.introduce", di.create_by AS "doctorInfos.createBy", di.cost AS "doctorInfos.cost", di.create_date AS "doctorInfos.createDate", di.update_by AS "doctorInfos.updateBy", di.update_date AS "doctorInfos.updateDate", di.remarks AS "doctorInfos.remarks", di.del_flag AS "doctorInfos.delFlag", di.cityid AS "doctorInfos.cityid", di.come_flag AS "doctorInfos.comeFlag", di.come_cost AS "doctorInfos.comeCost", di.own_flag AS "doctorInfos.ownFlag", di.first_count AS "doctorInfos.firstCount", di.star_lv AS "doctorInfos.starLv" FROM sys_tiaoli_order a LEFT JOIN sys_user_info dd ON a.userid = dd.id LEFT JOIN sys_doctor_info di ON a.docid = di.doctorid WHERE a.out_trade_no = #{sqlMap.where#out_trade_no#EQ1} ORDER BY a.create_date DESC
2019-07-11 09:14:35.044 DEBUG 13240 [nio-8980-exec-2] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@682482ee] will not be managed by Spring
2019-07-11 09:14:35.045 DEBUG 13240 [nio-8980-exec-2] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", dd.id AS "userInfo.id", dd.mobile AS "userInfo.mobile", dd.password AS "userInfo.password", dd.icon AS "userInfo.icon", dd.regtime AS "userInfo.regtime", dd.lastlogin AS "userInfo.lastlogin", dd.islock AS "userInfo.islock", dd.isauthentication AS "userInfo.isauthentication", dd.type AS "userInfo.type", dd.create_by AS "userInfo.createBy", dd.create_date AS "userInfo.createDate", dd.update_by AS "userInfo.updateBy", dd.update_date AS "userInfo.updateDate", dd.remarks AS "userInfo.remarks", dd.del_flag AS "userInfo.delFlag", dd.nike_name AS "userInfo.nikeName", dd.is_invite AS "userInfo.isInvite", dd.third_id AS "userInfo.thirdId", dd.third_type AS "userInfo.thirdType", dd.third_icon AS "userInfo.thirdIcon", dd.member_lv AS "userInfo.memberLv", dd.member_flag AS "userInfo.memberFlag", dd.member_start AS "userInfo.memberStart", dd.member_end AS "userInfo.memberEnd", dd.invite_user_id AS "userInfo.inviteUserId", di.id AS "doctorInfos.id", di.doctorid AS "doctorInfos.doctorid", di.doctornum AS "doctorInfos.doctornum", di.name AS "doctorInfos.name", di.sex AS "doctorInfos.sex", di.age AS "doctorInfos.age", di.telephone AS "doctorInfos.telephone", di.idcard AS "doctorInfos.idcard", di.adress AS "doctorInfos.adress", di.technical AS "doctorInfos.technical", di.classify AS "doctorInfos.classify", di.introduce AS "doctorInfos.introduce", di.create_by AS "doctorInfos.createBy", di.cost AS "doctorInfos.cost", di.create_date AS "doctorInfos.createDate", di.update_by AS "doctorInfos.updateBy", di.update_date AS "doctorInfos.updateDate", di.remarks AS "doctorInfos.remarks", di.del_flag AS "doctorInfos.delFlag", di.cityid AS "doctorInfos.cityid", di.come_flag AS "doctorInfos.comeFlag", di.come_cost AS "doctorInfos.comeCost", di.own_flag AS "doctorInfos.ownFlag", di.first_count AS "doctorInfos.firstCount", di.star_lv AS "doctorInfos.starLv" FROM sys_tiaoli_order a LEFT JOIN sys_user_info dd ON a.userid = dd.id LEFT JOIN sys_doctor_info di ON a.docid = di.doctorid WHERE a.out_trade_no = ? ORDER BY a.create_date DESC 
2019-07-11 09:14:35.045 DEBUG 13240 [nio-8980-exec-2] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - ==> Parameters: 201907119142800000(String)
2019-07-11 09:14:35.071 DEBUG 13240 [nio-8980-exec-2] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - <==      Total: 0
2019-07-11 09:14:35.072 DEBUG 13240 [nio-8980-exec-2] [c.j.c.m.m.provider.SelectSqlProvider   ] - 0毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", dd.id AS "userInfo.id", dd.mobile AS "userInfo.mobile", dd.password AS "userInfo.password", dd.icon AS "userInfo.icon", dd.regtime AS "userInfo.regtime", dd.lastlogin AS "userInfo.lastlogin", dd.islock AS "userInfo.islock", dd.isauthentication AS "userInfo.isauthentication", dd.type AS "userInfo.type", dd.create_by AS "userInfo.createBy", dd.create_date AS "userInfo.createDate", dd.update_by AS "userInfo.updateBy", dd.update_date AS "userInfo.updateDate", dd.remarks AS "userInfo.remarks", dd.del_flag AS "userInfo.delFlag", dd.nike_name AS "userInfo.nikeName", dd.is_invite AS "userInfo.isInvite", dd.third_id AS "userInfo.thirdId", dd.third_type AS "userInfo.thirdType", dd.third_icon AS "userInfo.thirdIcon", dd.member_lv AS "userInfo.memberLv", dd.member_flag AS "userInfo.memberFlag", dd.member_start AS "userInfo.memberStart", dd.member_end AS "userInfo.memberEnd", dd.invite_user_id AS "userInfo.inviteUserId", di.id AS "doctorInfos.id", di.doctorid AS "doctorInfos.doctorid", di.doctornum AS "doctorInfos.doctornum", di.name AS "doctorInfos.name", di.sex AS "doctorInfos.sex", di.age AS "doctorInfos.age", di.telephone AS "doctorInfos.telephone", di.idcard AS "doctorInfos.idcard", di.adress AS "doctorInfos.adress", di.technical AS "doctorInfos.technical", di.classify AS "doctorInfos.classify", di.introduce AS "doctorInfos.introduce", di.create_by AS "doctorInfos.createBy", di.cost AS "doctorInfos.cost", di.create_date AS "doctorInfos.createDate", di.update_by AS "doctorInfos.updateBy", di.update_date AS "doctorInfos.updateDate", di.remarks AS "doctorInfos.remarks", di.del_flag AS "doctorInfos.delFlag", di.cityid AS "doctorInfos.cityid", di.come_flag AS "doctorInfos.comeFlag", di.come_cost AS "doctorInfos.comeCost", di.own_flag AS "doctorInfos.ownFlag", di.first_count AS "doctorInfos.firstCount", di.star_lv AS "doctorInfos.starLv" FROM sys_tiaoli_order a LEFT JOIN sys_user_info dd ON a.userid = dd.id LEFT JOIN sys_doctor_info di ON a.docid = di.doctorid WHERE a.out_trade_no = #{sqlMap.where#out_trade_no#EQ1} ORDER BY a.create_date DESC
2019-07-11 09:14:35.073 DEBUG 13240 [nio-8980-exec-2] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@682482ee] will not be managed by Spring
2019-07-11 09:14:35.073 DEBUG 13240 [nio-8980-exec-2] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", dd.id AS "userInfo.id", dd.mobile AS "userInfo.mobile", dd.password AS "userInfo.password", dd.icon AS "userInfo.icon", dd.regtime AS "userInfo.regtime", dd.lastlogin AS "userInfo.lastlogin", dd.islock AS "userInfo.islock", dd.isauthentication AS "userInfo.isauthentication", dd.type AS "userInfo.type", dd.create_by AS "userInfo.createBy", dd.create_date AS "userInfo.createDate", dd.update_by AS "userInfo.updateBy", dd.update_date AS "userInfo.updateDate", dd.remarks AS "userInfo.remarks", dd.del_flag AS "userInfo.delFlag", dd.nike_name AS "userInfo.nikeName", dd.is_invite AS "userInfo.isInvite", dd.third_id AS "userInfo.thirdId", dd.third_type AS "userInfo.thirdType", dd.third_icon AS "userInfo.thirdIcon", dd.member_lv AS "userInfo.memberLv", dd.member_flag AS "userInfo.memberFlag", dd.member_start AS "userInfo.memberStart", dd.member_end AS "userInfo.memberEnd", dd.invite_user_id AS "userInfo.inviteUserId", di.id AS "doctorInfos.id", di.doctorid AS "doctorInfos.doctorid", di.doctornum AS "doctorInfos.doctornum", di.name AS "doctorInfos.name", di.sex AS "doctorInfos.sex", di.age AS "doctorInfos.age", di.telephone AS "doctorInfos.telephone", di.idcard AS "doctorInfos.idcard", di.adress AS "doctorInfos.adress", di.technical AS "doctorInfos.technical", di.classify AS "doctorInfos.classify", di.introduce AS "doctorInfos.introduce", di.create_by AS "doctorInfos.createBy", di.cost AS "doctorInfos.cost", di.create_date AS "doctorInfos.createDate", di.update_by AS "doctorInfos.updateBy", di.update_date AS "doctorInfos.updateDate", di.remarks AS "doctorInfos.remarks", di.del_flag AS "doctorInfos.delFlag", di.cityid AS "doctorInfos.cityid", di.come_flag AS "doctorInfos.comeFlag", di.come_cost AS "doctorInfos.comeCost", di.own_flag AS "doctorInfos.ownFlag", di.first_count AS "doctorInfos.firstCount", di.star_lv AS "doctorInfos.starLv" FROM sys_tiaoli_order a LEFT JOIN sys_user_info dd ON a.userid = dd.id LEFT JOIN sys_doctor_info di ON a.docid = di.doctorid WHERE a.out_trade_no = ? ORDER BY a.create_date DESC 
2019-07-11 09:14:35.074 DEBUG 13240 [nio-8980-exec-2] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - ==> Parameters: 201907119142800000(String)
2019-07-11 09:14:35.099 DEBUG 13240 [nio-8980-exec-2] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - <==      Total: 0
2019-07-11 09:14:35.100 DEBUG 13240 [nio-8980-exec-2] [c.j.c.m.m.provider.SelectSqlProvider   ] - 1毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.total_price AS "totalPrice", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag" FROM sys_member_order a WHERE a.out_trade_no = #{sqlMap.where#out_trade_no#EQ1} ORDER BY a.update_date DESC
2019-07-11 09:14:35.100 DEBUG 13240 [nio-8980-exec-2] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@682482ee] will not be managed by Spring
2019-07-11 09:14:35.101 DEBUG 13240 [nio-8980-exec-2] [c.j.m.app.dao.MemberOrderDao.findList  ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.total_price AS "totalPrice", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag" FROM sys_member_order a WHERE a.out_trade_no = ? ORDER BY a.update_date DESC 
2019-07-11 09:14:35.102 DEBUG 13240 [nio-8980-exec-2] [c.j.m.app.dao.MemberOrderDao.findList  ] - ==> Parameters: 201907119142800000(String)
2019-07-11 09:14:35.125 DEBUG 13240 [nio-8980-exec-2] [c.j.m.app.dao.MemberOrderDao.findList  ] - <==      Total: 0
2019-07-11 09:14:35.126 DEBUG 13240 [nio-8980-exec-2] [c.j.c.m.m.provider.SelectSqlProvider   ] - 0毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.total_price AS "totalPrice", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", a.doctor_user_id AS "doctorUserId" FROM sys_doctor_register_order a WHERE a.out_trade_no = #{sqlMap.where#out_trade_no#EQ1} ORDER BY a.update_date DESC
2019-07-11 09:14:35.127 DEBUG 13240 [nio-8980-exec-2] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@682482ee] will not be managed by Spring
2019-07-11 09:14:35.127 DEBUG 13240 [nio-8980-exec-2] [c.j.m.a.d.D.findList                   ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.total_price AS "totalPrice", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", a.doctor_user_id AS "doctorUserId" FROM sys_doctor_register_order a WHERE a.out_trade_no = ? ORDER BY a.update_date DESC 
2019-07-11 09:14:35.128 DEBUG 13240 [nio-8980-exec-2] [c.j.m.a.d.D.findList                   ] - ==> Parameters: 201907119142800000(String)
2019-07-11 09:14:35.151 DEBUG 13240 [nio-8980-exec-2] [c.j.m.a.d.D.findList                   ] - <==      Total: 0
2019-07-11 09:14:35.152 DEBUG 13240 [nio-8980-exec-2] [c.j.c.m.m.provider.SelectSqlProvider   ] - 0毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag" FROM sys_dashang_order a WHERE a.out_trade_no = #{sqlMap.where#out_trade_no#EQ1} ORDER BY a.update_date DESC
2019-07-11 09:14:35.153 DEBUG 13240 [nio-8980-exec-2] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@682482ee] will not be managed by Spring
2019-07-11 09:14:35.153 DEBUG 13240 [nio-8980-exec-2] [c.j.m.app.dao.DashangOrderDao.findList ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag" FROM sys_dashang_order a WHERE a.out_trade_no = ? ORDER BY a.update_date DESC 
2019-07-11 09:14:35.154 DEBUG 13240 [nio-8980-exec-2] [c.j.m.app.dao.DashangOrderDao.findList ] - ==> Parameters: 201907119142800000(String)
2019-07-11 09:14:35.177 DEBUG 13240 [nio-8980-exec-2] [c.j.m.app.dao.DashangOrderDao.findList ] - <==      Total: 0
2019-07-11 09:14:35.251 DEBUG 13240 [nio-8980-exec-2] [c.j.c.m.m.provider.UpdateSqlProvider   ] - 48毫秒: UPDATE sys_order SET `order_no` = #{orderNo}, `order_status` = #{orderStatus}, `product_count` = #{productCount}, `total_price` = #{totalPrice}, `logistics_price` = #{logisticsPrice}, `discount_price` = #{discountPrice}, `really_price` = #{reallyPrice}, `pay_channel` = #{payChannel}, `out_trade_no` = #{outTradeNo}, `update_by` = #{updateBy}, `pay_date` = #{payDate}, `user_id` = #{userId}, `del_flag` = #{delFlag}, `delivery_name` = #{deliveryName}, `delivery_address` = #{deliveryAddress}, `delivery_phone` = #{deliveryPhone}, `total_count` = #{totalCount} WHERE `id` = #{id}
2019-07-11 09:14:35.252 DEBUG 13240 [nio-8980-exec-2] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@682482ee] will be managed by Spring
2019-07-11 09:14:35.252 DEBUG 13240 [nio-8980-exec-2] [c.j.modules.app.dao.OrderDao.update    ] - ==>  Preparing: UPDATE sys_order SET `order_no` = ?, `order_status` = ?, `product_count` = ?, `total_price` = ?, `logistics_price` = ?, `discount_price` = ?, `really_price` = ?, `pay_channel` = ?, `out_trade_no` = ?, `update_by` = ?, `pay_date` = ?, `user_id` = ?, `del_flag` = ?, `delivery_name` = ?, `delivery_address` = ?, `delivery_phone` = ?, `total_count` = ? WHERE `id` = ? 
2019-07-11 09:14:35.253 DEBUG 13240 [nio-8980-exec-2] [c.j.modules.app.dao.OrderDao.update    ] - ==> Parameters: 071109142808201(String), 1(String), 1(String), 3000(String), 0(String), 0(String), 3000(String), 微信(String), 201907119142800000(String), system(String), 2019-07-11 09:14:35.178(Timestamp), 123(String), 0(String), 范耘诚123(String), 辽宁省铁西区铁西广场23(String), 15004001841(String), 6(String), 307(String)
2019-07-11 09:14:35.299 DEBUG 13240 [nio-8980-exec-2] [c.j.modules.app.dao.OrderDao.update    ] - <==    Updates: 1
2019-07-11 09:14:35.404 DEBUG 13240 [nio-8980-exec-2] [c.j.c.m.m.provider.SelectSqlProvider   ] - 1毫秒: SELECT a.id AS "id", a.user_id AS "userId", a.discount_price AS "discountPrice", a.create_date AS "createDate", a.update_date AS "updateDate", a.create_by AS "createBy", a.update_by AS "updateBy", a.remarks AS "remarks", dd.id AS "discountDetail.id", dd.discount_id AS "discountDetail.discountId", dd.remarks AS "discountDetail.remarks", dd.detail_price AS "discountDetail.detailPrice", dd.detail_state AS "discountDetail.detailState", dd.create_date AS "discountDetail.createDate", dd.update_date AS "discountDetail.updateDate", dd.create_by AS "discountDetail.createBy", dd.update_by AS "discountDetail.updateBy", dd.del_flag AS "discountDetail.delFlag" FROM sys_discount a LEFT JOIN sys_discount_detail dd ON a.id = dd.discount_id WHERE a.user_id = #{sqlMap.where#user_id#EQ1} ORDER BY a.update_date DESC
2019-07-11 09:14:35.404 DEBUG 13240 [nio-8980-exec-2] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@682482ee] will be managed by Spring
2019-07-11 09:14:35.405 DEBUG 13240 [nio-8980-exec-2] [c.j.m.app.dao.DiscountDao.findList     ] - ==>  Preparing: SELECT a.id AS "id", a.user_id AS "userId", a.discount_price AS "discountPrice", a.create_date AS "createDate", a.update_date AS "updateDate", a.create_by AS "createBy", a.update_by AS "updateBy", a.remarks AS "remarks", dd.id AS "discountDetail.id", dd.discount_id AS "discountDetail.discountId", dd.remarks AS "discountDetail.remarks", dd.detail_price AS "discountDetail.detailPrice", dd.detail_state AS "discountDetail.detailState", dd.create_date AS "discountDetail.createDate", dd.update_date AS "discountDetail.updateDate", dd.create_by AS "discountDetail.createBy", dd.update_by AS "discountDetail.updateBy", dd.del_flag AS "discountDetail.delFlag" FROM sys_discount a LEFT JOIN sys_discount_detail dd ON a.id = dd.discount_id WHERE a.user_id = ? ORDER BY a.update_date DESC 
2019-07-11 09:14:35.406 DEBUG 13240 [nio-8980-exec-2] [c.j.m.app.dao.DiscountDao.findList     ] - ==> Parameters: 123(String)
2019-07-11 09:14:35.432 DEBUG 13240 [nio-8980-exec-2] [c.j.m.app.dao.DiscountDao.findList     ] - <==      Total: 1
2019-07-11 09:14:35.434 DEBUG 13240 [nio-8980-exec-2] [c.j.c.m.m.provider.UpdateSqlProvider   ] - 1毫秒: UPDATE sys_discount SET `user_id` = #{userId}, `discount_price` = #{discountPrice}, `update_date` = #{updateDate}, `update_by` = #{updateBy}, `remarks` = #{remarks} WHERE `id` = #{id}
2019-07-11 09:14:35.434 DEBUG 13240 [nio-8980-exec-2] [c.j.modules.app.dao.DiscountDao.update ] - ==>  Preparing: UPDATE sys_discount SET `user_id` = ?, `discount_price` = ?, `update_date` = ?, `update_by` = ?, `remarks` = ? WHERE `id` = ? 
2019-07-11 09:14:35.435 DEBUG 13240 [nio-8980-exec-2] [c.j.modules.app.dao.DiscountDao.update ] - ==> Parameters: 123(String), 0(String), 2019-07-11 09:14:35.433(Timestamp), system(String), 备注(String), 1(String)
2019-07-11 09:14:35.480 DEBUG 13240 [nio-8980-exec-2] [c.j.modules.app.dao.DiscountDao.update ] - <==    Updates: 1
2019-07-11 09:15:34.406 DEBUG 13240 [nio-8980-exec-5] [c.j.c.m.m.provider.SelectSqlProvider   ] - 1毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.product_count AS "productCount", a.total_price AS "totalPrice", a.logistics_price AS "logisticsPrice", a.discount_price AS "discountPrice", a.really_price AS "reallyPrice", a.pay_channel AS "payChannel", a.out_trade_no AS "outTradeNo", a.create_date AS "createDate", a.update_date AS "updateDate", a.create_by AS "createBy", a.update_by AS "updateBy", a.pay_date AS "payDate", a.user_id AS "userId", a.address_id AS "addressId", a.logistics_id AS "logisticsId", a.delivery_date AS "deliveryDate", a.del_flag AS "delFlag", a.delivery_name AS "deliveryName", a.delivery_address AS "deliveryAddress", a.delivery_phone AS "deliveryPhone", a.total_count AS "totalCount", a.trade_no AS "tradeNo" FROM sys_order a WHERE a.order_no = #{sqlMap.where#order_no#EQ1} ORDER BY a.update_date DESC
2019-07-11 09:15:34.407 DEBUG 13240 [nio-8980-exec-5] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@682482ee] will not be managed by Spring
2019-07-11 09:15:34.407 DEBUG 13240 [nio-8980-exec-5] [c.j.modules.app.dao.OrderDao.findList  ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.product_count AS "productCount", a.total_price AS "totalPrice", a.logistics_price AS "logisticsPrice", a.discount_price AS "discountPrice", a.really_price AS "reallyPrice", a.pay_channel AS "payChannel", a.out_trade_no AS "outTradeNo", a.create_date AS "createDate", a.update_date AS "updateDate", a.create_by AS "createBy", a.update_by AS "updateBy", a.pay_date AS "payDate", a.user_id AS "userId", a.address_id AS "addressId", a.logistics_id AS "logisticsId", a.delivery_date AS "deliveryDate", a.del_flag AS "delFlag", a.delivery_name AS "deliveryName", a.delivery_address AS "deliveryAddress", a.delivery_phone AS "deliveryPhone", a.total_count AS "totalCount", a.trade_no AS "tradeNo" FROM sys_order a WHERE a.order_no = ? ORDER BY a.update_date DESC 
2019-07-11 09:15:34.407 DEBUG 13240 [nio-8980-exec-5] [c.j.modules.app.dao.OrderDao.findList  ] - ==> Parameters: 071109153403201(String)
2019-07-11 09:15:34.432 DEBUG 13240 [nio-8980-exec-5] [c.j.modules.app.dao.OrderDao.findList  ] - <==      Total: 1
2019-07-11 09:15:34.434 DEBUG 13240 [nio-8980-exec-5] [c.j.c.m.m.provider.SelectSqlProvider   ] - 1毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", dd.id AS "userInfo.id", dd.mobile AS "userInfo.mobile", dd.password AS "userInfo.password", dd.icon AS "userInfo.icon", dd.regtime AS "userInfo.regtime", dd.lastlogin AS "userInfo.lastlogin", dd.islock AS "userInfo.islock", dd.isauthentication AS "userInfo.isauthentication", dd.type AS "userInfo.type", dd.create_by AS "userInfo.createBy", dd.create_date AS "userInfo.createDate", dd.update_by AS "userInfo.updateBy", dd.update_date AS "userInfo.updateDate", dd.remarks AS "userInfo.remarks", dd.del_flag AS "userInfo.delFlag", dd.nike_name AS "userInfo.nikeName", dd.is_invite AS "userInfo.isInvite", dd.third_id AS "userInfo.thirdId", dd.third_type AS "userInfo.thirdType", dd.third_icon AS "userInfo.thirdIcon", dd.member_lv AS "userInfo.memberLv", dd.member_flag AS "userInfo.memberFlag", dd.member_start AS "userInfo.memberStart", dd.member_end AS "userInfo.memberEnd", dd.invite_user_id AS "userInfo.inviteUserId", di.id AS "doctorInfos.id", di.doctorid AS "doctorInfos.doctorid", di.doctornum AS "doctorInfos.doctornum", di.name AS "doctorInfos.name", di.sex AS "doctorInfos.sex", di.age AS "doctorInfos.age", di.telephone AS "doctorInfos.telephone", di.idcard AS "doctorInfos.idcard", di.adress AS "doctorInfos.adress", di.technical AS "doctorInfos.technical", di.classify AS "doctorInfos.classify", di.introduce AS "doctorInfos.introduce", di.create_by AS "doctorInfos.createBy", di.cost AS "doctorInfos.cost", di.create_date AS "doctorInfos.createDate", di.update_by AS "doctorInfos.updateBy", di.update_date AS "doctorInfos.updateDate", di.remarks AS "doctorInfos.remarks", di.del_flag AS "doctorInfos.delFlag", di.cityid AS "doctorInfos.cityid", di.come_flag AS "doctorInfos.comeFlag", di.come_cost AS "doctorInfos.comeCost", di.own_flag AS "doctorInfos.ownFlag", di.first_count AS "doctorInfos.firstCount", di.star_lv AS "doctorInfos.starLv" FROM sys_tiaoli_order a LEFT JOIN sys_user_info dd ON a.userid = dd.id LEFT JOIN sys_doctor_info di ON a.docid = di.doctorid WHERE a.order_no = #{sqlMap.where#order_no#EQ1} ORDER BY a.create_date DESC
2019-07-11 09:15:34.434 DEBUG 13240 [nio-8980-exec-5] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@682482ee] will not be managed by Spring
2019-07-11 09:15:34.435 DEBUG 13240 [nio-8980-exec-5] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", dd.id AS "userInfo.id", dd.mobile AS "userInfo.mobile", dd.password AS "userInfo.password", dd.icon AS "userInfo.icon", dd.regtime AS "userInfo.regtime", dd.lastlogin AS "userInfo.lastlogin", dd.islock AS "userInfo.islock", dd.isauthentication AS "userInfo.isauthentication", dd.type AS "userInfo.type", dd.create_by AS "userInfo.createBy", dd.create_date AS "userInfo.createDate", dd.update_by AS "userInfo.updateBy", dd.update_date AS "userInfo.updateDate", dd.remarks AS "userInfo.remarks", dd.del_flag AS "userInfo.delFlag", dd.nike_name AS "userInfo.nikeName", dd.is_invite AS "userInfo.isInvite", dd.third_id AS "userInfo.thirdId", dd.third_type AS "userInfo.thirdType", dd.third_icon AS "userInfo.thirdIcon", dd.member_lv AS "userInfo.memberLv", dd.member_flag AS "userInfo.memberFlag", dd.member_start AS "userInfo.memberStart", dd.member_end AS "userInfo.memberEnd", dd.invite_user_id AS "userInfo.inviteUserId", di.id AS "doctorInfos.id", di.doctorid AS "doctorInfos.doctorid", di.doctornum AS "doctorInfos.doctornum", di.name AS "doctorInfos.name", di.sex AS "doctorInfos.sex", di.age AS "doctorInfos.age", di.telephone AS "doctorInfos.telephone", di.idcard AS "doctorInfos.idcard", di.adress AS "doctorInfos.adress", di.technical AS "doctorInfos.technical", di.classify AS "doctorInfos.classify", di.introduce AS "doctorInfos.introduce", di.create_by AS "doctorInfos.createBy", di.cost AS "doctorInfos.cost", di.create_date AS "doctorInfos.createDate", di.update_by AS "doctorInfos.updateBy", di.update_date AS "doctorInfos.updateDate", di.remarks AS "doctorInfos.remarks", di.del_flag AS "doctorInfos.delFlag", di.cityid AS "doctorInfos.cityid", di.come_flag AS "doctorInfos.comeFlag", di.come_cost AS "doctorInfos.comeCost", di.own_flag AS "doctorInfos.ownFlag", di.first_count AS "doctorInfos.firstCount", di.star_lv AS "doctorInfos.starLv" FROM sys_tiaoli_order a LEFT JOIN sys_user_info dd ON a.userid = dd.id LEFT JOIN sys_doctor_info di ON a.docid = di.doctorid WHERE a.order_no = ? ORDER BY a.create_date DESC 
2019-07-11 09:15:34.435 DEBUG 13240 [nio-8980-exec-5] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - ==> Parameters: 071109153403201(String)
2019-07-11 09:15:34.461 DEBUG 13240 [nio-8980-exec-5] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - <==      Total: 0
2019-07-11 09:15:34.463 DEBUG 13240 [nio-8980-exec-5] [c.j.c.m.m.provider.SelectSqlProvider   ] - 1毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", dd.id AS "userInfo.id", dd.mobile AS "userInfo.mobile", dd.password AS "userInfo.password", dd.icon AS "userInfo.icon", dd.regtime AS "userInfo.regtime", dd.lastlogin AS "userInfo.lastlogin", dd.islock AS "userInfo.islock", dd.isauthentication AS "userInfo.isauthentication", dd.type AS "userInfo.type", dd.create_by AS "userInfo.createBy", dd.create_date AS "userInfo.createDate", dd.update_by AS "userInfo.updateBy", dd.update_date AS "userInfo.updateDate", dd.remarks AS "userInfo.remarks", dd.del_flag AS "userInfo.delFlag", dd.nike_name AS "userInfo.nikeName", dd.is_invite AS "userInfo.isInvite", dd.third_id AS "userInfo.thirdId", dd.third_type AS "userInfo.thirdType", dd.third_icon AS "userInfo.thirdIcon", dd.member_lv AS "userInfo.memberLv", dd.member_flag AS "userInfo.memberFlag", dd.member_start AS "userInfo.memberStart", dd.member_end AS "userInfo.memberEnd", dd.invite_user_id AS "userInfo.inviteUserId", di.id AS "doctorInfos.id", di.doctorid AS "doctorInfos.doctorid", di.doctornum AS "doctorInfos.doctornum", di.name AS "doctorInfos.name", di.sex AS "doctorInfos.sex", di.age AS "doctorInfos.age", di.telephone AS "doctorInfos.telephone", di.idcard AS "doctorInfos.idcard", di.adress AS "doctorInfos.adress", di.technical AS "doctorInfos.technical", di.classify AS "doctorInfos.classify", di.introduce AS "doctorInfos.introduce", di.create_by AS "doctorInfos.createBy", di.cost AS "doctorInfos.cost", di.create_date AS "doctorInfos.createDate", di.update_by AS "doctorInfos.updateBy", di.update_date AS "doctorInfos.updateDate", di.remarks AS "doctorInfos.remarks", di.del_flag AS "doctorInfos.delFlag", di.cityid AS "doctorInfos.cityid", di.come_flag AS "doctorInfos.comeFlag", di.come_cost AS "doctorInfos.comeCost", di.own_flag AS "doctorInfos.ownFlag", di.first_count AS "doctorInfos.firstCount", di.star_lv AS "doctorInfos.starLv" FROM sys_tiaoli_order a LEFT JOIN sys_user_info dd ON a.userid = dd.id LEFT JOIN sys_doctor_info di ON a.docid = di.doctorid WHERE a.order_no = #{sqlMap.where#order_no#EQ1} ORDER BY a.create_date DESC
2019-07-11 09:15:34.463 DEBUG 13240 [nio-8980-exec-5] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@682482ee] will not be managed by Spring
2019-07-11 09:15:34.464 DEBUG 13240 [nio-8980-exec-5] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", dd.id AS "userInfo.id", dd.mobile AS "userInfo.mobile", dd.password AS "userInfo.password", dd.icon AS "userInfo.icon", dd.regtime AS "userInfo.regtime", dd.lastlogin AS "userInfo.lastlogin", dd.islock AS "userInfo.islock", dd.isauthentication AS "userInfo.isauthentication", dd.type AS "userInfo.type", dd.create_by AS "userInfo.createBy", dd.create_date AS "userInfo.createDate", dd.update_by AS "userInfo.updateBy", dd.update_date AS "userInfo.updateDate", dd.remarks AS "userInfo.remarks", dd.del_flag AS "userInfo.delFlag", dd.nike_name AS "userInfo.nikeName", dd.is_invite AS "userInfo.isInvite", dd.third_id AS "userInfo.thirdId", dd.third_type AS "userInfo.thirdType", dd.third_icon AS "userInfo.thirdIcon", dd.member_lv AS "userInfo.memberLv", dd.member_flag AS "userInfo.memberFlag", dd.member_start AS "userInfo.memberStart", dd.member_end AS "userInfo.memberEnd", dd.invite_user_id AS "userInfo.inviteUserId", di.id AS "doctorInfos.id", di.doctorid AS "doctorInfos.doctorid", di.doctornum AS "doctorInfos.doctornum", di.name AS "doctorInfos.name", di.sex AS "doctorInfos.sex", di.age AS "doctorInfos.age", di.telephone AS "doctorInfos.telephone", di.idcard AS "doctorInfos.idcard", di.adress AS "doctorInfos.adress", di.technical AS "doctorInfos.technical", di.classify AS "doctorInfos.classify", di.introduce AS "doctorInfos.introduce", di.create_by AS "doctorInfos.createBy", di.cost AS "doctorInfos.cost", di.create_date AS "doctorInfos.createDate", di.update_by AS "doctorInfos.updateBy", di.update_date AS "doctorInfos.updateDate", di.remarks AS "doctorInfos.remarks", di.del_flag AS "doctorInfos.delFlag", di.cityid AS "doctorInfos.cityid", di.come_flag AS "doctorInfos.comeFlag", di.come_cost AS "doctorInfos.comeCost", di.own_flag AS "doctorInfos.ownFlag", di.first_count AS "doctorInfos.firstCount", di.star_lv AS "doctorInfos.starLv" FROM sys_tiaoli_order a LEFT JOIN sys_user_info dd ON a.userid = dd.id LEFT JOIN sys_doctor_info di ON a.docid = di.doctorid WHERE a.order_no = ? ORDER BY a.create_date DESC 
2019-07-11 09:15:34.464 DEBUG 13240 [nio-8980-exec-5] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - ==> Parameters: 071109153403201(String)
2019-07-11 09:15:34.490 DEBUG 13240 [nio-8980-exec-5] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - <==      Total: 0
2019-07-11 09:15:34.491 DEBUG 13240 [nio-8980-exec-5] [c.j.c.m.m.provider.SelectSqlProvider   ] - 1毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.total_price AS "totalPrice", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag" FROM sys_member_order a WHERE a.order_no = #{sqlMap.where#order_no#EQ1} ORDER BY a.update_date DESC
2019-07-11 09:15:34.491 DEBUG 13240 [nio-8980-exec-5] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@682482ee] will not be managed by Spring
2019-07-11 09:15:34.491 DEBUG 13240 [nio-8980-exec-5] [c.j.m.app.dao.MemberOrderDao.findList  ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.total_price AS "totalPrice", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag" FROM sys_member_order a WHERE a.order_no = ? ORDER BY a.update_date DESC 
2019-07-11 09:15:34.492 DEBUG 13240 [nio-8980-exec-5] [c.j.m.app.dao.MemberOrderDao.findList  ] - ==> Parameters: 071109153403201(String)
2019-07-11 09:15:34.515 DEBUG 13240 [nio-8980-exec-5] [c.j.m.app.dao.MemberOrderDao.findList  ] - <==      Total: 0
2019-07-11 09:15:34.516 DEBUG 13240 [nio-8980-exec-5] [c.j.c.m.m.provider.SelectSqlProvider   ] - 1毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.total_price AS "totalPrice", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", a.doctor_user_id AS "doctorUserId" FROM sys_doctor_register_order a WHERE a.order_no = #{sqlMap.where#order_no#EQ1} ORDER BY a.update_date DESC
2019-07-11 09:15:34.516 DEBUG 13240 [nio-8980-exec-5] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@682482ee] will not be managed by Spring
2019-07-11 09:15:34.517 DEBUG 13240 [nio-8980-exec-5] [c.j.m.a.d.D.findList                   ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.total_price AS "totalPrice", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", a.doctor_user_id AS "doctorUserId" FROM sys_doctor_register_order a WHERE a.order_no = ? ORDER BY a.update_date DESC 
2019-07-11 09:15:34.517 DEBUG 13240 [nio-8980-exec-5] [c.j.m.a.d.D.findList                   ] - ==> Parameters: 071109153403201(String)
2019-07-11 09:15:34.540 DEBUG 13240 [nio-8980-exec-5] [c.j.m.a.d.D.findList                   ] - <==      Total: 0
2019-07-11 09:15:34.541 DEBUG 13240 [nio-8980-exec-5] [c.j.c.m.m.provider.SelectSqlProvider   ] - 0毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag" FROM sys_dashang_order a WHERE a.order_no = #{sqlMap.where#order_no#EQ1} ORDER BY a.update_date DESC
2019-07-11 09:15:34.541 DEBUG 13240 [nio-8980-exec-5] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@682482ee] will not be managed by Spring
2019-07-11 09:15:34.542 DEBUG 13240 [nio-8980-exec-5] [c.j.m.app.dao.DashangOrderDao.findList ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag" FROM sys_dashang_order a WHERE a.order_no = ? ORDER BY a.update_date DESC 
2019-07-11 09:15:34.542 DEBUG 13240 [nio-8980-exec-5] [c.j.m.app.dao.DashangOrderDao.findList ] - ==> Parameters: 071109153403201(String)
2019-07-11 09:15:34.565 DEBUG 13240 [nio-8980-exec-5] [c.j.m.app.dao.DashangOrderDao.findList ] - <==      Total: 0
2019-07-11 09:15:34.607 DEBUG 13240 [nio-8980-exec-5] [c.j.c.m.m.provider.UpdateSqlProvider   ] - 19毫秒: UPDATE sys_order SET `order_no` = #{orderNo}, `order_status` = #{orderStatus}, `product_count` = #{productCount}, `total_price` = #{totalPrice}, `logistics_price` = #{logisticsPrice}, `discount_price` = #{discountPrice}, `really_price` = #{reallyPrice}, `pay_channel` = #{payChannel}, `out_trade_no` = #{outTradeNo}, `update_by` = #{updateBy}, `user_id` = #{userId}, `del_flag` = #{delFlag}, `delivery_name` = #{deliveryName}, `delivery_address` = #{deliveryAddress}, `delivery_phone` = #{deliveryPhone}, `total_count` = #{totalCount} WHERE `id` = #{id}
2019-07-11 09:15:34.608 DEBUG 13240 [nio-8980-exec-5] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@682482ee] will be managed by Spring
2019-07-11 09:15:34.608 DEBUG 13240 [nio-8980-exec-5] [c.j.modules.app.dao.OrderDao.update    ] - ==>  Preparing: UPDATE sys_order SET `order_no` = ?, `order_status` = ?, `product_count` = ?, `total_price` = ?, `logistics_price` = ?, `discount_price` = ?, `really_price` = ?, `pay_channel` = ?, `out_trade_no` = ?, `update_by` = ?, `user_id` = ?, `del_flag` = ?, `delivery_name` = ?, `delivery_address` = ?, `delivery_phone` = ?, `total_count` = ? WHERE `id` = ? 
2019-07-11 09:15:34.609 DEBUG 13240 [nio-8980-exec-5] [c.j.modules.app.dao.OrderDao.update    ] - ==> Parameters: 071109153403201(String), 0(String), 1(String), 5500(String), 0(String), 0(String), 5500(String), null(String), 201907119153400001(String), system(String), 123(String), 0(String), 范耘诚123(String), 辽宁省铁西区铁西广场23(String), 15004001841(String), 11(String), 308(String)
2019-07-11 09:15:34.654 DEBUG 13240 [nio-8980-exec-5] [c.j.modules.app.dao.OrderDao.update    ] - <==    Updates: 1
2019-07-11 09:15:40.466 DEBUG 13240 [nio-8980-exec-9] [c.j.c.m.m.provider.SelectSqlProvider   ] - 1毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.product_count AS "productCount", a.total_price AS "totalPrice", a.logistics_price AS "logisticsPrice", a.discount_price AS "discountPrice", a.really_price AS "reallyPrice", a.pay_channel AS "payChannel", a.out_trade_no AS "outTradeNo", a.create_date AS "createDate", a.update_date AS "updateDate", a.create_by AS "createBy", a.update_by AS "updateBy", a.pay_date AS "payDate", a.user_id AS "userId", a.address_id AS "addressId", a.logistics_id AS "logisticsId", a.delivery_date AS "deliveryDate", a.del_flag AS "delFlag", a.delivery_name AS "deliveryName", a.delivery_address AS "deliveryAddress", a.delivery_phone AS "deliveryPhone", a.total_count AS "totalCount", a.trade_no AS "tradeNo" FROM sys_order a WHERE a.out_trade_no = #{sqlMap.where#out_trade_no#EQ1} ORDER BY a.update_date DESC
2019-07-11 09:15:40.466 DEBUG 13240 [nio-8980-exec-9] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@682482ee] will not be managed by Spring
2019-07-11 09:15:40.467 DEBUG 13240 [nio-8980-exec-9] [c.j.modules.app.dao.OrderDao.findList  ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.product_count AS "productCount", a.total_price AS "totalPrice", a.logistics_price AS "logisticsPrice", a.discount_price AS "discountPrice", a.really_price AS "reallyPrice", a.pay_channel AS "payChannel", a.out_trade_no AS "outTradeNo", a.create_date AS "createDate", a.update_date AS "updateDate", a.create_by AS "createBy", a.update_by AS "updateBy", a.pay_date AS "payDate", a.user_id AS "userId", a.address_id AS "addressId", a.logistics_id AS "logisticsId", a.delivery_date AS "deliveryDate", a.del_flag AS "delFlag", a.delivery_name AS "deliveryName", a.delivery_address AS "deliveryAddress", a.delivery_phone AS "deliveryPhone", a.total_count AS "totalCount", a.trade_no AS "tradeNo" FROM sys_order a WHERE a.out_trade_no = ? ORDER BY a.update_date DESC 
2019-07-11 09:15:40.467 DEBUG 13240 [nio-8980-exec-9] [c.j.modules.app.dao.OrderDao.findList  ] - ==> Parameters: 201907119153400001(String)
2019-07-11 09:15:40.491 DEBUG 13240 [nio-8980-exec-9] [c.j.modules.app.dao.OrderDao.findList  ] - <==      Total: 1
2019-07-11 09:15:40.492 DEBUG 13240 [nio-8980-exec-9] [c.j.c.m.m.provider.SelectSqlProvider   ] - 0毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", dd.id AS "userInfo.id", dd.mobile AS "userInfo.mobile", dd.password AS "userInfo.password", dd.icon AS "userInfo.icon", dd.regtime AS "userInfo.regtime", dd.lastlogin AS "userInfo.lastlogin", dd.islock AS "userInfo.islock", dd.isauthentication AS "userInfo.isauthentication", dd.type AS "userInfo.type", dd.create_by AS "userInfo.createBy", dd.create_date AS "userInfo.createDate", dd.update_by AS "userInfo.updateBy", dd.update_date AS "userInfo.updateDate", dd.remarks AS "userInfo.remarks", dd.del_flag AS "userInfo.delFlag", dd.nike_name AS "userInfo.nikeName", dd.is_invite AS "userInfo.isInvite", dd.third_id AS "userInfo.thirdId", dd.third_type AS "userInfo.thirdType", dd.third_icon AS "userInfo.thirdIcon", dd.member_lv AS "userInfo.memberLv", dd.member_flag AS "userInfo.memberFlag", dd.member_start AS "userInfo.memberStart", dd.member_end AS "userInfo.memberEnd", dd.invite_user_id AS "userInfo.inviteUserId", di.id AS "doctorInfos.id", di.doctorid AS "doctorInfos.doctorid", di.doctornum AS "doctorInfos.doctornum", di.name AS "doctorInfos.name", di.sex AS "doctorInfos.sex", di.age AS "doctorInfos.age", di.telephone AS "doctorInfos.telephone", di.idcard AS "doctorInfos.idcard", di.adress AS "doctorInfos.adress", di.technical AS "doctorInfos.technical", di.classify AS "doctorInfos.classify", di.introduce AS "doctorInfos.introduce", di.create_by AS "doctorInfos.createBy", di.cost AS "doctorInfos.cost", di.create_date AS "doctorInfos.createDate", di.update_by AS "doctorInfos.updateBy", di.update_date AS "doctorInfos.updateDate", di.remarks AS "doctorInfos.remarks", di.del_flag AS "doctorInfos.delFlag", di.cityid AS "doctorInfos.cityid", di.come_flag AS "doctorInfos.comeFlag", di.come_cost AS "doctorInfos.comeCost", di.own_flag AS "doctorInfos.ownFlag", di.first_count AS "doctorInfos.firstCount", di.star_lv AS "doctorInfos.starLv" FROM sys_tiaoli_order a LEFT JOIN sys_user_info dd ON a.userid = dd.id LEFT JOIN sys_doctor_info di ON a.docid = di.doctorid WHERE a.out_trade_no = #{sqlMap.where#out_trade_no#EQ1} ORDER BY a.create_date DESC
2019-07-11 09:15:40.493 DEBUG 13240 [nio-8980-exec-9] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@682482ee] will not be managed by Spring
2019-07-11 09:15:40.493 DEBUG 13240 [nio-8980-exec-9] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", dd.id AS "userInfo.id", dd.mobile AS "userInfo.mobile", dd.password AS "userInfo.password", dd.icon AS "userInfo.icon", dd.regtime AS "userInfo.regtime", dd.lastlogin AS "userInfo.lastlogin", dd.islock AS "userInfo.islock", dd.isauthentication AS "userInfo.isauthentication", dd.type AS "userInfo.type", dd.create_by AS "userInfo.createBy", dd.create_date AS "userInfo.createDate", dd.update_by AS "userInfo.updateBy", dd.update_date AS "userInfo.updateDate", dd.remarks AS "userInfo.remarks", dd.del_flag AS "userInfo.delFlag", dd.nike_name AS "userInfo.nikeName", dd.is_invite AS "userInfo.isInvite", dd.third_id AS "userInfo.thirdId", dd.third_type AS "userInfo.thirdType", dd.third_icon AS "userInfo.thirdIcon", dd.member_lv AS "userInfo.memberLv", dd.member_flag AS "userInfo.memberFlag", dd.member_start AS "userInfo.memberStart", dd.member_end AS "userInfo.memberEnd", dd.invite_user_id AS "userInfo.inviteUserId", di.id AS "doctorInfos.id", di.doctorid AS "doctorInfos.doctorid", di.doctornum AS "doctorInfos.doctornum", di.name AS "doctorInfos.name", di.sex AS "doctorInfos.sex", di.age AS "doctorInfos.age", di.telephone AS "doctorInfos.telephone", di.idcard AS "doctorInfos.idcard", di.adress AS "doctorInfos.adress", di.technical AS "doctorInfos.technical", di.classify AS "doctorInfos.classify", di.introduce AS "doctorInfos.introduce", di.create_by AS "doctorInfos.createBy", di.cost AS "doctorInfos.cost", di.create_date AS "doctorInfos.createDate", di.update_by AS "doctorInfos.updateBy", di.update_date AS "doctorInfos.updateDate", di.remarks AS "doctorInfos.remarks", di.del_flag AS "doctorInfos.delFlag", di.cityid AS "doctorInfos.cityid", di.come_flag AS "doctorInfos.comeFlag", di.come_cost AS "doctorInfos.comeCost", di.own_flag AS "doctorInfos.ownFlag", di.first_count AS "doctorInfos.firstCount", di.star_lv AS "doctorInfos.starLv" FROM sys_tiaoli_order a LEFT JOIN sys_user_info dd ON a.userid = dd.id LEFT JOIN sys_doctor_info di ON a.docid = di.doctorid WHERE a.out_trade_no = ? ORDER BY a.create_date DESC 
2019-07-11 09:15:40.494 DEBUG 13240 [nio-8980-exec-9] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - ==> Parameters: 201907119153400001(String)
2019-07-11 09:15:40.520 DEBUG 13240 [nio-8980-exec-9] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - <==      Total: 0
2019-07-11 09:15:40.521 DEBUG 13240 [nio-8980-exec-9] [c.j.c.m.m.provider.SelectSqlProvider   ] - 1毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", dd.id AS "userInfo.id", dd.mobile AS "userInfo.mobile", dd.password AS "userInfo.password", dd.icon AS "userInfo.icon", dd.regtime AS "userInfo.regtime", dd.lastlogin AS "userInfo.lastlogin", dd.islock AS "userInfo.islock", dd.isauthentication AS "userInfo.isauthentication", dd.type AS "userInfo.type", dd.create_by AS "userInfo.createBy", dd.create_date AS "userInfo.createDate", dd.update_by AS "userInfo.updateBy", dd.update_date AS "userInfo.updateDate", dd.remarks AS "userInfo.remarks", dd.del_flag AS "userInfo.delFlag", dd.nike_name AS "userInfo.nikeName", dd.is_invite AS "userInfo.isInvite", dd.third_id AS "userInfo.thirdId", dd.third_type AS "userInfo.thirdType", dd.third_icon AS "userInfo.thirdIcon", dd.member_lv AS "userInfo.memberLv", dd.member_flag AS "userInfo.memberFlag", dd.member_start AS "userInfo.memberStart", dd.member_end AS "userInfo.memberEnd", dd.invite_user_id AS "userInfo.inviteUserId", di.id AS "doctorInfos.id", di.doctorid AS "doctorInfos.doctorid", di.doctornum AS "doctorInfos.doctornum", di.name AS "doctorInfos.name", di.sex AS "doctorInfos.sex", di.age AS "doctorInfos.age", di.telephone AS "doctorInfos.telephone", di.idcard AS "doctorInfos.idcard", di.adress AS "doctorInfos.adress", di.technical AS "doctorInfos.technical", di.classify AS "doctorInfos.classify", di.introduce AS "doctorInfos.introduce", di.create_by AS "doctorInfos.createBy", di.cost AS "doctorInfos.cost", di.create_date AS "doctorInfos.createDate", di.update_by AS "doctorInfos.updateBy", di.update_date AS "doctorInfos.updateDate", di.remarks AS "doctorInfos.remarks", di.del_flag AS "doctorInfos.delFlag", di.cityid AS "doctorInfos.cityid", di.come_flag AS "doctorInfos.comeFlag", di.come_cost AS "doctorInfos.comeCost", di.own_flag AS "doctorInfos.ownFlag", di.first_count AS "doctorInfos.firstCount", di.star_lv AS "doctorInfos.starLv" FROM sys_tiaoli_order a LEFT JOIN sys_user_info dd ON a.userid = dd.id LEFT JOIN sys_doctor_info di ON a.docid = di.doctorid WHERE a.out_trade_no = #{sqlMap.where#out_trade_no#EQ1} ORDER BY a.create_date DESC
2019-07-11 09:15:40.521 DEBUG 13240 [nio-8980-exec-9] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@682482ee] will not be managed by Spring
2019-07-11 09:15:40.522 DEBUG 13240 [nio-8980-exec-9] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", dd.id AS "userInfo.id", dd.mobile AS "userInfo.mobile", dd.password AS "userInfo.password", dd.icon AS "userInfo.icon", dd.regtime AS "userInfo.regtime", dd.lastlogin AS "userInfo.lastlogin", dd.islock AS "userInfo.islock", dd.isauthentication AS "userInfo.isauthentication", dd.type AS "userInfo.type", dd.create_by AS "userInfo.createBy", dd.create_date AS "userInfo.createDate", dd.update_by AS "userInfo.updateBy", dd.update_date AS "userInfo.updateDate", dd.remarks AS "userInfo.remarks", dd.del_flag AS "userInfo.delFlag", dd.nike_name AS "userInfo.nikeName", dd.is_invite AS "userInfo.isInvite", dd.third_id AS "userInfo.thirdId", dd.third_type AS "userInfo.thirdType", dd.third_icon AS "userInfo.thirdIcon", dd.member_lv AS "userInfo.memberLv", dd.member_flag AS "userInfo.memberFlag", dd.member_start AS "userInfo.memberStart", dd.member_end AS "userInfo.memberEnd", dd.invite_user_id AS "userInfo.inviteUserId", di.id AS "doctorInfos.id", di.doctorid AS "doctorInfos.doctorid", di.doctornum AS "doctorInfos.doctornum", di.name AS "doctorInfos.name", di.sex AS "doctorInfos.sex", di.age AS "doctorInfos.age", di.telephone AS "doctorInfos.telephone", di.idcard AS "doctorInfos.idcard", di.adress AS "doctorInfos.adress", di.technical AS "doctorInfos.technical", di.classify AS "doctorInfos.classify", di.introduce AS "doctorInfos.introduce", di.create_by AS "doctorInfos.createBy", di.cost AS "doctorInfos.cost", di.create_date AS "doctorInfos.createDate", di.update_by AS "doctorInfos.updateBy", di.update_date AS "doctorInfos.updateDate", di.remarks AS "doctorInfos.remarks", di.del_flag AS "doctorInfos.delFlag", di.cityid AS "doctorInfos.cityid", di.come_flag AS "doctorInfos.comeFlag", di.come_cost AS "doctorInfos.comeCost", di.own_flag AS "doctorInfos.ownFlag", di.first_count AS "doctorInfos.firstCount", di.star_lv AS "doctorInfos.starLv" FROM sys_tiaoli_order a LEFT JOIN sys_user_info dd ON a.userid = dd.id LEFT JOIN sys_doctor_info di ON a.docid = di.doctorid WHERE a.out_trade_no = ? ORDER BY a.create_date DESC 
2019-07-11 09:15:40.522 DEBUG 13240 [nio-8980-exec-9] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - ==> Parameters: 201907119153400001(String)
2019-07-11 09:15:40.547 DEBUG 13240 [nio-8980-exec-9] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - <==      Total: 0
2019-07-11 09:15:40.548 DEBUG 13240 [nio-8980-exec-9] [c.j.c.m.m.provider.SelectSqlProvider   ] - 1毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.total_price AS "totalPrice", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag" FROM sys_member_order a WHERE a.out_trade_no = #{sqlMap.where#out_trade_no#EQ1} ORDER BY a.update_date DESC
2019-07-11 09:15:40.548 DEBUG 13240 [nio-8980-exec-9] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@682482ee] will not be managed by Spring
2019-07-11 09:15:40.548 DEBUG 13240 [nio-8980-exec-9] [c.j.m.app.dao.MemberOrderDao.findList  ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.total_price AS "totalPrice", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag" FROM sys_member_order a WHERE a.out_trade_no = ? ORDER BY a.update_date DESC 
2019-07-11 09:15:40.549 DEBUG 13240 [nio-8980-exec-9] [c.j.m.app.dao.MemberOrderDao.findList  ] - ==> Parameters: 201907119153400001(String)
2019-07-11 09:15:40.572 DEBUG 13240 [nio-8980-exec-9] [c.j.m.app.dao.MemberOrderDao.findList  ] - <==      Total: 0
2019-07-11 09:15:40.572 DEBUG 13240 [nio-8980-exec-9] [c.j.c.m.m.provider.SelectSqlProvider   ] - 0毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.total_price AS "totalPrice", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", a.doctor_user_id AS "doctorUserId" FROM sys_doctor_register_order a WHERE a.out_trade_no = #{sqlMap.where#out_trade_no#EQ1} ORDER BY a.update_date DESC
2019-07-11 09:15:40.573 DEBUG 13240 [nio-8980-exec-9] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@682482ee] will not be managed by Spring
2019-07-11 09:15:40.573 DEBUG 13240 [nio-8980-exec-9] [c.j.m.a.d.D.findList                   ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.total_price AS "totalPrice", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", a.doctor_user_id AS "doctorUserId" FROM sys_doctor_register_order a WHERE a.out_trade_no = ? ORDER BY a.update_date DESC 
2019-07-11 09:15:40.574 DEBUG 13240 [nio-8980-exec-9] [c.j.m.a.d.D.findList                   ] - ==> Parameters: 201907119153400001(String)
2019-07-11 09:15:40.597 DEBUG 13240 [nio-8980-exec-9] [c.j.m.a.d.D.findList                   ] - <==      Total: 0
2019-07-11 09:15:40.598 DEBUG 13240 [nio-8980-exec-9] [c.j.c.m.m.provider.SelectSqlProvider   ] - 1毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag" FROM sys_dashang_order a WHERE a.out_trade_no = #{sqlMap.where#out_trade_no#EQ1} ORDER BY a.update_date DESC
2019-07-11 09:15:40.598 DEBUG 13240 [nio-8980-exec-9] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@682482ee] will not be managed by Spring
2019-07-11 09:15:40.598 DEBUG 13240 [nio-8980-exec-9] [c.j.m.app.dao.DashangOrderDao.findList ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag" FROM sys_dashang_order a WHERE a.out_trade_no = ? ORDER BY a.update_date DESC 
2019-07-11 09:15:40.599 DEBUG 13240 [nio-8980-exec-9] [c.j.m.app.dao.DashangOrderDao.findList ] - ==> Parameters: 201907119153400001(String)
2019-07-11 09:15:40.622 DEBUG 13240 [nio-8980-exec-9] [c.j.m.app.dao.DashangOrderDao.findList ] - <==      Total: 0
2019-07-11 09:15:40.669 DEBUG 13240 [nio-8980-exec-9] [c.j.c.m.m.provider.UpdateSqlProvider   ] - 23毫秒: UPDATE sys_order SET `order_no` = #{orderNo}, `order_status` = #{orderStatus}, `product_count` = #{productCount}, `total_price` = #{totalPrice}, `logistics_price` = #{logisticsPrice}, `discount_price` = #{discountPrice}, `really_price` = #{reallyPrice}, `pay_channel` = #{payChannel}, `out_trade_no` = #{outTradeNo}, `update_by` = #{updateBy}, `pay_date` = #{payDate}, `user_id` = #{userId}, `del_flag` = #{delFlag}, `delivery_name` = #{deliveryName}, `delivery_address` = #{deliveryAddress}, `delivery_phone` = #{deliveryPhone}, `total_count` = #{totalCount} WHERE `id` = #{id}
2019-07-11 09:15:40.670 DEBUG 13240 [nio-8980-exec-9] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@682482ee] will be managed by Spring
2019-07-11 09:15:40.670 DEBUG 13240 [nio-8980-exec-9] [c.j.modules.app.dao.OrderDao.update    ] - ==>  Preparing: UPDATE sys_order SET `order_no` = ?, `order_status` = ?, `product_count` = ?, `total_price` = ?, `logistics_price` = ?, `discount_price` = ?, `really_price` = ?, `pay_channel` = ?, `out_trade_no` = ?, `update_by` = ?, `pay_date` = ?, `user_id` = ?, `del_flag` = ?, `delivery_name` = ?, `delivery_address` = ?, `delivery_phone` = ?, `total_count` = ? WHERE `id` = ? 
2019-07-11 09:15:40.671 DEBUG 13240 [nio-8980-exec-9] [c.j.modules.app.dao.OrderDao.update    ] - ==> Parameters: 071109153403201(String), 1(String), 1(String), 5500(String), 0(String), 0(String), 5500(String), 微信(String), 201907119153400001(String), system(String), 2019-07-11 09:15:40.623(Timestamp), 123(String), 0(String), 范耘诚123(String), 辽宁省铁西区铁西广场23(String), 15004001841(String), 11(String), 308(String)
2019-07-11 09:15:40.723 DEBUG 13240 [nio-8980-exec-9] [c.j.modules.app.dao.OrderDao.update    ] - <==    Updates: 1
2019-07-11 09:15:40.817 DEBUG 13240 [nio-8980-exec-9] [c.j.c.m.m.provider.SelectSqlProvider   ] - 1毫秒: SELECT a.id AS "id", a.user_id AS "userId", a.discount_price AS "discountPrice", a.create_date AS "createDate", a.update_date AS "updateDate", a.create_by AS "createBy", a.update_by AS "updateBy", a.remarks AS "remarks", dd.id AS "discountDetail.id", dd.discount_id AS "discountDetail.discountId", dd.remarks AS "discountDetail.remarks", dd.detail_price AS "discountDetail.detailPrice", dd.detail_state AS "discountDetail.detailState", dd.create_date AS "discountDetail.createDate", dd.update_date AS "discountDetail.updateDate", dd.create_by AS "discountDetail.createBy", dd.update_by AS "discountDetail.updateBy", dd.del_flag AS "discountDetail.delFlag" FROM sys_discount a LEFT JOIN sys_discount_detail dd ON a.id = dd.discount_id WHERE a.user_id = #{sqlMap.where#user_id#EQ1} ORDER BY a.update_date DESC
2019-07-11 09:15:40.818 DEBUG 13240 [nio-8980-exec-9] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@682482ee] will be managed by Spring
2019-07-11 09:15:40.819 DEBUG 13240 [nio-8980-exec-9] [c.j.m.app.dao.DiscountDao.findList     ] - ==>  Preparing: SELECT a.id AS "id", a.user_id AS "userId", a.discount_price AS "discountPrice", a.create_date AS "createDate", a.update_date AS "updateDate", a.create_by AS "createBy", a.update_by AS "updateBy", a.remarks AS "remarks", dd.id AS "discountDetail.id", dd.discount_id AS "discountDetail.discountId", dd.remarks AS "discountDetail.remarks", dd.detail_price AS "discountDetail.detailPrice", dd.detail_state AS "discountDetail.detailState", dd.create_date AS "discountDetail.createDate", dd.update_date AS "discountDetail.updateDate", dd.create_by AS "discountDetail.createBy", dd.update_by AS "discountDetail.updateBy", dd.del_flag AS "discountDetail.delFlag" FROM sys_discount a LEFT JOIN sys_discount_detail dd ON a.id = dd.discount_id WHERE a.user_id = ? ORDER BY a.update_date DESC 
2019-07-11 09:15:40.820 DEBUG 13240 [nio-8980-exec-9] [c.j.m.app.dao.DiscountDao.findList     ] - ==> Parameters: 123(String)
2019-07-11 09:15:40.845 DEBUG 13240 [nio-8980-exec-9] [c.j.m.app.dao.DiscountDao.findList     ] - <==      Total: 1
2019-07-11 09:15:40.847 DEBUG 13240 [nio-8980-exec-9] [c.j.c.m.m.provider.UpdateSqlProvider   ] - 1毫秒: UPDATE sys_discount SET `user_id` = #{userId}, `discount_price` = #{discountPrice}, `update_date` = #{updateDate}, `update_by` = #{updateBy}, `remarks` = #{remarks} WHERE `id` = #{id}
2019-07-11 09:15:40.847 DEBUG 13240 [nio-8980-exec-9] [c.j.modules.app.dao.DiscountDao.update ] - ==>  Preparing: UPDATE sys_discount SET `user_id` = ?, `discount_price` = ?, `update_date` = ?, `update_by` = ?, `remarks` = ? WHERE `id` = ? 
2019-07-11 09:15:40.848 DEBUG 13240 [nio-8980-exec-9] [c.j.modules.app.dao.DiscountDao.update ] - ==> Parameters: 123(String), 0(String), 2019-07-11 09:15:40.847(Timestamp), system(String), 备注(String), 1(String)
2019-07-11 09:15:40.893 DEBUG 13240 [nio-8980-exec-9] [c.j.modules.app.dao.DiscountDao.update ] - <==    Updates: 1
2019-07-11 09:15:55.405 DEBUG 13240 [io-8980-exec-10] [c.j.c.m.m.provider.SelectSqlProvider   ] - 2毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.product_count AS "productCount", a.total_price AS "totalPrice", a.logistics_price AS "logisticsPrice", a.discount_price AS "discountPrice", a.really_price AS "reallyPrice", a.pay_channel AS "payChannel", a.out_trade_no AS "outTradeNo", a.create_date AS "createDate", a.update_date AS "updateDate", a.create_by AS "createBy", a.update_by AS "updateBy", a.pay_date AS "payDate", a.user_id AS "userId", a.address_id AS "addressId", a.logistics_id AS "logisticsId", a.delivery_date AS "deliveryDate", a.del_flag AS "delFlag", a.delivery_name AS "deliveryName", a.delivery_address AS "deliveryAddress", a.delivery_phone AS "deliveryPhone", a.total_count AS "totalCount", a.trade_no AS "tradeNo" FROM sys_order a WHERE a.order_no = #{sqlMap.where#order_no#EQ1} ORDER BY a.update_date DESC
2019-07-11 09:15:55.406 DEBUG 13240 [io-8980-exec-10] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@682482ee] will not be managed by Spring
2019-07-11 09:15:55.406 DEBUG 13240 [io-8980-exec-10] [c.j.modules.app.dao.OrderDao.findList  ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.product_count AS "productCount", a.total_price AS "totalPrice", a.logistics_price AS "logisticsPrice", a.discount_price AS "discountPrice", a.really_price AS "reallyPrice", a.pay_channel AS "payChannel", a.out_trade_no AS "outTradeNo", a.create_date AS "createDate", a.update_date AS "updateDate", a.create_by AS "createBy", a.update_by AS "updateBy", a.pay_date AS "payDate", a.user_id AS "userId", a.address_id AS "addressId", a.logistics_id AS "logisticsId", a.delivery_date AS "deliveryDate", a.del_flag AS "delFlag", a.delivery_name AS "deliveryName", a.delivery_address AS "deliveryAddress", a.delivery_phone AS "deliveryPhone", a.total_count AS "totalCount", a.trade_no AS "tradeNo" FROM sys_order a WHERE a.order_no = ? ORDER BY a.update_date DESC 
2019-07-11 09:15:55.406 DEBUG 13240 [io-8980-exec-10] [c.j.modules.app.dao.OrderDao.findList  ] - ==> Parameters: 071109155481701(String)
2019-07-11 09:15:55.431 DEBUG 13240 [io-8980-exec-10] [c.j.modules.app.dao.OrderDao.findList  ] - <==      Total: 1
2019-07-11 09:15:55.433 DEBUG 13240 [io-8980-exec-10] [c.j.c.m.m.provider.SelectSqlProvider   ] - 1毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", dd.id AS "userInfo.id", dd.mobile AS "userInfo.mobile", dd.password AS "userInfo.password", dd.icon AS "userInfo.icon", dd.regtime AS "userInfo.regtime", dd.lastlogin AS "userInfo.lastlogin", dd.islock AS "userInfo.islock", dd.isauthentication AS "userInfo.isauthentication", dd.type AS "userInfo.type", dd.create_by AS "userInfo.createBy", dd.create_date AS "userInfo.createDate", dd.update_by AS "userInfo.updateBy", dd.update_date AS "userInfo.updateDate", dd.remarks AS "userInfo.remarks", dd.del_flag AS "userInfo.delFlag", dd.nike_name AS "userInfo.nikeName", dd.is_invite AS "userInfo.isInvite", dd.third_id AS "userInfo.thirdId", dd.third_type AS "userInfo.thirdType", dd.third_icon AS "userInfo.thirdIcon", dd.member_lv AS "userInfo.memberLv", dd.member_flag AS "userInfo.memberFlag", dd.member_start AS "userInfo.memberStart", dd.member_end AS "userInfo.memberEnd", dd.invite_user_id AS "userInfo.inviteUserId", di.id AS "doctorInfos.id", di.doctorid AS "doctorInfos.doctorid", di.doctornum AS "doctorInfos.doctornum", di.name AS "doctorInfos.name", di.sex AS "doctorInfos.sex", di.age AS "doctorInfos.age", di.telephone AS "doctorInfos.telephone", di.idcard AS "doctorInfos.idcard", di.adress AS "doctorInfos.adress", di.technical AS "doctorInfos.technical", di.classify AS "doctorInfos.classify", di.introduce AS "doctorInfos.introduce", di.create_by AS "doctorInfos.createBy", di.cost AS "doctorInfos.cost", di.create_date AS "doctorInfos.createDate", di.update_by AS "doctorInfos.updateBy", di.update_date AS "doctorInfos.updateDate", di.remarks AS "doctorInfos.remarks", di.del_flag AS "doctorInfos.delFlag", di.cityid AS "doctorInfos.cityid", di.come_flag AS "doctorInfos.comeFlag", di.come_cost AS "doctorInfos.comeCost", di.own_flag AS "doctorInfos.ownFlag", di.first_count AS "doctorInfos.firstCount", di.star_lv AS "doctorInfos.starLv" FROM sys_tiaoli_order a LEFT JOIN sys_user_info dd ON a.userid = dd.id LEFT JOIN sys_doctor_info di ON a.docid = di.doctorid WHERE a.order_no = #{sqlMap.where#order_no#EQ1} ORDER BY a.create_date DESC
2019-07-11 09:15:55.433 DEBUG 13240 [io-8980-exec-10] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@682482ee] will not be managed by Spring
2019-07-11 09:15:55.434 DEBUG 13240 [io-8980-exec-10] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", dd.id AS "userInfo.id", dd.mobile AS "userInfo.mobile", dd.password AS "userInfo.password", dd.icon AS "userInfo.icon", dd.regtime AS "userInfo.regtime", dd.lastlogin AS "userInfo.lastlogin", dd.islock AS "userInfo.islock", dd.isauthentication AS "userInfo.isauthentication", dd.type AS "userInfo.type", dd.create_by AS "userInfo.createBy", dd.create_date AS "userInfo.createDate", dd.update_by AS "userInfo.updateBy", dd.update_date AS "userInfo.updateDate", dd.remarks AS "userInfo.remarks", dd.del_flag AS "userInfo.delFlag", dd.nike_name AS "userInfo.nikeName", dd.is_invite AS "userInfo.isInvite", dd.third_id AS "userInfo.thirdId", dd.third_type AS "userInfo.thirdType", dd.third_icon AS "userInfo.thirdIcon", dd.member_lv AS "userInfo.memberLv", dd.member_flag AS "userInfo.memberFlag", dd.member_start AS "userInfo.memberStart", dd.member_end AS "userInfo.memberEnd", dd.invite_user_id AS "userInfo.inviteUserId", di.id AS "doctorInfos.id", di.doctorid AS "doctorInfos.doctorid", di.doctornum AS "doctorInfos.doctornum", di.name AS "doctorInfos.name", di.sex AS "doctorInfos.sex", di.age AS "doctorInfos.age", di.telephone AS "doctorInfos.telephone", di.idcard AS "doctorInfos.idcard", di.adress AS "doctorInfos.adress", di.technical AS "doctorInfos.technical", di.classify AS "doctorInfos.classify", di.introduce AS "doctorInfos.introduce", di.create_by AS "doctorInfos.createBy", di.cost AS "doctorInfos.cost", di.create_date AS "doctorInfos.createDate", di.update_by AS "doctorInfos.updateBy", di.update_date AS "doctorInfos.updateDate", di.remarks AS "doctorInfos.remarks", di.del_flag AS "doctorInfos.delFlag", di.cityid AS "doctorInfos.cityid", di.come_flag AS "doctorInfos.comeFlag", di.come_cost AS "doctorInfos.comeCost", di.own_flag AS "doctorInfos.ownFlag", di.first_count AS "doctorInfos.firstCount", di.star_lv AS "doctorInfos.starLv" FROM sys_tiaoli_order a LEFT JOIN sys_user_info dd ON a.userid = dd.id LEFT JOIN sys_doctor_info di ON a.docid = di.doctorid WHERE a.order_no = ? ORDER BY a.create_date DESC 
2019-07-11 09:15:55.434 DEBUG 13240 [io-8980-exec-10] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - ==> Parameters: 071109155481701(String)
2019-07-11 09:15:55.460 DEBUG 13240 [io-8980-exec-10] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - <==      Total: 0
2019-07-11 09:15:55.462 DEBUG 13240 [io-8980-exec-10] [c.j.c.m.m.provider.SelectSqlProvider   ] - 1毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", dd.id AS "userInfo.id", dd.mobile AS "userInfo.mobile", dd.password AS "userInfo.password", dd.icon AS "userInfo.icon", dd.regtime AS "userInfo.regtime", dd.lastlogin AS "userInfo.lastlogin", dd.islock AS "userInfo.islock", dd.isauthentication AS "userInfo.isauthentication", dd.type AS "userInfo.type", dd.create_by AS "userInfo.createBy", dd.create_date AS "userInfo.createDate", dd.update_by AS "userInfo.updateBy", dd.update_date AS "userInfo.updateDate", dd.remarks AS "userInfo.remarks", dd.del_flag AS "userInfo.delFlag", dd.nike_name AS "userInfo.nikeName", dd.is_invite AS "userInfo.isInvite", dd.third_id AS "userInfo.thirdId", dd.third_type AS "userInfo.thirdType", dd.third_icon AS "userInfo.thirdIcon", dd.member_lv AS "userInfo.memberLv", dd.member_flag AS "userInfo.memberFlag", dd.member_start AS "userInfo.memberStart", dd.member_end AS "userInfo.memberEnd", dd.invite_user_id AS "userInfo.inviteUserId", di.id AS "doctorInfos.id", di.doctorid AS "doctorInfos.doctorid", di.doctornum AS "doctorInfos.doctornum", di.name AS "doctorInfos.name", di.sex AS "doctorInfos.sex", di.age AS "doctorInfos.age", di.telephone AS "doctorInfos.telephone", di.idcard AS "doctorInfos.idcard", di.adress AS "doctorInfos.adress", di.technical AS "doctorInfos.technical", di.classify AS "doctorInfos.classify", di.introduce AS "doctorInfos.introduce", di.create_by AS "doctorInfos.createBy", di.cost AS "doctorInfos.cost", di.create_date AS "doctorInfos.createDate", di.update_by AS "doctorInfos.updateBy", di.update_date AS "doctorInfos.updateDate", di.remarks AS "doctorInfos.remarks", di.del_flag AS "doctorInfos.delFlag", di.cityid AS "doctorInfos.cityid", di.come_flag AS "doctorInfos.comeFlag", di.come_cost AS "doctorInfos.comeCost", di.own_flag AS "doctorInfos.ownFlag", di.first_count AS "doctorInfos.firstCount", di.star_lv AS "doctorInfos.starLv" FROM sys_tiaoli_order a LEFT JOIN sys_user_info dd ON a.userid = dd.id LEFT JOIN sys_doctor_info di ON a.docid = di.doctorid WHERE a.order_no = #{sqlMap.where#order_no#EQ1} ORDER BY a.create_date DESC
2019-07-11 09:15:55.462 DEBUG 13240 [io-8980-exec-10] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@682482ee] will not be managed by Spring
2019-07-11 09:15:55.463 DEBUG 13240 [io-8980-exec-10] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", dd.id AS "userInfo.id", dd.mobile AS "userInfo.mobile", dd.password AS "userInfo.password", dd.icon AS "userInfo.icon", dd.regtime AS "userInfo.regtime", dd.lastlogin AS "userInfo.lastlogin", dd.islock AS "userInfo.islock", dd.isauthentication AS "userInfo.isauthentication", dd.type AS "userInfo.type", dd.create_by AS "userInfo.createBy", dd.create_date AS "userInfo.createDate", dd.update_by AS "userInfo.updateBy", dd.update_date AS "userInfo.updateDate", dd.remarks AS "userInfo.remarks", dd.del_flag AS "userInfo.delFlag", dd.nike_name AS "userInfo.nikeName", dd.is_invite AS "userInfo.isInvite", dd.third_id AS "userInfo.thirdId", dd.third_type AS "userInfo.thirdType", dd.third_icon AS "userInfo.thirdIcon", dd.member_lv AS "userInfo.memberLv", dd.member_flag AS "userInfo.memberFlag", dd.member_start AS "userInfo.memberStart", dd.member_end AS "userInfo.memberEnd", dd.invite_user_id AS "userInfo.inviteUserId", di.id AS "doctorInfos.id", di.doctorid AS "doctorInfos.doctorid", di.doctornum AS "doctorInfos.doctornum", di.name AS "doctorInfos.name", di.sex AS "doctorInfos.sex", di.age AS "doctorInfos.age", di.telephone AS "doctorInfos.telephone", di.idcard AS "doctorInfos.idcard", di.adress AS "doctorInfos.adress", di.technical AS "doctorInfos.technical", di.classify AS "doctorInfos.classify", di.introduce AS "doctorInfos.introduce", di.create_by AS "doctorInfos.createBy", di.cost AS "doctorInfos.cost", di.create_date AS "doctorInfos.createDate", di.update_by AS "doctorInfos.updateBy", di.update_date AS "doctorInfos.updateDate", di.remarks AS "doctorInfos.remarks", di.del_flag AS "doctorInfos.delFlag", di.cityid AS "doctorInfos.cityid", di.come_flag AS "doctorInfos.comeFlag", di.come_cost AS "doctorInfos.comeCost", di.own_flag AS "doctorInfos.ownFlag", di.first_count AS "doctorInfos.firstCount", di.star_lv AS "doctorInfos.starLv" FROM sys_tiaoli_order a LEFT JOIN sys_user_info dd ON a.userid = dd.id LEFT JOIN sys_doctor_info di ON a.docid = di.doctorid WHERE a.order_no = ? ORDER BY a.create_date DESC 
2019-07-11 09:15:55.463 DEBUG 13240 [io-8980-exec-10] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - ==> Parameters: 071109155481701(String)
2019-07-11 09:15:55.489 DEBUG 13240 [io-8980-exec-10] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - <==      Total: 0
2019-07-11 09:15:55.490 DEBUG 13240 [io-8980-exec-10] [c.j.c.m.m.provider.SelectSqlProvider   ] - 1毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.total_price AS "totalPrice", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag" FROM sys_member_order a WHERE a.order_no = #{sqlMap.where#order_no#EQ1} ORDER BY a.update_date DESC
2019-07-11 09:15:55.490 DEBUG 13240 [io-8980-exec-10] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@682482ee] will not be managed by Spring
2019-07-11 09:15:55.490 DEBUG 13240 [io-8980-exec-10] [c.j.m.app.dao.MemberOrderDao.findList  ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.total_price AS "totalPrice", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag" FROM sys_member_order a WHERE a.order_no = ? ORDER BY a.update_date DESC 
2019-07-11 09:15:55.491 DEBUG 13240 [io-8980-exec-10] [c.j.m.app.dao.MemberOrderDao.findList  ] - ==> Parameters: 071109155481701(String)
2019-07-11 09:15:55.514 DEBUG 13240 [io-8980-exec-10] [c.j.m.app.dao.MemberOrderDao.findList  ] - <==      Total: 0
2019-07-11 09:15:55.514 DEBUG 13240 [io-8980-exec-10] [c.j.c.m.m.provider.SelectSqlProvider   ] - 0毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.total_price AS "totalPrice", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", a.doctor_user_id AS "doctorUserId" FROM sys_doctor_register_order a WHERE a.order_no = #{sqlMap.where#order_no#EQ1} ORDER BY a.update_date DESC
2019-07-11 09:15:55.515 DEBUG 13240 [io-8980-exec-10] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@682482ee] will not be managed by Spring
2019-07-11 09:15:55.515 DEBUG 13240 [io-8980-exec-10] [c.j.m.a.d.D.findList                   ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.total_price AS "totalPrice", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", a.doctor_user_id AS "doctorUserId" FROM sys_doctor_register_order a WHERE a.order_no = ? ORDER BY a.update_date DESC 
2019-07-11 09:15:55.515 DEBUG 13240 [io-8980-exec-10] [c.j.m.a.d.D.findList                   ] - ==> Parameters: 071109155481701(String)
2019-07-11 09:15:55.539 DEBUG 13240 [io-8980-exec-10] [c.j.m.a.d.D.findList                   ] - <==      Total: 0
2019-07-11 09:15:55.540 DEBUG 13240 [io-8980-exec-10] [c.j.c.m.m.provider.SelectSqlProvider   ] - 1毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag" FROM sys_dashang_order a WHERE a.order_no = #{sqlMap.where#order_no#EQ1} ORDER BY a.update_date DESC
2019-07-11 09:15:55.540 DEBUG 13240 [io-8980-exec-10] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@682482ee] will not be managed by Spring
2019-07-11 09:15:55.540 DEBUG 13240 [io-8980-exec-10] [c.j.m.app.dao.DashangOrderDao.findList ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag" FROM sys_dashang_order a WHERE a.order_no = ? ORDER BY a.update_date DESC 
2019-07-11 09:15:55.541 DEBUG 13240 [io-8980-exec-10] [c.j.m.app.dao.DashangOrderDao.findList ] - ==> Parameters: 071109155481701(String)
2019-07-11 09:15:55.564 DEBUG 13240 [io-8980-exec-10] [c.j.m.app.dao.DashangOrderDao.findList ] - <==      Total: 0
2019-07-11 09:15:55.610 DEBUG 13240 [io-8980-exec-10] [c.j.c.m.m.provider.UpdateSqlProvider   ] - 23毫秒: UPDATE sys_order SET `order_no` = #{orderNo}, `order_status` = #{orderStatus}, `product_count` = #{productCount}, `total_price` = #{totalPrice}, `logistics_price` = #{logisticsPrice}, `discount_price` = #{discountPrice}, `really_price` = #{reallyPrice}, `pay_channel` = #{payChannel}, `out_trade_no` = #{outTradeNo}, `update_by` = #{updateBy}, `user_id` = #{userId}, `del_flag` = #{delFlag}, `delivery_name` = #{deliveryName}, `delivery_address` = #{deliveryAddress}, `delivery_phone` = #{deliveryPhone}, `total_count` = #{totalCount} WHERE `id` = #{id}
2019-07-11 09:15:55.610 DEBUG 13240 [io-8980-exec-10] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@682482ee] will be managed by Spring
2019-07-11 09:15:55.610 DEBUG 13240 [io-8980-exec-10] [c.j.modules.app.dao.OrderDao.update    ] - ==>  Preparing: UPDATE sys_order SET `order_no` = ?, `order_status` = ?, `product_count` = ?, `total_price` = ?, `logistics_price` = ?, `discount_price` = ?, `really_price` = ?, `pay_channel` = ?, `out_trade_no` = ?, `update_by` = ?, `user_id` = ?, `del_flag` = ?, `delivery_name` = ?, `delivery_address` = ?, `delivery_phone` = ?, `total_count` = ? WHERE `id` = ? 
2019-07-11 09:15:55.611 DEBUG 13240 [io-8980-exec-10] [c.j.modules.app.dao.OrderDao.update    ] - ==> Parameters: 071109155481701(String), 0(String), 1(String), 500(String), 0(String), 0(String), 500(String), null(String), 201907119155400002(String), system(String), 123(String), 0(String), 范耘诚123(String), 辽宁省铁西区铁西广场23(String), 15004001841(String), 1(String), 309(String)
2019-07-11 09:15:55.655 DEBUG 13240 [io-8980-exec-10] [c.j.modules.app.dao.OrderDao.update    ] - <==    Updates: 1
2019-07-11 09:16:01.762 DEBUG 13240 [nio-8980-exec-7] [c.j.c.m.m.provider.SelectSqlProvider   ] - 2毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.product_count AS "productCount", a.total_price AS "totalPrice", a.logistics_price AS "logisticsPrice", a.discount_price AS "discountPrice", a.really_price AS "reallyPrice", a.pay_channel AS "payChannel", a.out_trade_no AS "outTradeNo", a.create_date AS "createDate", a.update_date AS "updateDate", a.create_by AS "createBy", a.update_by AS "updateBy", a.pay_date AS "payDate", a.user_id AS "userId", a.address_id AS "addressId", a.logistics_id AS "logisticsId", a.delivery_date AS "deliveryDate", a.del_flag AS "delFlag", a.delivery_name AS "deliveryName", a.delivery_address AS "deliveryAddress", a.delivery_phone AS "deliveryPhone", a.total_count AS "totalCount", a.trade_no AS "tradeNo" FROM sys_order a WHERE a.out_trade_no = #{sqlMap.where#out_trade_no#EQ1} ORDER BY a.update_date DESC
2019-07-11 09:16:01.762 DEBUG 13240 [nio-8980-exec-7] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@682482ee] will not be managed by Spring
2019-07-11 09:16:01.762 DEBUG 13240 [nio-8980-exec-7] [c.j.modules.app.dao.OrderDao.findList  ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.product_count AS "productCount", a.total_price AS "totalPrice", a.logistics_price AS "logisticsPrice", a.discount_price AS "discountPrice", a.really_price AS "reallyPrice", a.pay_channel AS "payChannel", a.out_trade_no AS "outTradeNo", a.create_date AS "createDate", a.update_date AS "updateDate", a.create_by AS "createBy", a.update_by AS "updateBy", a.pay_date AS "payDate", a.user_id AS "userId", a.address_id AS "addressId", a.logistics_id AS "logisticsId", a.delivery_date AS "deliveryDate", a.del_flag AS "delFlag", a.delivery_name AS "deliveryName", a.delivery_address AS "deliveryAddress", a.delivery_phone AS "deliveryPhone", a.total_count AS "totalCount", a.trade_no AS "tradeNo" FROM sys_order a WHERE a.out_trade_no = ? ORDER BY a.update_date DESC 
2019-07-11 09:16:01.763 DEBUG 13240 [nio-8980-exec-7] [c.j.modules.app.dao.OrderDao.findList  ] - ==> Parameters: 201907119155400002(String)
2019-07-11 09:16:01.787 DEBUG 13240 [nio-8980-exec-7] [c.j.modules.app.dao.OrderDao.findList  ] - <==      Total: 1
2019-07-11 09:16:01.788 DEBUG 13240 [nio-8980-exec-7] [c.j.c.m.m.provider.SelectSqlProvider   ] - 1毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", dd.id AS "userInfo.id", dd.mobile AS "userInfo.mobile", dd.password AS "userInfo.password", dd.icon AS "userInfo.icon", dd.regtime AS "userInfo.regtime", dd.lastlogin AS "userInfo.lastlogin", dd.islock AS "userInfo.islock", dd.isauthentication AS "userInfo.isauthentication", dd.type AS "userInfo.type", dd.create_by AS "userInfo.createBy", dd.create_date AS "userInfo.createDate", dd.update_by AS "userInfo.updateBy", dd.update_date AS "userInfo.updateDate", dd.remarks AS "userInfo.remarks", dd.del_flag AS "userInfo.delFlag", dd.nike_name AS "userInfo.nikeName", dd.is_invite AS "userInfo.isInvite", dd.third_id AS "userInfo.thirdId", dd.third_type AS "userInfo.thirdType", dd.third_icon AS "userInfo.thirdIcon", dd.member_lv AS "userInfo.memberLv", dd.member_flag AS "userInfo.memberFlag", dd.member_start AS "userInfo.memberStart", dd.member_end AS "userInfo.memberEnd", dd.invite_user_id AS "userInfo.inviteUserId", di.id AS "doctorInfos.id", di.doctorid AS "doctorInfos.doctorid", di.doctornum AS "doctorInfos.doctornum", di.name AS "doctorInfos.name", di.sex AS "doctorInfos.sex", di.age AS "doctorInfos.age", di.telephone AS "doctorInfos.telephone", di.idcard AS "doctorInfos.idcard", di.adress AS "doctorInfos.adress", di.technical AS "doctorInfos.technical", di.classify AS "doctorInfos.classify", di.introduce AS "doctorInfos.introduce", di.create_by AS "doctorInfos.createBy", di.cost AS "doctorInfos.cost", di.create_date AS "doctorInfos.createDate", di.update_by AS "doctorInfos.updateBy", di.update_date AS "doctorInfos.updateDate", di.remarks AS "doctorInfos.remarks", di.del_flag AS "doctorInfos.delFlag", di.cityid AS "doctorInfos.cityid", di.come_flag AS "doctorInfos.comeFlag", di.come_cost AS "doctorInfos.comeCost", di.own_flag AS "doctorInfos.ownFlag", di.first_count AS "doctorInfos.firstCount", di.star_lv AS "doctorInfos.starLv" FROM sys_tiaoli_order a LEFT JOIN sys_user_info dd ON a.userid = dd.id LEFT JOIN sys_doctor_info di ON a.docid = di.doctorid WHERE a.out_trade_no = #{sqlMap.where#out_trade_no#EQ1} ORDER BY a.create_date DESC
2019-07-11 09:16:01.788 DEBUG 13240 [nio-8980-exec-7] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@682482ee] will not be managed by Spring
2019-07-11 09:16:01.789 DEBUG 13240 [nio-8980-exec-7] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", dd.id AS "userInfo.id", dd.mobile AS "userInfo.mobile", dd.password AS "userInfo.password", dd.icon AS "userInfo.icon", dd.regtime AS "userInfo.regtime", dd.lastlogin AS "userInfo.lastlogin", dd.islock AS "userInfo.islock", dd.isauthentication AS "userInfo.isauthentication", dd.type AS "userInfo.type", dd.create_by AS "userInfo.createBy", dd.create_date AS "userInfo.createDate", dd.update_by AS "userInfo.updateBy", dd.update_date AS "userInfo.updateDate", dd.remarks AS "userInfo.remarks", dd.del_flag AS "userInfo.delFlag", dd.nike_name AS "userInfo.nikeName", dd.is_invite AS "userInfo.isInvite", dd.third_id AS "userInfo.thirdId", dd.third_type AS "userInfo.thirdType", dd.third_icon AS "userInfo.thirdIcon", dd.member_lv AS "userInfo.memberLv", dd.member_flag AS "userInfo.memberFlag", dd.member_start AS "userInfo.memberStart", dd.member_end AS "userInfo.memberEnd", dd.invite_user_id AS "userInfo.inviteUserId", di.id AS "doctorInfos.id", di.doctorid AS "doctorInfos.doctorid", di.doctornum AS "doctorInfos.doctornum", di.name AS "doctorInfos.name", di.sex AS "doctorInfos.sex", di.age AS "doctorInfos.age", di.telephone AS "doctorInfos.telephone", di.idcard AS "doctorInfos.idcard", di.adress AS "doctorInfos.adress", di.technical AS "doctorInfos.technical", di.classify AS "doctorInfos.classify", di.introduce AS "doctorInfos.introduce", di.create_by AS "doctorInfos.createBy", di.cost AS "doctorInfos.cost", di.create_date AS "doctorInfos.createDate", di.update_by AS "doctorInfos.updateBy", di.update_date AS "doctorInfos.updateDate", di.remarks AS "doctorInfos.remarks", di.del_flag AS "doctorInfos.delFlag", di.cityid AS "doctorInfos.cityid", di.come_flag AS "doctorInfos.comeFlag", di.come_cost AS "doctorInfos.comeCost", di.own_flag AS "doctorInfos.ownFlag", di.first_count AS "doctorInfos.firstCount", di.star_lv AS "doctorInfos.starLv" FROM sys_tiaoli_order a LEFT JOIN sys_user_info dd ON a.userid = dd.id LEFT JOIN sys_doctor_info di ON a.docid = di.doctorid WHERE a.out_trade_no = ? ORDER BY a.create_date DESC 
2019-07-11 09:16:01.789 DEBUG 13240 [nio-8980-exec-7] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - ==> Parameters: 201907119155400002(String)
2019-07-11 09:16:01.815 DEBUG 13240 [nio-8980-exec-7] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - <==      Total: 0
2019-07-11 09:16:01.816 DEBUG 13240 [nio-8980-exec-7] [c.j.c.m.m.provider.SelectSqlProvider   ] - 1毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", dd.id AS "userInfo.id", dd.mobile AS "userInfo.mobile", dd.password AS "userInfo.password", dd.icon AS "userInfo.icon", dd.regtime AS "userInfo.regtime", dd.lastlogin AS "userInfo.lastlogin", dd.islock AS "userInfo.islock", dd.isauthentication AS "userInfo.isauthentication", dd.type AS "userInfo.type", dd.create_by AS "userInfo.createBy", dd.create_date AS "userInfo.createDate", dd.update_by AS "userInfo.updateBy", dd.update_date AS "userInfo.updateDate", dd.remarks AS "userInfo.remarks", dd.del_flag AS "userInfo.delFlag", dd.nike_name AS "userInfo.nikeName", dd.is_invite AS "userInfo.isInvite", dd.third_id AS "userInfo.thirdId", dd.third_type AS "userInfo.thirdType", dd.third_icon AS "userInfo.thirdIcon", dd.member_lv AS "userInfo.memberLv", dd.member_flag AS "userInfo.memberFlag", dd.member_start AS "userInfo.memberStart", dd.member_end AS "userInfo.memberEnd", dd.invite_user_id AS "userInfo.inviteUserId", di.id AS "doctorInfos.id", di.doctorid AS "doctorInfos.doctorid", di.doctornum AS "doctorInfos.doctornum", di.name AS "doctorInfos.name", di.sex AS "doctorInfos.sex", di.age AS "doctorInfos.age", di.telephone AS "doctorInfos.telephone", di.idcard AS "doctorInfos.idcard", di.adress AS "doctorInfos.adress", di.technical AS "doctorInfos.technical", di.classify AS "doctorInfos.classify", di.introduce AS "doctorInfos.introduce", di.create_by AS "doctorInfos.createBy", di.cost AS "doctorInfos.cost", di.create_date AS "doctorInfos.createDate", di.update_by AS "doctorInfos.updateBy", di.update_date AS "doctorInfos.updateDate", di.remarks AS "doctorInfos.remarks", di.del_flag AS "doctorInfos.delFlag", di.cityid AS "doctorInfos.cityid", di.come_flag AS "doctorInfos.comeFlag", di.come_cost AS "doctorInfos.comeCost", di.own_flag AS "doctorInfos.ownFlag", di.first_count AS "doctorInfos.firstCount", di.star_lv AS "doctorInfos.starLv" FROM sys_tiaoli_order a LEFT JOIN sys_user_info dd ON a.userid = dd.id LEFT JOIN sys_doctor_info di ON a.docid = di.doctorid WHERE a.out_trade_no = #{sqlMap.where#out_trade_no#EQ1} ORDER BY a.create_date DESC
2019-07-11 09:16:01.816 DEBUG 13240 [nio-8980-exec-7] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@682482ee] will not be managed by Spring
2019-07-11 09:16:01.817 DEBUG 13240 [nio-8980-exec-7] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", dd.id AS "userInfo.id", dd.mobile AS "userInfo.mobile", dd.password AS "userInfo.password", dd.icon AS "userInfo.icon", dd.regtime AS "userInfo.regtime", dd.lastlogin AS "userInfo.lastlogin", dd.islock AS "userInfo.islock", dd.isauthentication AS "userInfo.isauthentication", dd.type AS "userInfo.type", dd.create_by AS "userInfo.createBy", dd.create_date AS "userInfo.createDate", dd.update_by AS "userInfo.updateBy", dd.update_date AS "userInfo.updateDate", dd.remarks AS "userInfo.remarks", dd.del_flag AS "userInfo.delFlag", dd.nike_name AS "userInfo.nikeName", dd.is_invite AS "userInfo.isInvite", dd.third_id AS "userInfo.thirdId", dd.third_type AS "userInfo.thirdType", dd.third_icon AS "userInfo.thirdIcon", dd.member_lv AS "userInfo.memberLv", dd.member_flag AS "userInfo.memberFlag", dd.member_start AS "userInfo.memberStart", dd.member_end AS "userInfo.memberEnd", dd.invite_user_id AS "userInfo.inviteUserId", di.id AS "doctorInfos.id", di.doctorid AS "doctorInfos.doctorid", di.doctornum AS "doctorInfos.doctornum", di.name AS "doctorInfos.name", di.sex AS "doctorInfos.sex", di.age AS "doctorInfos.age", di.telephone AS "doctorInfos.telephone", di.idcard AS "doctorInfos.idcard", di.adress AS "doctorInfos.adress", di.technical AS "doctorInfos.technical", di.classify AS "doctorInfos.classify", di.introduce AS "doctorInfos.introduce", di.create_by AS "doctorInfos.createBy", di.cost AS "doctorInfos.cost", di.create_date AS "doctorInfos.createDate", di.update_by AS "doctorInfos.updateBy", di.update_date AS "doctorInfos.updateDate", di.remarks AS "doctorInfos.remarks", di.del_flag AS "doctorInfos.delFlag", di.cityid AS "doctorInfos.cityid", di.come_flag AS "doctorInfos.comeFlag", di.come_cost AS "doctorInfos.comeCost", di.own_flag AS "doctorInfos.ownFlag", di.first_count AS "doctorInfos.firstCount", di.star_lv AS "doctorInfos.starLv" FROM sys_tiaoli_order a LEFT JOIN sys_user_info dd ON a.userid = dd.id LEFT JOIN sys_doctor_info di ON a.docid = di.doctorid WHERE a.out_trade_no = ? ORDER BY a.create_date DESC 
2019-07-11 09:16:01.817 DEBUG 13240 [nio-8980-exec-7] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - ==> Parameters: 201907119155400002(String)
2019-07-11 09:16:01.842 DEBUG 13240 [nio-8980-exec-7] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - <==      Total: 0
2019-07-11 09:16:01.843 DEBUG 13240 [nio-8980-exec-7] [c.j.c.m.m.provider.SelectSqlProvider   ] - 0毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.total_price AS "totalPrice", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag" FROM sys_member_order a WHERE a.out_trade_no = #{sqlMap.where#out_trade_no#EQ1} ORDER BY a.update_date DESC
2019-07-11 09:16:01.843 DEBUG 13240 [nio-8980-exec-7] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@682482ee] will not be managed by Spring
2019-07-11 09:16:01.844 DEBUG 13240 [nio-8980-exec-7] [c.j.m.app.dao.MemberOrderDao.findList  ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.total_price AS "totalPrice", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag" FROM sys_member_order a WHERE a.out_trade_no = ? ORDER BY a.update_date DESC 
2019-07-11 09:16:01.844 DEBUG 13240 [nio-8980-exec-7] [c.j.m.app.dao.MemberOrderDao.findList  ] - ==> Parameters: 201907119155400002(String)
2019-07-11 09:16:01.867 DEBUG 13240 [nio-8980-exec-7] [c.j.m.app.dao.MemberOrderDao.findList  ] - <==      Total: 0
2019-07-11 09:16:01.867 DEBUG 13240 [nio-8980-exec-7] [c.j.c.m.m.provider.SelectSqlProvider   ] - 0毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.total_price AS "totalPrice", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", a.doctor_user_id AS "doctorUserId" FROM sys_doctor_register_order a WHERE a.out_trade_no = #{sqlMap.where#out_trade_no#EQ1} ORDER BY a.update_date DESC
2019-07-11 09:16:01.868 DEBUG 13240 [nio-8980-exec-7] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@682482ee] will not be managed by Spring
2019-07-11 09:16:01.868 DEBUG 13240 [nio-8980-exec-7] [c.j.m.a.d.D.findList                   ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.total_price AS "totalPrice", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", a.doctor_user_id AS "doctorUserId" FROM sys_doctor_register_order a WHERE a.out_trade_no = ? ORDER BY a.update_date DESC 
2019-07-11 09:16:01.868 DEBUG 13240 [nio-8980-exec-7] [c.j.m.a.d.D.findList                   ] - ==> Parameters: 201907119155400002(String)
2019-07-11 09:16:01.891 DEBUG 13240 [nio-8980-exec-7] [c.j.m.a.d.D.findList                   ] - <==      Total: 0
2019-07-11 09:16:01.892 DEBUG 13240 [nio-8980-exec-7] [c.j.c.m.m.provider.SelectSqlProvider   ] - 0毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag" FROM sys_dashang_order a WHERE a.out_trade_no = #{sqlMap.where#out_trade_no#EQ1} ORDER BY a.update_date DESC
2019-07-11 09:16:01.892 DEBUG 13240 [nio-8980-exec-7] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@682482ee] will not be managed by Spring
2019-07-11 09:16:01.893 DEBUG 13240 [nio-8980-exec-7] [c.j.m.app.dao.DashangOrderDao.findList ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag" FROM sys_dashang_order a WHERE a.out_trade_no = ? ORDER BY a.update_date DESC 
2019-07-11 09:16:01.893 DEBUG 13240 [nio-8980-exec-7] [c.j.m.app.dao.DashangOrderDao.findList ] - ==> Parameters: 201907119155400002(String)
2019-07-11 09:16:01.916 DEBUG 13240 [nio-8980-exec-7] [c.j.m.app.dao.DashangOrderDao.findList ] - <==      Total: 0
2019-07-11 09:16:01.971 DEBUG 13240 [nio-8980-exec-7] [c.j.c.m.m.provider.UpdateSqlProvider   ] - 31毫秒: UPDATE sys_order SET `order_no` = #{orderNo}, `order_status` = #{orderStatus}, `product_count` = #{productCount}, `total_price` = #{totalPrice}, `logistics_price` = #{logisticsPrice}, `discount_price` = #{discountPrice}, `really_price` = #{reallyPrice}, `pay_channel` = #{payChannel}, `out_trade_no` = #{outTradeNo}, `update_by` = #{updateBy}, `pay_date` = #{payDate}, `user_id` = #{userId}, `del_flag` = #{delFlag}, `delivery_name` = #{deliveryName}, `delivery_address` = #{deliveryAddress}, `delivery_phone` = #{deliveryPhone}, `total_count` = #{totalCount} WHERE `id` = #{id}
2019-07-11 09:16:01.971 DEBUG 13240 [nio-8980-exec-7] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@682482ee] will be managed by Spring
2019-07-11 09:16:01.972 DEBUG 13240 [nio-8980-exec-7] [c.j.modules.app.dao.OrderDao.update    ] - ==>  Preparing: UPDATE sys_order SET `order_no` = ?, `order_status` = ?, `product_count` = ?, `total_price` = ?, `logistics_price` = ?, `discount_price` = ?, `really_price` = ?, `pay_channel` = ?, `out_trade_no` = ?, `update_by` = ?, `pay_date` = ?, `user_id` = ?, `del_flag` = ?, `delivery_name` = ?, `delivery_address` = ?, `delivery_phone` = ?, `total_count` = ? WHERE `id` = ? 
2019-07-11 09:16:01.972 DEBUG 13240 [nio-8980-exec-7] [c.j.modules.app.dao.OrderDao.update    ] - ==> Parameters: 071109155481701(String), 1(String), 1(String), 500(String), 0(String), 0(String), 500(String), 微信(String), 201907119155400002(String), system(String), 2019-07-11 09:16:01.917(Timestamp), 123(String), 0(String), 范耘诚123(String), 辽宁省铁西区铁西广场23(String), 15004001841(String), 1(String), 309(String)
2019-07-11 09:16:02.017 DEBUG 13240 [nio-8980-exec-7] [c.j.modules.app.dao.OrderDao.update    ] - <==    Updates: 1
2019-07-11 09:16:02.111 DEBUG 13240 [nio-8980-exec-7] [c.j.c.m.m.provider.SelectSqlProvider   ] - 1毫秒: SELECT a.id AS "id", a.user_id AS "userId", a.discount_price AS "discountPrice", a.create_date AS "createDate", a.update_date AS "updateDate", a.create_by AS "createBy", a.update_by AS "updateBy", a.remarks AS "remarks", dd.id AS "discountDetail.id", dd.discount_id AS "discountDetail.discountId", dd.remarks AS "discountDetail.remarks", dd.detail_price AS "discountDetail.detailPrice", dd.detail_state AS "discountDetail.detailState", dd.create_date AS "discountDetail.createDate", dd.update_date AS "discountDetail.updateDate", dd.create_by AS "discountDetail.createBy", dd.update_by AS "discountDetail.updateBy", dd.del_flag AS "discountDetail.delFlag" FROM sys_discount a LEFT JOIN sys_discount_detail dd ON a.id = dd.discount_id WHERE a.user_id = #{sqlMap.where#user_id#EQ1} ORDER BY a.update_date DESC
2019-07-11 09:16:02.111 DEBUG 13240 [nio-8980-exec-7] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@682482ee] will be managed by Spring
2019-07-11 09:16:02.111 DEBUG 13240 [nio-8980-exec-7] [c.j.m.app.dao.DiscountDao.findList     ] - ==>  Preparing: SELECT a.id AS "id", a.user_id AS "userId", a.discount_price AS "discountPrice", a.create_date AS "createDate", a.update_date AS "updateDate", a.create_by AS "createBy", a.update_by AS "updateBy", a.remarks AS "remarks", dd.id AS "discountDetail.id", dd.discount_id AS "discountDetail.discountId", dd.remarks AS "discountDetail.remarks", dd.detail_price AS "discountDetail.detailPrice", dd.detail_state AS "discountDetail.detailState", dd.create_date AS "discountDetail.createDate", dd.update_date AS "discountDetail.updateDate", dd.create_by AS "discountDetail.createBy", dd.update_by AS "discountDetail.updateBy", dd.del_flag AS "discountDetail.delFlag" FROM sys_discount a LEFT JOIN sys_discount_detail dd ON a.id = dd.discount_id WHERE a.user_id = ? ORDER BY a.update_date DESC 
2019-07-11 09:16:02.112 DEBUG 13240 [nio-8980-exec-7] [c.j.m.app.dao.DiscountDao.findList     ] - ==> Parameters: 123(String)
2019-07-11 09:16:02.136 DEBUG 13240 [nio-8980-exec-7] [c.j.m.app.dao.DiscountDao.findList     ] - <==      Total: 1
2019-07-11 09:16:02.138 DEBUG 13240 [nio-8980-exec-7] [c.j.c.m.m.provider.UpdateSqlProvider   ] - 2毫秒: UPDATE sys_discount SET `user_id` = #{userId}, `discount_price` = #{discountPrice}, `update_date` = #{updateDate}, `update_by` = #{updateBy}, `remarks` = #{remarks} WHERE `id` = #{id}
2019-07-11 09:16:02.139 DEBUG 13240 [nio-8980-exec-7] [c.j.modules.app.dao.DiscountDao.update ] - ==>  Preparing: UPDATE sys_discount SET `user_id` = ?, `discount_price` = ?, `update_date` = ?, `update_by` = ?, `remarks` = ? WHERE `id` = ? 
2019-07-11 09:16:02.140 DEBUG 13240 [nio-8980-exec-7] [c.j.modules.app.dao.DiscountDao.update ] - ==> Parameters: 123(String), 0(String), 2019-07-11 09:16:02.137(Timestamp), system(String), 备注(String), 1(String)
2019-07-11 09:16:02.185 DEBUG 13240 [nio-8980-exec-7] [c.j.modules.app.dao.DiscountDao.update ] - <==    Updates: 1
2019-07-11 09:17:16.204 DEBUG 13240 [nio-8980-exec-4] [c.j.c.m.m.provider.SelectSqlProvider   ] - 2毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.product_count AS "productCount", a.total_price AS "totalPrice", a.logistics_price AS "logisticsPrice", a.discount_price AS "discountPrice", a.really_price AS "reallyPrice", a.pay_channel AS "payChannel", a.out_trade_no AS "outTradeNo", a.create_date AS "createDate", a.update_date AS "updateDate", a.create_by AS "createBy", a.update_by AS "updateBy", a.pay_date AS "payDate", a.user_id AS "userId", a.address_id AS "addressId", a.logistics_id AS "logisticsId", a.delivery_date AS "deliveryDate", a.del_flag AS "delFlag", a.delivery_name AS "deliveryName", a.delivery_address AS "deliveryAddress", a.delivery_phone AS "deliveryPhone", a.total_count AS "totalCount", a.trade_no AS "tradeNo" FROM sys_order a WHERE a.order_no = #{sqlMap.where#order_no#EQ1} ORDER BY a.update_date DESC
2019-07-11 09:17:16.227 DEBUG 13240 [nio-8980-exec-4] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@682482ee] will not be managed by Spring
2019-07-11 09:17:16.228 DEBUG 13240 [nio-8980-exec-4] [c.j.modules.app.dao.OrderDao.findList  ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.product_count AS "productCount", a.total_price AS "totalPrice", a.logistics_price AS "logisticsPrice", a.discount_price AS "discountPrice", a.really_price AS "reallyPrice", a.pay_channel AS "payChannel", a.out_trade_no AS "outTradeNo", a.create_date AS "createDate", a.update_date AS "updateDate", a.create_by AS "createBy", a.update_by AS "updateBy", a.pay_date AS "payDate", a.user_id AS "userId", a.address_id AS "addressId", a.logistics_id AS "logisticsId", a.delivery_date AS "deliveryDate", a.del_flag AS "delFlag", a.delivery_name AS "deliveryName", a.delivery_address AS "deliveryAddress", a.delivery_phone AS "deliveryPhone", a.total_count AS "totalCount", a.trade_no AS "tradeNo" FROM sys_order a WHERE a.order_no = ? ORDER BY a.update_date DESC 
2019-07-11 09:17:16.228 DEBUG 13240 [nio-8980-exec-4] [c.j.modules.app.dao.OrderDao.findList  ] - ==> Parameters: 071109171579801(String)
2019-07-11 09:17:16.253 DEBUG 13240 [nio-8980-exec-4] [c.j.modules.app.dao.OrderDao.findList  ] - <==      Total: 1
2019-07-11 09:17:16.254 DEBUG 13240 [nio-8980-exec-4] [c.j.c.m.m.provider.SelectSqlProvider   ] - 1毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", dd.id AS "userInfo.id", dd.mobile AS "userInfo.mobile", dd.password AS "userInfo.password", dd.icon AS "userInfo.icon", dd.regtime AS "userInfo.regtime", dd.lastlogin AS "userInfo.lastlogin", dd.islock AS "userInfo.islock", dd.isauthentication AS "userInfo.isauthentication", dd.type AS "userInfo.type", dd.create_by AS "userInfo.createBy", dd.create_date AS "userInfo.createDate", dd.update_by AS "userInfo.updateBy", dd.update_date AS "userInfo.updateDate", dd.remarks AS "userInfo.remarks", dd.del_flag AS "userInfo.delFlag", dd.nike_name AS "userInfo.nikeName", dd.is_invite AS "userInfo.isInvite", dd.third_id AS "userInfo.thirdId", dd.third_type AS "userInfo.thirdType", dd.third_icon AS "userInfo.thirdIcon", dd.member_lv AS "userInfo.memberLv", dd.member_flag AS "userInfo.memberFlag", dd.member_start AS "userInfo.memberStart", dd.member_end AS "userInfo.memberEnd", dd.invite_user_id AS "userInfo.inviteUserId", di.id AS "doctorInfos.id", di.doctorid AS "doctorInfos.doctorid", di.doctornum AS "doctorInfos.doctornum", di.name AS "doctorInfos.name", di.sex AS "doctorInfos.sex", di.age AS "doctorInfos.age", di.telephone AS "doctorInfos.telephone", di.idcard AS "doctorInfos.idcard", di.adress AS "doctorInfos.adress", di.technical AS "doctorInfos.technical", di.classify AS "doctorInfos.classify", di.introduce AS "doctorInfos.introduce", di.create_by AS "doctorInfos.createBy", di.cost AS "doctorInfos.cost", di.create_date AS "doctorInfos.createDate", di.update_by AS "doctorInfos.updateBy", di.update_date AS "doctorInfos.updateDate", di.remarks AS "doctorInfos.remarks", di.del_flag AS "doctorInfos.delFlag", di.cityid AS "doctorInfos.cityid", di.come_flag AS "doctorInfos.comeFlag", di.come_cost AS "doctorInfos.comeCost", di.own_flag AS "doctorInfos.ownFlag", di.first_count AS "doctorInfos.firstCount", di.star_lv AS "doctorInfos.starLv" FROM sys_tiaoli_order a LEFT JOIN sys_user_info dd ON a.userid = dd.id LEFT JOIN sys_doctor_info di ON a.docid = di.doctorid WHERE a.order_no = #{sqlMap.where#order_no#EQ1} ORDER BY a.create_date DESC
2019-07-11 09:17:16.254 DEBUG 13240 [nio-8980-exec-4] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@682482ee] will not be managed by Spring
2019-07-11 09:17:16.255 DEBUG 13240 [nio-8980-exec-4] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", dd.id AS "userInfo.id", dd.mobile AS "userInfo.mobile", dd.password AS "userInfo.password", dd.icon AS "userInfo.icon", dd.regtime AS "userInfo.regtime", dd.lastlogin AS "userInfo.lastlogin", dd.islock AS "userInfo.islock", dd.isauthentication AS "userInfo.isauthentication", dd.type AS "userInfo.type", dd.create_by AS "userInfo.createBy", dd.create_date AS "userInfo.createDate", dd.update_by AS "userInfo.updateBy", dd.update_date AS "userInfo.updateDate", dd.remarks AS "userInfo.remarks", dd.del_flag AS "userInfo.delFlag", dd.nike_name AS "userInfo.nikeName", dd.is_invite AS "userInfo.isInvite", dd.third_id AS "userInfo.thirdId", dd.third_type AS "userInfo.thirdType", dd.third_icon AS "userInfo.thirdIcon", dd.member_lv AS "userInfo.memberLv", dd.member_flag AS "userInfo.memberFlag", dd.member_start AS "userInfo.memberStart", dd.member_end AS "userInfo.memberEnd", dd.invite_user_id AS "userInfo.inviteUserId", di.id AS "doctorInfos.id", di.doctorid AS "doctorInfos.doctorid", di.doctornum AS "doctorInfos.doctornum", di.name AS "doctorInfos.name", di.sex AS "doctorInfos.sex", di.age AS "doctorInfos.age", di.telephone AS "doctorInfos.telephone", di.idcard AS "doctorInfos.idcard", di.adress AS "doctorInfos.adress", di.technical AS "doctorInfos.technical", di.classify AS "doctorInfos.classify", di.introduce AS "doctorInfos.introduce", di.create_by AS "doctorInfos.createBy", di.cost AS "doctorInfos.cost", di.create_date AS "doctorInfos.createDate", di.update_by AS "doctorInfos.updateBy", di.update_date AS "doctorInfos.updateDate", di.remarks AS "doctorInfos.remarks", di.del_flag AS "doctorInfos.delFlag", di.cityid AS "doctorInfos.cityid", di.come_flag AS "doctorInfos.comeFlag", di.come_cost AS "doctorInfos.comeCost", di.own_flag AS "doctorInfos.ownFlag", di.first_count AS "doctorInfos.firstCount", di.star_lv AS "doctorInfos.starLv" FROM sys_tiaoli_order a LEFT JOIN sys_user_info dd ON a.userid = dd.id LEFT JOIN sys_doctor_info di ON a.docid = di.doctorid WHERE a.order_no = ? ORDER BY a.create_date DESC 
2019-07-11 09:17:16.255 DEBUG 13240 [nio-8980-exec-4] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - ==> Parameters: 071109171579801(String)
2019-07-11 09:17:16.281 DEBUG 13240 [nio-8980-exec-4] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - <==      Total: 0
2019-07-11 09:17:16.282 DEBUG 13240 [nio-8980-exec-4] [c.j.c.m.m.provider.SelectSqlProvider   ] - 1毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", dd.id AS "userInfo.id", dd.mobile AS "userInfo.mobile", dd.password AS "userInfo.password", dd.icon AS "userInfo.icon", dd.regtime AS "userInfo.regtime", dd.lastlogin AS "userInfo.lastlogin", dd.islock AS "userInfo.islock", dd.isauthentication AS "userInfo.isauthentication", dd.type AS "userInfo.type", dd.create_by AS "userInfo.createBy", dd.create_date AS "userInfo.createDate", dd.update_by AS "userInfo.updateBy", dd.update_date AS "userInfo.updateDate", dd.remarks AS "userInfo.remarks", dd.del_flag AS "userInfo.delFlag", dd.nike_name AS "userInfo.nikeName", dd.is_invite AS "userInfo.isInvite", dd.third_id AS "userInfo.thirdId", dd.third_type AS "userInfo.thirdType", dd.third_icon AS "userInfo.thirdIcon", dd.member_lv AS "userInfo.memberLv", dd.member_flag AS "userInfo.memberFlag", dd.member_start AS "userInfo.memberStart", dd.member_end AS "userInfo.memberEnd", dd.invite_user_id AS "userInfo.inviteUserId", di.id AS "doctorInfos.id", di.doctorid AS "doctorInfos.doctorid", di.doctornum AS "doctorInfos.doctornum", di.name AS "doctorInfos.name", di.sex AS "doctorInfos.sex", di.age AS "doctorInfos.age", di.telephone AS "doctorInfos.telephone", di.idcard AS "doctorInfos.idcard", di.adress AS "doctorInfos.adress", di.technical AS "doctorInfos.technical", di.classify AS "doctorInfos.classify", di.introduce AS "doctorInfos.introduce", di.create_by AS "doctorInfos.createBy", di.cost AS "doctorInfos.cost", di.create_date AS "doctorInfos.createDate", di.update_by AS "doctorInfos.updateBy", di.update_date AS "doctorInfos.updateDate", di.remarks AS "doctorInfos.remarks", di.del_flag AS "doctorInfos.delFlag", di.cityid AS "doctorInfos.cityid", di.come_flag AS "doctorInfos.comeFlag", di.come_cost AS "doctorInfos.comeCost", di.own_flag AS "doctorInfos.ownFlag", di.first_count AS "doctorInfos.firstCount", di.star_lv AS "doctorInfos.starLv" FROM sys_tiaoli_order a LEFT JOIN sys_user_info dd ON a.userid = dd.id LEFT JOIN sys_doctor_info di ON a.docid = di.doctorid WHERE a.order_no = #{sqlMap.where#order_no#EQ1} ORDER BY a.create_date DESC
2019-07-11 09:17:16.282 DEBUG 13240 [nio-8980-exec-4] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@682482ee] will not be managed by Spring
2019-07-11 09:17:16.283 DEBUG 13240 [nio-8980-exec-4] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", dd.id AS "userInfo.id", dd.mobile AS "userInfo.mobile", dd.password AS "userInfo.password", dd.icon AS "userInfo.icon", dd.regtime AS "userInfo.regtime", dd.lastlogin AS "userInfo.lastlogin", dd.islock AS "userInfo.islock", dd.isauthentication AS "userInfo.isauthentication", dd.type AS "userInfo.type", dd.create_by AS "userInfo.createBy", dd.create_date AS "userInfo.createDate", dd.update_by AS "userInfo.updateBy", dd.update_date AS "userInfo.updateDate", dd.remarks AS "userInfo.remarks", dd.del_flag AS "userInfo.delFlag", dd.nike_name AS "userInfo.nikeName", dd.is_invite AS "userInfo.isInvite", dd.third_id AS "userInfo.thirdId", dd.third_type AS "userInfo.thirdType", dd.third_icon AS "userInfo.thirdIcon", dd.member_lv AS "userInfo.memberLv", dd.member_flag AS "userInfo.memberFlag", dd.member_start AS "userInfo.memberStart", dd.member_end AS "userInfo.memberEnd", dd.invite_user_id AS "userInfo.inviteUserId", di.id AS "doctorInfos.id", di.doctorid AS "doctorInfos.doctorid", di.doctornum AS "doctorInfos.doctornum", di.name AS "doctorInfos.name", di.sex AS "doctorInfos.sex", di.age AS "doctorInfos.age", di.telephone AS "doctorInfos.telephone", di.idcard AS "doctorInfos.idcard", di.adress AS "doctorInfos.adress", di.technical AS "doctorInfos.technical", di.classify AS "doctorInfos.classify", di.introduce AS "doctorInfos.introduce", di.create_by AS "doctorInfos.createBy", di.cost AS "doctorInfos.cost", di.create_date AS "doctorInfos.createDate", di.update_by AS "doctorInfos.updateBy", di.update_date AS "doctorInfos.updateDate", di.remarks AS "doctorInfos.remarks", di.del_flag AS "doctorInfos.delFlag", di.cityid AS "doctorInfos.cityid", di.come_flag AS "doctorInfos.comeFlag", di.come_cost AS "doctorInfos.comeCost", di.own_flag AS "doctorInfos.ownFlag", di.first_count AS "doctorInfos.firstCount", di.star_lv AS "doctorInfos.starLv" FROM sys_tiaoli_order a LEFT JOIN sys_user_info dd ON a.userid = dd.id LEFT JOIN sys_doctor_info di ON a.docid = di.doctorid WHERE a.order_no = ? ORDER BY a.create_date DESC 
2019-07-11 09:17:16.283 DEBUG 13240 [nio-8980-exec-4] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - ==> Parameters: 071109171579801(String)
2019-07-11 09:17:16.307 DEBUG 13240 [nio-8980-exec-4] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - <==      Total: 0
2019-07-11 09:17:16.308 DEBUG 13240 [nio-8980-exec-4] [c.j.c.m.m.provider.SelectSqlProvider   ] - 1毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.total_price AS "totalPrice", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag" FROM sys_member_order a WHERE a.order_no = #{sqlMap.where#order_no#EQ1} ORDER BY a.update_date DESC
2019-07-11 09:17:16.308 DEBUG 13240 [nio-8980-exec-4] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@682482ee] will not be managed by Spring
2019-07-11 09:17:16.309 DEBUG 13240 [nio-8980-exec-4] [c.j.m.app.dao.MemberOrderDao.findList  ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.total_price AS "totalPrice", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag" FROM sys_member_order a WHERE a.order_no = ? ORDER BY a.update_date DESC 
2019-07-11 09:17:16.309 DEBUG 13240 [nio-8980-exec-4] [c.j.m.app.dao.MemberOrderDao.findList  ] - ==> Parameters: 071109171579801(String)
2019-07-11 09:17:16.332 DEBUG 13240 [nio-8980-exec-4] [c.j.m.app.dao.MemberOrderDao.findList  ] - <==      Total: 0
2019-07-11 09:17:16.333 DEBUG 13240 [nio-8980-exec-4] [c.j.c.m.m.provider.SelectSqlProvider   ] - 0毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.total_price AS "totalPrice", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", a.doctor_user_id AS "doctorUserId" FROM sys_doctor_register_order a WHERE a.order_no = #{sqlMap.where#order_no#EQ1} ORDER BY a.update_date DESC
2019-07-11 09:17:16.333 DEBUG 13240 [nio-8980-exec-4] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@682482ee] will not be managed by Spring
2019-07-11 09:17:16.334 DEBUG 13240 [nio-8980-exec-4] [c.j.m.a.d.D.findList                   ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.total_price AS "totalPrice", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", a.doctor_user_id AS "doctorUserId" FROM sys_doctor_register_order a WHERE a.order_no = ? ORDER BY a.update_date DESC 
2019-07-11 09:17:16.334 DEBUG 13240 [nio-8980-exec-4] [c.j.m.a.d.D.findList                   ] - ==> Parameters: 071109171579801(String)
2019-07-11 09:17:16.358 DEBUG 13240 [nio-8980-exec-4] [c.j.m.a.d.D.findList                   ] - <==      Total: 0
2019-07-11 09:17:16.359 DEBUG 13240 [nio-8980-exec-4] [c.j.c.m.m.provider.SelectSqlProvider   ] - 1毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag" FROM sys_dashang_order a WHERE a.order_no = #{sqlMap.where#order_no#EQ1} ORDER BY a.update_date DESC
2019-07-11 09:17:16.359 DEBUG 13240 [nio-8980-exec-4] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@682482ee] will not be managed by Spring
2019-07-11 09:17:16.360 DEBUG 13240 [nio-8980-exec-4] [c.j.m.app.dao.DashangOrderDao.findList ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag" FROM sys_dashang_order a WHERE a.order_no = ? ORDER BY a.update_date DESC 
2019-07-11 09:17:16.360 DEBUG 13240 [nio-8980-exec-4] [c.j.m.app.dao.DashangOrderDao.findList ] - ==> Parameters: 071109171579801(String)
2019-07-11 09:17:16.383 DEBUG 13240 [nio-8980-exec-4] [c.j.m.app.dao.DashangOrderDao.findList ] - <==      Total: 0
2019-07-11 09:17:16.425 DEBUG 13240 [nio-8980-exec-4] [c.j.c.m.m.provider.UpdateSqlProvider   ] - 19毫秒: UPDATE sys_order SET `order_no` = #{orderNo}, `order_status` = #{orderStatus}, `product_count` = #{productCount}, `total_price` = #{totalPrice}, `logistics_price` = #{logisticsPrice}, `discount_price` = #{discountPrice}, `really_price` = #{reallyPrice}, `pay_channel` = #{payChannel}, `out_trade_no` = #{outTradeNo}, `update_by` = #{updateBy}, `user_id` = #{userId}, `del_flag` = #{delFlag}, `delivery_name` = #{deliveryName}, `delivery_address` = #{deliveryAddress}, `delivery_phone` = #{deliveryPhone}, `total_count` = #{totalCount} WHERE `id` = #{id}
2019-07-11 09:17:16.425 DEBUG 13240 [nio-8980-exec-4] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@682482ee] will be managed by Spring
2019-07-11 09:17:16.426 DEBUG 13240 [nio-8980-exec-4] [c.j.modules.app.dao.OrderDao.update    ] - ==>  Preparing: UPDATE sys_order SET `order_no` = ?, `order_status` = ?, `product_count` = ?, `total_price` = ?, `logistics_price` = ?, `discount_price` = ?, `really_price` = ?, `pay_channel` = ?, `out_trade_no` = ?, `update_by` = ?, `user_id` = ?, `del_flag` = ?, `delivery_name` = ?, `delivery_address` = ?, `delivery_phone` = ?, `total_count` = ? WHERE `id` = ? 
2019-07-11 09:17:16.426 DEBUG 13240 [nio-8980-exec-4] [c.j.modules.app.dao.OrderDao.update    ] - ==> Parameters: 071109171579801(String), 0(String), 1(String), 500(String), 0(String), 0(String), 500(String), null(String), 201907119171500003(String), system(String), 123(String), 0(String), 范耘诚123(String), 辽宁省铁西区铁西广场23(String), 15004001841(String), 1(String), 310(String)
2019-07-11 09:17:16.472 DEBUG 13240 [nio-8980-exec-4] [c.j.modules.app.dao.OrderDao.update    ] - <==    Updates: 1
2019-07-11 09:17:21.783 DEBUG 13240 [nio-8980-exec-3] [c.j.c.m.m.provider.SelectSqlProvider   ] - 0毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.product_count AS "productCount", a.total_price AS "totalPrice", a.logistics_price AS "logisticsPrice", a.discount_price AS "discountPrice", a.really_price AS "reallyPrice", a.pay_channel AS "payChannel", a.out_trade_no AS "outTradeNo", a.create_date AS "createDate", a.update_date AS "updateDate", a.create_by AS "createBy", a.update_by AS "updateBy", a.pay_date AS "payDate", a.user_id AS "userId", a.address_id AS "addressId", a.logistics_id AS "logisticsId", a.delivery_date AS "deliveryDate", a.del_flag AS "delFlag", a.delivery_name AS "deliveryName", a.delivery_address AS "deliveryAddress", a.delivery_phone AS "deliveryPhone", a.total_count AS "totalCount", a.trade_no AS "tradeNo" FROM sys_order a WHERE a.out_trade_no = #{sqlMap.where#out_trade_no#EQ1} ORDER BY a.update_date DESC
2019-07-11 09:17:21.784 DEBUG 13240 [nio-8980-exec-3] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@682482ee] will not be managed by Spring
2019-07-11 09:17:21.784 DEBUG 13240 [nio-8980-exec-3] [c.j.modules.app.dao.OrderDao.findList  ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.product_count AS "productCount", a.total_price AS "totalPrice", a.logistics_price AS "logisticsPrice", a.discount_price AS "discountPrice", a.really_price AS "reallyPrice", a.pay_channel AS "payChannel", a.out_trade_no AS "outTradeNo", a.create_date AS "createDate", a.update_date AS "updateDate", a.create_by AS "createBy", a.update_by AS "updateBy", a.pay_date AS "payDate", a.user_id AS "userId", a.address_id AS "addressId", a.logistics_id AS "logisticsId", a.delivery_date AS "deliveryDate", a.del_flag AS "delFlag", a.delivery_name AS "deliveryName", a.delivery_address AS "deliveryAddress", a.delivery_phone AS "deliveryPhone", a.total_count AS "totalCount", a.trade_no AS "tradeNo" FROM sys_order a WHERE a.out_trade_no = ? ORDER BY a.update_date DESC 
2019-07-11 09:17:21.784 DEBUG 13240 [nio-8980-exec-3] [c.j.modules.app.dao.OrderDao.findList  ] - ==> Parameters: 201907119171500003(String)
2019-07-11 09:17:21.809 DEBUG 13240 [nio-8980-exec-3] [c.j.modules.app.dao.OrderDao.findList  ] - <==      Total: 1
2019-07-11 09:17:21.810 DEBUG 13240 [nio-8980-exec-3] [c.j.c.m.m.provider.SelectSqlProvider   ] - 1毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", dd.id AS "userInfo.id", dd.mobile AS "userInfo.mobile", dd.password AS "userInfo.password", dd.icon AS "userInfo.icon", dd.regtime AS "userInfo.regtime", dd.lastlogin AS "userInfo.lastlogin", dd.islock AS "userInfo.islock", dd.isauthentication AS "userInfo.isauthentication", dd.type AS "userInfo.type", dd.create_by AS "userInfo.createBy", dd.create_date AS "userInfo.createDate", dd.update_by AS "userInfo.updateBy", dd.update_date AS "userInfo.updateDate", dd.remarks AS "userInfo.remarks", dd.del_flag AS "userInfo.delFlag", dd.nike_name AS "userInfo.nikeName", dd.is_invite AS "userInfo.isInvite", dd.third_id AS "userInfo.thirdId", dd.third_type AS "userInfo.thirdType", dd.third_icon AS "userInfo.thirdIcon", dd.member_lv AS "userInfo.memberLv", dd.member_flag AS "userInfo.memberFlag", dd.member_start AS "userInfo.memberStart", dd.member_end AS "userInfo.memberEnd", dd.invite_user_id AS "userInfo.inviteUserId", di.id AS "doctorInfos.id", di.doctorid AS "doctorInfos.doctorid", di.doctornum AS "doctorInfos.doctornum", di.name AS "doctorInfos.name", di.sex AS "doctorInfos.sex", di.age AS "doctorInfos.age", di.telephone AS "doctorInfos.telephone", di.idcard AS "doctorInfos.idcard", di.adress AS "doctorInfos.adress", di.technical AS "doctorInfos.technical", di.classify AS "doctorInfos.classify", di.introduce AS "doctorInfos.introduce", di.create_by AS "doctorInfos.createBy", di.cost AS "doctorInfos.cost", di.create_date AS "doctorInfos.createDate", di.update_by AS "doctorInfos.updateBy", di.update_date AS "doctorInfos.updateDate", di.remarks AS "doctorInfos.remarks", di.del_flag AS "doctorInfos.delFlag", di.cityid AS "doctorInfos.cityid", di.come_flag AS "doctorInfos.comeFlag", di.come_cost AS "doctorInfos.comeCost", di.own_flag AS "doctorInfos.ownFlag", di.first_count AS "doctorInfos.firstCount", di.star_lv AS "doctorInfos.starLv" FROM sys_tiaoli_order a LEFT JOIN sys_user_info dd ON a.userid = dd.id LEFT JOIN sys_doctor_info di ON a.docid = di.doctorid WHERE a.out_trade_no = #{sqlMap.where#out_trade_no#EQ1} ORDER BY a.create_date DESC
2019-07-11 09:17:21.810 DEBUG 13240 [nio-8980-exec-3] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@682482ee] will not be managed by Spring
2019-07-11 09:17:21.811 DEBUG 13240 [nio-8980-exec-3] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", dd.id AS "userInfo.id", dd.mobile AS "userInfo.mobile", dd.password AS "userInfo.password", dd.icon AS "userInfo.icon", dd.regtime AS "userInfo.regtime", dd.lastlogin AS "userInfo.lastlogin", dd.islock AS "userInfo.islock", dd.isauthentication AS "userInfo.isauthentication", dd.type AS "userInfo.type", dd.create_by AS "userInfo.createBy", dd.create_date AS "userInfo.createDate", dd.update_by AS "userInfo.updateBy", dd.update_date AS "userInfo.updateDate", dd.remarks AS "userInfo.remarks", dd.del_flag AS "userInfo.delFlag", dd.nike_name AS "userInfo.nikeName", dd.is_invite AS "userInfo.isInvite", dd.third_id AS "userInfo.thirdId", dd.third_type AS "userInfo.thirdType", dd.third_icon AS "userInfo.thirdIcon", dd.member_lv AS "userInfo.memberLv", dd.member_flag AS "userInfo.memberFlag", dd.member_start AS "userInfo.memberStart", dd.member_end AS "userInfo.memberEnd", dd.invite_user_id AS "userInfo.inviteUserId", di.id AS "doctorInfos.id", di.doctorid AS "doctorInfos.doctorid", di.doctornum AS "doctorInfos.doctornum", di.name AS "doctorInfos.name", di.sex AS "doctorInfos.sex", di.age AS "doctorInfos.age", di.telephone AS "doctorInfos.telephone", di.idcard AS "doctorInfos.idcard", di.adress AS "doctorInfos.adress", di.technical AS "doctorInfos.technical", di.classify AS "doctorInfos.classify", di.introduce AS "doctorInfos.introduce", di.create_by AS "doctorInfos.createBy", di.cost AS "doctorInfos.cost", di.create_date AS "doctorInfos.createDate", di.update_by AS "doctorInfos.updateBy", di.update_date AS "doctorInfos.updateDate", di.remarks AS "doctorInfos.remarks", di.del_flag AS "doctorInfos.delFlag", di.cityid AS "doctorInfos.cityid", di.come_flag AS "doctorInfos.comeFlag", di.come_cost AS "doctorInfos.comeCost", di.own_flag AS "doctorInfos.ownFlag", di.first_count AS "doctorInfos.firstCount", di.star_lv AS "doctorInfos.starLv" FROM sys_tiaoli_order a LEFT JOIN sys_user_info dd ON a.userid = dd.id LEFT JOIN sys_doctor_info di ON a.docid = di.doctorid WHERE a.out_trade_no = ? ORDER BY a.create_date DESC 
2019-07-11 09:17:21.811 DEBUG 13240 [nio-8980-exec-3] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - ==> Parameters: 201907119171500003(String)
2019-07-11 09:17:21.837 DEBUG 13240 [nio-8980-exec-3] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - <==      Total: 0
2019-07-11 09:17:21.839 DEBUG 13240 [nio-8980-exec-3] [c.j.c.m.m.provider.SelectSqlProvider   ] - 2毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", dd.id AS "userInfo.id", dd.mobile AS "userInfo.mobile", dd.password AS "userInfo.password", dd.icon AS "userInfo.icon", dd.regtime AS "userInfo.regtime", dd.lastlogin AS "userInfo.lastlogin", dd.islock AS "userInfo.islock", dd.isauthentication AS "userInfo.isauthentication", dd.type AS "userInfo.type", dd.create_by AS "userInfo.createBy", dd.create_date AS "userInfo.createDate", dd.update_by AS "userInfo.updateBy", dd.update_date AS "userInfo.updateDate", dd.remarks AS "userInfo.remarks", dd.del_flag AS "userInfo.delFlag", dd.nike_name AS "userInfo.nikeName", dd.is_invite AS "userInfo.isInvite", dd.third_id AS "userInfo.thirdId", dd.third_type AS "userInfo.thirdType", dd.third_icon AS "userInfo.thirdIcon", dd.member_lv AS "userInfo.memberLv", dd.member_flag AS "userInfo.memberFlag", dd.member_start AS "userInfo.memberStart", dd.member_end AS "userInfo.memberEnd", dd.invite_user_id AS "userInfo.inviteUserId", di.id AS "doctorInfos.id", di.doctorid AS "doctorInfos.doctorid", di.doctornum AS "doctorInfos.doctornum", di.name AS "doctorInfos.name", di.sex AS "doctorInfos.sex", di.age AS "doctorInfos.age", di.telephone AS "doctorInfos.telephone", di.idcard AS "doctorInfos.idcard", di.adress AS "doctorInfos.adress", di.technical AS "doctorInfos.technical", di.classify AS "doctorInfos.classify", di.introduce AS "doctorInfos.introduce", di.create_by AS "doctorInfos.createBy", di.cost AS "doctorInfos.cost", di.create_date AS "doctorInfos.createDate", di.update_by AS "doctorInfos.updateBy", di.update_date AS "doctorInfos.updateDate", di.remarks AS "doctorInfos.remarks", di.del_flag AS "doctorInfos.delFlag", di.cityid AS "doctorInfos.cityid", di.come_flag AS "doctorInfos.comeFlag", di.come_cost AS "doctorInfos.comeCost", di.own_flag AS "doctorInfos.ownFlag", di.first_count AS "doctorInfos.firstCount", di.star_lv AS "doctorInfos.starLv" FROM sys_tiaoli_order a LEFT JOIN sys_user_info dd ON a.userid = dd.id LEFT JOIN sys_doctor_info di ON a.docid = di.doctorid WHERE a.out_trade_no = #{sqlMap.where#out_trade_no#EQ1} ORDER BY a.create_date DESC
2019-07-11 09:17:21.839 DEBUG 13240 [nio-8980-exec-3] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@682482ee] will not be managed by Spring
2019-07-11 09:17:21.840 DEBUG 13240 [nio-8980-exec-3] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", dd.id AS "userInfo.id", dd.mobile AS "userInfo.mobile", dd.password AS "userInfo.password", dd.icon AS "userInfo.icon", dd.regtime AS "userInfo.regtime", dd.lastlogin AS "userInfo.lastlogin", dd.islock AS "userInfo.islock", dd.isauthentication AS "userInfo.isauthentication", dd.type AS "userInfo.type", dd.create_by AS "userInfo.createBy", dd.create_date AS "userInfo.createDate", dd.update_by AS "userInfo.updateBy", dd.update_date AS "userInfo.updateDate", dd.remarks AS "userInfo.remarks", dd.del_flag AS "userInfo.delFlag", dd.nike_name AS "userInfo.nikeName", dd.is_invite AS "userInfo.isInvite", dd.third_id AS "userInfo.thirdId", dd.third_type AS "userInfo.thirdType", dd.third_icon AS "userInfo.thirdIcon", dd.member_lv AS "userInfo.memberLv", dd.member_flag AS "userInfo.memberFlag", dd.member_start AS "userInfo.memberStart", dd.member_end AS "userInfo.memberEnd", dd.invite_user_id AS "userInfo.inviteUserId", di.id AS "doctorInfos.id", di.doctorid AS "doctorInfos.doctorid", di.doctornum AS "doctorInfos.doctornum", di.name AS "doctorInfos.name", di.sex AS "doctorInfos.sex", di.age AS "doctorInfos.age", di.telephone AS "doctorInfos.telephone", di.idcard AS "doctorInfos.idcard", di.adress AS "doctorInfos.adress", di.technical AS "doctorInfos.technical", di.classify AS "doctorInfos.classify", di.introduce AS "doctorInfos.introduce", di.create_by AS "doctorInfos.createBy", di.cost AS "doctorInfos.cost", di.create_date AS "doctorInfos.createDate", di.update_by AS "doctorInfos.updateBy", di.update_date AS "doctorInfos.updateDate", di.remarks AS "doctorInfos.remarks", di.del_flag AS "doctorInfos.delFlag", di.cityid AS "doctorInfos.cityid", di.come_flag AS "doctorInfos.comeFlag", di.come_cost AS "doctorInfos.comeCost", di.own_flag AS "doctorInfos.ownFlag", di.first_count AS "doctorInfos.firstCount", di.star_lv AS "doctorInfos.starLv" FROM sys_tiaoli_order a LEFT JOIN sys_user_info dd ON a.userid = dd.id LEFT JOIN sys_doctor_info di ON a.docid = di.doctorid WHERE a.out_trade_no = ? ORDER BY a.create_date DESC 
2019-07-11 09:17:21.840 DEBUG 13240 [nio-8980-exec-3] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - ==> Parameters: 201907119171500003(String)
2019-07-11 09:17:21.865 DEBUG 13240 [nio-8980-exec-3] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - <==      Total: 0
2019-07-11 09:17:21.866 DEBUG 13240 [nio-8980-exec-3] [c.j.c.m.m.provider.SelectSqlProvider   ] - 0毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.total_price AS "totalPrice", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag" FROM sys_member_order a WHERE a.out_trade_no = #{sqlMap.where#out_trade_no#EQ1} ORDER BY a.update_date DESC
2019-07-11 09:17:21.867 DEBUG 13240 [nio-8980-exec-3] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@682482ee] will not be managed by Spring
2019-07-11 09:17:21.867 DEBUG 13240 [nio-8980-exec-3] [c.j.m.app.dao.MemberOrderDao.findList  ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.total_price AS "totalPrice", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag" FROM sys_member_order a WHERE a.out_trade_no = ? ORDER BY a.update_date DESC 
2019-07-11 09:17:21.867 DEBUG 13240 [nio-8980-exec-3] [c.j.m.app.dao.MemberOrderDao.findList  ] - ==> Parameters: 201907119171500003(String)
2019-07-11 09:17:21.891 DEBUG 13240 [nio-8980-exec-3] [c.j.m.app.dao.MemberOrderDao.findList  ] - <==      Total: 0
2019-07-11 09:17:21.891 DEBUG 13240 [nio-8980-exec-3] [c.j.c.m.m.provider.SelectSqlProvider   ] - 0毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.total_price AS "totalPrice", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", a.doctor_user_id AS "doctorUserId" FROM sys_doctor_register_order a WHERE a.out_trade_no = #{sqlMap.where#out_trade_no#EQ1} ORDER BY a.update_date DESC
2019-07-11 09:17:21.892 DEBUG 13240 [nio-8980-exec-3] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@682482ee] will not be managed by Spring
2019-07-11 09:17:21.892 DEBUG 13240 [nio-8980-exec-3] [c.j.m.a.d.D.findList                   ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.total_price AS "totalPrice", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", a.doctor_user_id AS "doctorUserId" FROM sys_doctor_register_order a WHERE a.out_trade_no = ? ORDER BY a.update_date DESC 
2019-07-11 09:17:21.892 DEBUG 13240 [nio-8980-exec-3] [c.j.m.a.d.D.findList                   ] - ==> Parameters: 201907119171500003(String)
2019-07-11 09:17:21.914 DEBUG 13240 [nio-8980-exec-3] [c.j.m.a.d.D.findList                   ] - <==      Total: 0
2019-07-11 09:17:21.915 DEBUG 13240 [nio-8980-exec-3] [c.j.c.m.m.provider.SelectSqlProvider   ] - 0毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag" FROM sys_dashang_order a WHERE a.out_trade_no = #{sqlMap.where#out_trade_no#EQ1} ORDER BY a.update_date DESC
2019-07-11 09:17:21.916 DEBUG 13240 [nio-8980-exec-3] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@682482ee] will not be managed by Spring
2019-07-11 09:17:21.916 DEBUG 13240 [nio-8980-exec-3] [c.j.m.app.dao.DashangOrderDao.findList ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag" FROM sys_dashang_order a WHERE a.out_trade_no = ? ORDER BY a.update_date DESC 
2019-07-11 09:17:21.916 DEBUG 13240 [nio-8980-exec-3] [c.j.m.app.dao.DashangOrderDao.findList ] - ==> Parameters: 201907119171500003(String)
2019-07-11 09:17:21.939 DEBUG 13240 [nio-8980-exec-3] [c.j.m.app.dao.DashangOrderDao.findList ] - <==      Total: 0
2019-07-11 09:17:21.986 DEBUG 13240 [nio-8980-exec-3] [c.j.c.m.m.provider.UpdateSqlProvider   ] - 24毫秒: UPDATE sys_order SET `order_no` = #{orderNo}, `order_status` = #{orderStatus}, `product_count` = #{productCount}, `total_price` = #{totalPrice}, `logistics_price` = #{logisticsPrice}, `discount_price` = #{discountPrice}, `really_price` = #{reallyPrice}, `pay_channel` = #{payChannel}, `out_trade_no` = #{outTradeNo}, `update_by` = #{updateBy}, `pay_date` = #{payDate}, `user_id` = #{userId}, `del_flag` = #{delFlag}, `delivery_name` = #{deliveryName}, `delivery_address` = #{deliveryAddress}, `delivery_phone` = #{deliveryPhone}, `total_count` = #{totalCount} WHERE `id` = #{id}
2019-07-11 09:17:21.986 DEBUG 13240 [nio-8980-exec-3] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@682482ee] will be managed by Spring
2019-07-11 09:17:21.987 DEBUG 13240 [nio-8980-exec-3] [c.j.modules.app.dao.OrderDao.update    ] - ==>  Preparing: UPDATE sys_order SET `order_no` = ?, `order_status` = ?, `product_count` = ?, `total_price` = ?, `logistics_price` = ?, `discount_price` = ?, `really_price` = ?, `pay_channel` = ?, `out_trade_no` = ?, `update_by` = ?, `pay_date` = ?, `user_id` = ?, `del_flag` = ?, `delivery_name` = ?, `delivery_address` = ?, `delivery_phone` = ?, `total_count` = ? WHERE `id` = ? 
2019-07-11 09:17:21.987 DEBUG 13240 [nio-8980-exec-3] [c.j.modules.app.dao.OrderDao.update    ] - ==> Parameters: 071109171579801(String), 1(String), 1(String), 500(String), 0(String), 0(String), 500(String), 微信(String), 201907119171500003(String), system(String), 2019-07-11 09:17:21.94(Timestamp), 123(String), 0(String), 范耘诚123(String), 辽宁省铁西区铁西广场23(String), 15004001841(String), 1(String), 310(String)
2019-07-11 09:17:22.033 DEBUG 13240 [nio-8980-exec-3] [c.j.modules.app.dao.OrderDao.update    ] - <==    Updates: 1
2019-07-11 09:17:22.126 DEBUG 13240 [nio-8980-exec-3] [c.j.c.m.m.provider.SelectSqlProvider   ] - 0毫秒: SELECT a.id AS "id", a.user_id AS "userId", a.discount_price AS "discountPrice", a.create_date AS "createDate", a.update_date AS "updateDate", a.create_by AS "createBy", a.update_by AS "updateBy", a.remarks AS "remarks", dd.id AS "discountDetail.id", dd.discount_id AS "discountDetail.discountId", dd.remarks AS "discountDetail.remarks", dd.detail_price AS "discountDetail.detailPrice", dd.detail_state AS "discountDetail.detailState", dd.create_date AS "discountDetail.createDate", dd.update_date AS "discountDetail.updateDate", dd.create_by AS "discountDetail.createBy", dd.update_by AS "discountDetail.updateBy", dd.del_flag AS "discountDetail.delFlag" FROM sys_discount a LEFT JOIN sys_discount_detail dd ON a.id = dd.discount_id WHERE a.user_id = #{sqlMap.where#user_id#EQ1} ORDER BY a.update_date DESC
2019-07-11 09:17:22.127 DEBUG 13240 [nio-8980-exec-3] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@682482ee] will be managed by Spring
2019-07-11 09:17:22.127 DEBUG 13240 [nio-8980-exec-3] [c.j.m.app.dao.DiscountDao.findList     ] - ==>  Preparing: SELECT a.id AS "id", a.user_id AS "userId", a.discount_price AS "discountPrice", a.create_date AS "createDate", a.update_date AS "updateDate", a.create_by AS "createBy", a.update_by AS "updateBy", a.remarks AS "remarks", dd.id AS "discountDetail.id", dd.discount_id AS "discountDetail.discountId", dd.remarks AS "discountDetail.remarks", dd.detail_price AS "discountDetail.detailPrice", dd.detail_state AS "discountDetail.detailState", dd.create_date AS "discountDetail.createDate", dd.update_date AS "discountDetail.updateDate", dd.create_by AS "discountDetail.createBy", dd.update_by AS "discountDetail.updateBy", dd.del_flag AS "discountDetail.delFlag" FROM sys_discount a LEFT JOIN sys_discount_detail dd ON a.id = dd.discount_id WHERE a.user_id = ? ORDER BY a.update_date DESC 
2019-07-11 09:17:22.127 DEBUG 13240 [nio-8980-exec-3] [c.j.m.app.dao.DiscountDao.findList     ] - ==> Parameters: 123(String)
2019-07-11 09:17:22.152 DEBUG 13240 [nio-8980-exec-3] [c.j.m.app.dao.DiscountDao.findList     ] - <==      Total: 1
2019-07-11 09:17:22.153 DEBUG 13240 [nio-8980-exec-3] [c.j.c.m.m.provider.UpdateSqlProvider   ] - 1毫秒: UPDATE sys_discount SET `user_id` = #{userId}, `discount_price` = #{discountPrice}, `update_date` = #{updateDate}, `update_by` = #{updateBy}, `remarks` = #{remarks} WHERE `id` = #{id}
2019-07-11 09:17:22.154 DEBUG 13240 [nio-8980-exec-3] [c.j.modules.app.dao.DiscountDao.update ] - ==>  Preparing: UPDATE sys_discount SET `user_id` = ?, `discount_price` = ?, `update_date` = ?, `update_by` = ?, `remarks` = ? WHERE `id` = ? 
2019-07-11 09:17:22.154 DEBUG 13240 [nio-8980-exec-3] [c.j.modules.app.dao.DiscountDao.update ] - ==> Parameters: 123(String), 0(String), 2019-07-11 09:17:22.153(Timestamp), system(String), 备注(String), 1(String)
2019-07-11 09:17:22.199 DEBUG 13240 [nio-8980-exec-3] [c.j.modules.app.dao.DiscountDao.update ] - <==    Updates: 1
2019-07-11 09:29:30.593 INFO  5436 [           main] [com.jeesite.modules.Application        ] - Starting Application on DESKTOP-FVHI4E5 with PID 5436 (E:\gitlabHome\HaoLangZhongProject\HaoLangZhong\src\main\webapp\WEB-INF\classes started by 1111111 in E:\gitlabHome\HaoLangZhongProject\HaoLangZhong)
2019-07-11 09:29:30.597 DEBUG 5436 [           main] [com.jeesite.modules.Application        ] - Running with Spring Boot v2.0.6.RELEASE, Spring v5.0.10.RELEASE
2019-07-11 09:29:30.597 INFO  5436 [           main] [com.jeesite.modules.Application        ] - The following profiles are active: default
2019-07-11 09:29:32.773 INFO  5436 [           main] [com.jeesite.common.config.Global       ] - Config files: [classpath:config/jeesite-core.yml, classpath:config/application.yml]
2019-07-11 09:29:32.774 INFO  5436 [           main] [com.jeesite.common.config.Global       ] - Spring cache cluster mode: false, session manager name: J1CacheSession
2019-07-11 09:29:33.302 INFO  5436 [           main] [com.jeesite.common.config.Global       ] - user.home: C:/Users/15040
2019-07-11 09:29:33.303 INFO  5436 [           main] [com.jeesite.common.config.Global       ] - user.dir: E:/gitlabHome/HaoLangZhongProject/HaoLangZhong
2019-07-11 09:29:33.303 INFO  5436 [           main] [com.jeesite.common.config.Global       ] - logPath: E:/gitlabHome/HaoLangZhongProject/HaoLangZhong/src/main/webapp/WEB-INF/classes

   _____        ___  _   _           ___
  |_   _|      / __'(_)_| |_        /   |
  _ | | __  __ \___ | |_   _| __   / /| |
 ( .| |/__\/__\ ___)| | | |_ /__\ / /_| |_
  \___|\__.\__.|____|_| \___)\__.(____   _|  :: JeeSite V4.1.3 :: 
======================================|_|==========================

    欢迎使用 JeeSite Demo V4.1

    您当前的版本为社区版，官方网站：http://jeesite.com

    机器码是：6c59ab5175477606a72e1628bfd13f1a
    产品名称：JeeSite Demo
    公司名称：ThinkGem

===================================================================

2019-07-11 09:29:34.482 INFO  5436 [           main] [o.s.b.w.embedded.tomcat.TomcatWebServer] - Tomcat initialized with port(s): 8980 (http)
2019-07-11 09:29:35.529 DEBUG 5436 [           main] [c.j.common.datasource.RoutingDataSource] - Set default target data source success.
2019-07-11 09:29:41.601 DEBUG 5436 [           main] [com.jeesite.common.beetl.BeetlUtils    ] - Beetl config files: [classpath:/config/beetl-core.properties, classpath:/config/beetl.properties]
2019-07-11 09:29:41.853 DEBUG 5436 [           main] [c.j.c.m.m.provider.SelectSqlProvider   ] - 3毫秒: SELECT a.status AS "status", a.create_by AS "createBy", a.create_date AS "createDate", a.update_by AS "updateBy", a.update_date AS "updateDate", a.remarks AS "remarks", a.module_code AS "moduleCode", a.module_name AS "moduleName", a.description AS "description", a.main_class_name AS "mainClassName", a.current_version AS "currentVersion", a.upgrade_info AS "upgradeInfo" FROM js_sys_module a WHERE a.status = #{sqlMap.where#status#EQ1} ORDER BY a.update_date DESC
2019-07-11 09:29:41.882 DEBUG 5436 [           main] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@c22cf4d] will not be managed by Spring
2019-07-11 09:29:41.894 DEBUG 5436 [           main] [c.j.modules.sys.dao.ModuleDao.findList ] - ==>  Preparing: SELECT a.status AS "status", a.create_by AS "createBy", a.create_date AS "createDate", a.update_by AS "updateBy", a.update_date AS "updateDate", a.remarks AS "remarks", a.module_code AS "moduleCode", a.module_name AS "moduleName", a.description AS "description", a.main_class_name AS "mainClassName", a.current_version AS "currentVersion", a.upgrade_info AS "upgradeInfo" FROM js_sys_module a WHERE a.status = ? ORDER BY a.update_date DESC 
2019-07-11 09:29:41.921 DEBUG 5436 [           main] [c.j.modules.sys.dao.ModuleDao.findList ] - ==> Parameters: 0(String)
2019-07-11 09:29:41.962 DEBUG 5436 [           main] [c.j.modules.sys.dao.ModuleDao.findList ] - <==      Total: 2
2019-07-11 09:29:42.090 DEBUG 5436 [           main] [c.j.c.m.m.provider.SelectSqlProvider   ] - 0毫秒: SELECT a.corp_code AS "corpCode", a.corp_name AS "corpName", a.status AS "status", a.create_by AS "createBy", a.create_date AS "createDate", a.update_by AS "updateBy", a.update_date AS "updateDate", a.remarks AS "remarks", a.user_code AS "userCode", a.login_code AS "loginCode", a.user_name AS "userName", a.password AS "password", a.email AS "email", a.mobile AS "mobile", a.phone AS "phone", a.sex AS "sex", a.avatar AS "avatar", a.sign AS "sign", a.wx_openid AS "wxOpenid", a.mobile_imei AS "mobileImei", a.user_type AS "userType", a.ref_code AS "refCode", a.ref_name AS "refName", a.mgr_type AS "mgrType", a.pwd_security_level AS "pwdSecurityLevel", a.pwd_update_date AS "pwdUpdateDate", a.pwd_update_record AS "pwdUpdateRecord", a.pwd_question AS "pwdQuestion", a.pwd_question_answer AS "pwdQuestionAnswer", a.pwd_question_2 AS "pwdQuestion2", a.pwd_question_answer_2 AS "pwdQuestionAnswer2", a.pwd_question_3 AS "pwdQuestion3", a.pwd_question_answer_3 AS "pwdQuestionAnswer3", a.pwd_quest_update_date AS "pwdQuestUpdateDate", a.last_login_ip AS "lastLoginIp", a.last_login_date AS "lastLoginDate", a.freeze_date AS "freezeDate", a.freeze_cause AS "freezeCause", a.user_weight AS "userWeight", a.extend_s1 AS "extend.extendS1", a.extend_s2 AS "extend.extendS2", a.extend_s3 AS "extend.extendS3", a.extend_s4 AS "extend.extendS4", a.extend_s5 AS "extend.extendS5", a.extend_s6 AS "extend.extendS6", a.extend_s7 AS "extend.extendS7", a.extend_s8 AS "extend.extendS8", a.extend_i1 AS "extend.extendI1", a.extend_i2 AS "extend.extendI2", a.extend_i3 AS "extend.extendI3", a.extend_i4 AS "extend.extendI4", a.extend_f1 AS "extend.extendF1", a.extend_f2 AS "extend.extendF2", a.extend_f3 AS "extend.extendF3", a.extend_f4 AS "extend.extendF4", a.extend_d1 AS "extend.extendD1", a.extend_d2 AS "extend.extendD2", a.extend_d3 AS "extend.extendD3", a.extend_d4 AS "extend.extendD4" FROM js_sys_user a WHERE a.`user_code` = #{userCode}
2019-07-11 09:29:42.093 DEBUG 5436 [           main] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@c22cf4d] will be managed by Spring
2019-07-11 09:29:42.093 DEBUG 5436 [           main] [com.jeesite.modules.sys.dao.UserDao.get] - ==>  Preparing: SELECT a.corp_code AS "corpCode", a.corp_name AS "corpName", a.status AS "status", a.create_by AS "createBy", a.create_date AS "createDate", a.update_by AS "updateBy", a.update_date AS "updateDate", a.remarks AS "remarks", a.user_code AS "userCode", a.login_code AS "loginCode", a.user_name AS "userName", a.password AS "password", a.email AS "email", a.mobile AS "mobile", a.phone AS "phone", a.sex AS "sex", a.avatar AS "avatar", a.sign AS "sign", a.wx_openid AS "wxOpenid", a.mobile_imei AS "mobileImei", a.user_type AS "userType", a.ref_code AS "refCode", a.ref_name AS "refName", a.mgr_type AS "mgrType", a.pwd_security_level AS "pwdSecurityLevel", a.pwd_update_date AS "pwdUpdateDate", a.pwd_update_record AS "pwdUpdateRecord", a.pwd_question AS "pwdQuestion", a.pwd_question_answer AS "pwdQuestionAnswer", a.pwd_question_2 AS "pwdQuestion2", a.pwd_question_answer_2 AS "pwdQuestionAnswer2", a.pwd_question_3 AS "pwdQuestion3", a.pwd_question_answer_3 AS "pwdQuestionAnswer3", a.pwd_quest_update_date AS "pwdQuestUpdateDate", a.last_login_ip AS "lastLoginIp", a.last_login_date AS "lastLoginDate", a.freeze_date AS "freezeDate", a.freeze_cause AS "freezeCause", a.user_weight AS "userWeight", a.extend_s1 AS "extend.extendS1", a.extend_s2 AS "extend.extendS2", a.extend_s3 AS "extend.extendS3", a.extend_s4 AS "extend.extendS4", a.extend_s5 AS "extend.extendS5", a.extend_s6 AS "extend.extendS6", a.extend_s7 AS "extend.extendS7", a.extend_s8 AS "extend.extendS8", a.extend_i1 AS "extend.extendI1", a.extend_i2 AS "extend.extendI2", a.extend_i3 AS "extend.extendI3", a.extend_i4 AS "extend.extendI4", a.extend_f1 AS "extend.extendF1", a.extend_f2 AS "extend.extendF2", a.extend_f3 AS "extend.extendF3", a.extend_f4 AS "extend.extendF4", a.extend_d1 AS "extend.extendD1", a.extend_d2 AS "extend.extendD2", a.extend_d3 AS "extend.extendD3", a.extend_d4 AS "extend.extendD4" FROM js_sys_user a WHERE a.`user_code` = ? 
2019-07-11 09:29:42.093 DEBUG 5436 [           main] [com.jeesite.modules.sys.dao.UserDao.get] - ==> Parameters: system(String)
2019-07-11 09:29:42.120 DEBUG 5436 [           main] [com.jeesite.modules.sys.dao.UserDao.get] - <==      Total: 1
2019-07-11 09:29:42.164 DEBUG 5436 [           main] [c.j.m.s.dao.RoleDao.findListByUserCode ] - ==>  Preparing: SELECT a.corp_code AS "corpCode", a.corp_name AS "corpName", a.status AS "status", a.create_by AS "createBy", a.create_date AS "createDate", a.update_by AS "updateBy", a.update_date AS "updateDate", a.remarks AS "remarks", a.role_code AS "roleCode", a.role_name AS "roleName", a.role_type AS "roleType", a.role_sort AS "roleSort", a.is_sys AS "isSys", a.user_type AS "userType", a.data_scope AS "dataScope" FROM js_sys_role a JOIN js_sys_user_role ur ON a.role_code = ur.role_code WHERE a.status = ? AND ur.user_code = ? ORDER BY a.role_sort ASC 
2019-07-11 09:29:42.164 DEBUG 5436 [           main] [c.j.m.s.dao.RoleDao.findListByUserCode ] - ==> Parameters: 0(String), system(String)
2019-07-11 09:29:42.187 DEBUG 5436 [           main] [c.j.m.s.dao.RoleDao.findListByUserCode ] - <==      Total: 0
2019-07-11 09:29:42.227 DEBUG 5436 [           main] [c.j.c.m.m.provider.UpdateSqlProvider   ] - 199毫秒: UPDATE js_sys_menu SET `status` = #{param1.status}, `update_by` = #{param1.updateBy}, `update_date` = #{param1.updateDate} WHERE status != #{param2.STATUS_DELETE} AND module_codes LIKE #{param2.sqlMap.where#module_codes#LIKE1}
2019-07-11 09:29:42.228 DEBUG 5436 [           main] [c.j.m.s.d.MenuDao.updateStatusByEntity ] - ==>  Preparing: UPDATE js_sys_menu SET `status` = ?, `update_by` = ?, `update_date` = ? WHERE status != ? AND module_codes LIKE ? 
2019-07-11 09:29:42.230 DEBUG 5436 [           main] [c.j.m.s.d.MenuDao.updateStatusByEntity ] - ==> Parameters: 2(String), system(String), 2019-07-11 09:29:42.227(Timestamp), 1(String), %cms%(String)
2019-07-11 09:29:42.275 DEBUG 5436 [           main] [c.j.m.s.d.MenuDao.updateStatusByEntity ] - <==    Updates: 7
2019-07-11 09:29:42.392 DEBUG 5436 [           main] [c.j.c.m.m.provider.UpdateSqlProvider   ] - 5毫秒: UPDATE js_sys_menu SET `status` = #{param1.status}, `update_by` = #{param1.updateBy}, `update_date` = #{param1.updateDate} WHERE status != #{param2.STATUS_DELETE} AND module_codes LIKE #{param2.sqlMap.where#module_codes#LIKE1}
2019-07-11 09:29:42.392 DEBUG 5436 [           main] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@c22cf4d] will be managed by Spring
2019-07-11 09:29:42.393 DEBUG 5436 [           main] [c.j.m.s.d.MenuDao.updateStatusByEntity ] - ==>  Preparing: UPDATE js_sys_menu SET `status` = ?, `update_by` = ?, `update_date` = ? WHERE status != ? AND module_codes LIKE ? 
2019-07-11 09:29:42.394 DEBUG 5436 [           main] [c.j.m.s.d.MenuDao.updateStatusByEntity ] - ==> Parameters: 0(String), system(String), 2019-07-11 09:29:42.391(Timestamp), 1(String), %core%(String)
2019-07-11 09:29:42.442 DEBUG 5436 [           main] [c.j.m.s.d.MenuDao.updateStatusByEntity ] - <==    Updates: 70
2019-07-11 09:29:44.286 INFO  5436 [           main] [o.s.b.w.embedded.tomcat.TomcatWebServer] - Tomcat started on port(s): 8980 (http) with context path '/js'
2019-07-11 09:29:44.291 INFO  5436 [           main] [com.jeesite.modules.Application        ] - Started Application in 14.397 seconds (JVM running for 15.15)
2019-07-11 09:31:17.911 INFO  4420 [           main] [com.jeesite.modules.Application        ] - Starting Application on DESKTOP-FVHI4E5 with PID 4420 (E:\gitlabHome\HaoLangZhongProject\HaoLangZhong\src\main\webapp\WEB-INF\classes started by 1111111 in E:\gitlabHome\HaoLangZhongProject\HaoLangZhong)
2019-07-11 09:31:17.913 DEBUG 4420 [           main] [com.jeesite.modules.Application        ] - Running with Spring Boot v2.0.6.RELEASE, Spring v5.0.10.RELEASE
2019-07-11 09:31:17.914 INFO  4420 [           main] [com.jeesite.modules.Application        ] - The following profiles are active: default
2019-07-11 09:31:19.483 INFO  4420 [           main] [com.jeesite.common.config.Global       ] - Config files: [classpath:config/jeesite-core.yml, classpath:config/application.yml]
2019-07-11 09:31:19.484 INFO  4420 [           main] [com.jeesite.common.config.Global       ] - Spring cache cluster mode: false, session manager name: J1CacheSession
2019-07-11 09:31:20.051 INFO  4420 [           main] [com.jeesite.common.config.Global       ] - user.home: C:/Users/15040
2019-07-11 09:31:20.051 INFO  4420 [           main] [com.jeesite.common.config.Global       ] - user.dir: E:/gitlabHome/HaoLangZhongProject/HaoLangZhong
2019-07-11 09:31:20.052 INFO  4420 [           main] [com.jeesite.common.config.Global       ] - logPath: E:/gitlabHome/HaoLangZhongProject/HaoLangZhong/src/main/webapp/WEB-INF/classes

   _____        ___  _   _           ___
  |_   _|      / __'(_)_| |_        /   |
  _ | | __  __ \___ | |_   _| __   / /| |
 ( .| |/__\/__\ ___)| | | |_ /__\ / /_| |_
  \___|\__.\__.|____|_| \___)\__.(____   _|  :: JeeSite V4.1.3 :: 
======================================|_|==========================

    欢迎使用 JeeSite Demo V4.1

    您当前的版本为社区版，官方网站：http://jeesite.com

    机器码是：6c59ab5175477606a72e1628bfd13f1a
    产品名称：JeeSite Demo
    公司名称：ThinkGem

===================================================================

2019-07-11 09:31:21.033 INFO  4420 [           main] [o.s.b.w.embedded.tomcat.TomcatWebServer] - Tomcat initialized with port(s): 8980 (http)
2019-07-11 09:31:21.859 DEBUG 4420 [           main] [c.j.common.datasource.RoutingDataSource] - Set default target data source success.
2019-07-11 09:31:26.123 DEBUG 4420 [           main] [com.jeesite.common.beetl.BeetlUtils    ] - Beetl config files: [classpath:/config/beetl-core.properties, classpath:/config/beetl.properties]
2019-07-11 09:31:26.332 DEBUG 4420 [           main] [c.j.c.m.m.provider.SelectSqlProvider   ] - 2毫秒: SELECT a.status AS "status", a.create_by AS "createBy", a.create_date AS "createDate", a.update_by AS "updateBy", a.update_date AS "updateDate", a.remarks AS "remarks", a.module_code AS "moduleCode", a.module_name AS "moduleName", a.description AS "description", a.main_class_name AS "mainClassName", a.current_version AS "currentVersion", a.upgrade_info AS "upgradeInfo" FROM js_sys_module a WHERE a.status = #{sqlMap.where#status#EQ1} ORDER BY a.update_date DESC
2019-07-11 09:31:26.347 DEBUG 4420 [           main] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@6109d880] will not be managed by Spring
2019-07-11 09:31:26.357 DEBUG 4420 [           main] [c.j.modules.sys.dao.ModuleDao.findList ] - ==>  Preparing: SELECT a.status AS "status", a.create_by AS "createBy", a.create_date AS "createDate", a.update_by AS "updateBy", a.update_date AS "updateDate", a.remarks AS "remarks", a.module_code AS "moduleCode", a.module_name AS "moduleName", a.description AS "description", a.main_class_name AS "mainClassName", a.current_version AS "currentVersion", a.upgrade_info AS "upgradeInfo" FROM js_sys_module a WHERE a.status = ? ORDER BY a.update_date DESC 
2019-07-11 09:31:26.379 DEBUG 4420 [           main] [c.j.modules.sys.dao.ModuleDao.findList ] - ==> Parameters: 0(String)
2019-07-11 09:31:26.419 DEBUG 4420 [           main] [c.j.modules.sys.dao.ModuleDao.findList ] - <==      Total: 2
2019-07-11 09:31:26.524 DEBUG 4420 [           main] [c.j.c.m.m.provider.SelectSqlProvider   ] - 0毫秒: SELECT a.corp_code AS "corpCode", a.corp_name AS "corpName", a.status AS "status", a.create_by AS "createBy", a.create_date AS "createDate", a.update_by AS "updateBy", a.update_date AS "updateDate", a.remarks AS "remarks", a.user_code AS "userCode", a.login_code AS "loginCode", a.user_name AS "userName", a.password AS "password", a.email AS "email", a.mobile AS "mobile", a.phone AS "phone", a.sex AS "sex", a.avatar AS "avatar", a.sign AS "sign", a.wx_openid AS "wxOpenid", a.mobile_imei AS "mobileImei", a.user_type AS "userType", a.ref_code AS "refCode", a.ref_name AS "refName", a.mgr_type AS "mgrType", a.pwd_security_level AS "pwdSecurityLevel", a.pwd_update_date AS "pwdUpdateDate", a.pwd_update_record AS "pwdUpdateRecord", a.pwd_question AS "pwdQuestion", a.pwd_question_answer AS "pwdQuestionAnswer", a.pwd_question_2 AS "pwdQuestion2", a.pwd_question_answer_2 AS "pwdQuestionAnswer2", a.pwd_question_3 AS "pwdQuestion3", a.pwd_question_answer_3 AS "pwdQuestionAnswer3", a.pwd_quest_update_date AS "pwdQuestUpdateDate", a.last_login_ip AS "lastLoginIp", a.last_login_date AS "lastLoginDate", a.freeze_date AS "freezeDate", a.freeze_cause AS "freezeCause", a.user_weight AS "userWeight", a.extend_s1 AS "extend.extendS1", a.extend_s2 AS "extend.extendS2", a.extend_s3 AS "extend.extendS3", a.extend_s4 AS "extend.extendS4", a.extend_s5 AS "extend.extendS5", a.extend_s6 AS "extend.extendS6", a.extend_s7 AS "extend.extendS7", a.extend_s8 AS "extend.extendS8", a.extend_i1 AS "extend.extendI1", a.extend_i2 AS "extend.extendI2", a.extend_i3 AS "extend.extendI3", a.extend_i4 AS "extend.extendI4", a.extend_f1 AS "extend.extendF1", a.extend_f2 AS "extend.extendF2", a.extend_f3 AS "extend.extendF3", a.extend_f4 AS "extend.extendF4", a.extend_d1 AS "extend.extendD1", a.extend_d2 AS "extend.extendD2", a.extend_d3 AS "extend.extendD3", a.extend_d4 AS "extend.extendD4" FROM js_sys_user a WHERE a.`user_code` = #{userCode}
2019-07-11 09:31:26.525 DEBUG 4420 [           main] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@6109d880] will be managed by Spring
2019-07-11 09:31:26.526 DEBUG 4420 [           main] [com.jeesite.modules.sys.dao.UserDao.get] - ==>  Preparing: SELECT a.corp_code AS "corpCode", a.corp_name AS "corpName", a.status AS "status", a.create_by AS "createBy", a.create_date AS "createDate", a.update_by AS "updateBy", a.update_date AS "updateDate", a.remarks AS "remarks", a.user_code AS "userCode", a.login_code AS "loginCode", a.user_name AS "userName", a.password AS "password", a.email AS "email", a.mobile AS "mobile", a.phone AS "phone", a.sex AS "sex", a.avatar AS "avatar", a.sign AS "sign", a.wx_openid AS "wxOpenid", a.mobile_imei AS "mobileImei", a.user_type AS "userType", a.ref_code AS "refCode", a.ref_name AS "refName", a.mgr_type AS "mgrType", a.pwd_security_level AS "pwdSecurityLevel", a.pwd_update_date AS "pwdUpdateDate", a.pwd_update_record AS "pwdUpdateRecord", a.pwd_question AS "pwdQuestion", a.pwd_question_answer AS "pwdQuestionAnswer", a.pwd_question_2 AS "pwdQuestion2", a.pwd_question_answer_2 AS "pwdQuestionAnswer2", a.pwd_question_3 AS "pwdQuestion3", a.pwd_question_answer_3 AS "pwdQuestionAnswer3", a.pwd_quest_update_date AS "pwdQuestUpdateDate", a.last_login_ip AS "lastLoginIp", a.last_login_date AS "lastLoginDate", a.freeze_date AS "freezeDate", a.freeze_cause AS "freezeCause", a.user_weight AS "userWeight", a.extend_s1 AS "extend.extendS1", a.extend_s2 AS "extend.extendS2", a.extend_s3 AS "extend.extendS3", a.extend_s4 AS "extend.extendS4", a.extend_s5 AS "extend.extendS5", a.extend_s6 AS "extend.extendS6", a.extend_s7 AS "extend.extendS7", a.extend_s8 AS "extend.extendS8", a.extend_i1 AS "extend.extendI1", a.extend_i2 AS "extend.extendI2", a.extend_i3 AS "extend.extendI3", a.extend_i4 AS "extend.extendI4", a.extend_f1 AS "extend.extendF1", a.extend_f2 AS "extend.extendF2", a.extend_f3 AS "extend.extendF3", a.extend_f4 AS "extend.extendF4", a.extend_d1 AS "extend.extendD1", a.extend_d2 AS "extend.extendD2", a.extend_d3 AS "extend.extendD3", a.extend_d4 AS "extend.extendD4" FROM js_sys_user a WHERE a.`user_code` = ? 
2019-07-11 09:31:26.527 DEBUG 4420 [           main] [com.jeesite.modules.sys.dao.UserDao.get] - ==> Parameters: system(String)
2019-07-11 09:31:26.554 DEBUG 4420 [           main] [com.jeesite.modules.sys.dao.UserDao.get] - <==      Total: 1
2019-07-11 09:31:26.588 DEBUG 4420 [           main] [c.j.m.s.dao.RoleDao.findListByUserCode ] - ==>  Preparing: SELECT a.corp_code AS "corpCode", a.corp_name AS "corpName", a.status AS "status", a.create_by AS "createBy", a.create_date AS "createDate", a.update_by AS "updateBy", a.update_date AS "updateDate", a.remarks AS "remarks", a.role_code AS "roleCode", a.role_name AS "roleName", a.role_type AS "roleType", a.role_sort AS "roleSort", a.is_sys AS "isSys", a.user_type AS "userType", a.data_scope AS "dataScope" FROM js_sys_role a JOIN js_sys_user_role ur ON a.role_code = ur.role_code WHERE a.status = ? AND ur.user_code = ? ORDER BY a.role_sort ASC 
2019-07-11 09:31:26.589 DEBUG 4420 [           main] [c.j.m.s.dao.RoleDao.findListByUserCode ] - ==> Parameters: 0(String), system(String)
2019-07-11 09:31:26.612 DEBUG 4420 [           main] [c.j.m.s.dao.RoleDao.findListByUserCode ] - <==      Total: 0
2019-07-11 09:31:26.637 DEBUG 4420 [           main] [c.j.c.m.m.provider.UpdateSqlProvider   ] - 159毫秒: UPDATE js_sys_menu SET `status` = #{param1.status}, `update_by` = #{param1.updateBy}, `update_date` = #{param1.updateDate} WHERE status != #{param2.STATUS_DELETE} AND module_codes LIKE #{param2.sqlMap.where#module_codes#LIKE1}
2019-07-11 09:31:26.638 DEBUG 4420 [           main] [c.j.m.s.d.MenuDao.updateStatusByEntity ] - ==>  Preparing: UPDATE js_sys_menu SET `status` = ?, `update_by` = ?, `update_date` = ? WHERE status != ? AND module_codes LIKE ? 
2019-07-11 09:31:26.641 DEBUG 4420 [           main] [c.j.m.s.d.MenuDao.updateStatusByEntity ] - ==> Parameters: 2(String), system(String), 2019-07-11 09:31:26.637(Timestamp), 1(String), %cms%(String)
2019-07-11 09:31:26.687 DEBUG 4420 [           main] [c.j.m.s.d.MenuDao.updateStatusByEntity ] - <==    Updates: 7
2019-07-11 09:31:26.795 DEBUG 4420 [           main] [c.j.c.m.m.provider.UpdateSqlProvider   ] - 2毫秒: UPDATE js_sys_menu SET `status` = #{param1.status}, `update_by` = #{param1.updateBy}, `update_date` = #{param1.updateDate} WHERE status != #{param2.STATUS_DELETE} AND module_codes LIKE #{param2.sqlMap.where#module_codes#LIKE1}
2019-07-11 09:31:26.795 DEBUG 4420 [           main] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@6109d880] will be managed by Spring
2019-07-11 09:31:26.795 DEBUG 4420 [           main] [c.j.m.s.d.MenuDao.updateStatusByEntity ] - ==>  Preparing: UPDATE js_sys_menu SET `status` = ?, `update_by` = ?, `update_date` = ? WHERE status != ? AND module_codes LIKE ? 
2019-07-11 09:31:26.796 DEBUG 4420 [           main] [c.j.m.s.d.MenuDao.updateStatusByEntity ] - ==> Parameters: 0(String), system(String), 2019-07-11 09:31:26.795(Timestamp), 1(String), %core%(String)
2019-07-11 09:31:26.842 DEBUG 4420 [           main] [c.j.m.s.d.MenuDao.updateStatusByEntity ] - <==    Updates: 70
2019-07-11 09:31:28.240 INFO  4420 [           main] [o.s.b.w.embedded.tomcat.TomcatWebServer] - Tomcat started on port(s): 8980 (http) with context path '/js'
2019-07-11 09:31:28.243 INFO  4420 [           main] [com.jeesite.modules.Application        ] - Started Application in 10.8 seconds (JVM running for 11.224)
2019-07-11 09:33:51.128 DEBUG 4420 [nio-8980-exec-2] [c.j.c.m.m.provider.SelectSqlProvider   ] - 0毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.product_count AS "productCount", a.total_price AS "totalPrice", a.logistics_price AS "logisticsPrice", a.discount_price AS "discountPrice", a.really_price AS "reallyPrice", a.pay_channel AS "payChannel", a.out_trade_no AS "outTradeNo", a.create_date AS "createDate", a.update_date AS "updateDate", a.create_by AS "createBy", a.update_by AS "updateBy", a.pay_date AS "payDate", a.user_id AS "userId", a.address_id AS "addressId", a.logistics_id AS "logisticsId", a.delivery_date AS "deliveryDate", a.del_flag AS "delFlag", a.delivery_name AS "deliveryName", a.delivery_address AS "deliveryAddress", a.delivery_phone AS "deliveryPhone", a.total_count AS "totalCount", a.trade_no AS "tradeNo" FROM sys_order a WHERE a.order_no = #{sqlMap.where#order_no#EQ1} ORDER BY a.update_date DESC
2019-07-11 09:33:51.154 DEBUG 4420 [nio-8980-exec-2] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@6109d880] will not be managed by Spring
2019-07-11 09:33:51.154 DEBUG 4420 [nio-8980-exec-2] [c.j.modules.app.dao.OrderDao.findList  ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.product_count AS "productCount", a.total_price AS "totalPrice", a.logistics_price AS "logisticsPrice", a.discount_price AS "discountPrice", a.really_price AS "reallyPrice", a.pay_channel AS "payChannel", a.out_trade_no AS "outTradeNo", a.create_date AS "createDate", a.update_date AS "updateDate", a.create_by AS "createBy", a.update_by AS "updateBy", a.pay_date AS "payDate", a.user_id AS "userId", a.address_id AS "addressId", a.logistics_id AS "logisticsId", a.delivery_date AS "deliveryDate", a.del_flag AS "delFlag", a.delivery_name AS "deliveryName", a.delivery_address AS "deliveryAddress", a.delivery_phone AS "deliveryPhone", a.total_count AS "totalCount", a.trade_no AS "tradeNo" FROM sys_order a WHERE a.order_no = ? ORDER BY a.update_date DESC 
2019-07-11 09:33:51.155 DEBUG 4420 [nio-8980-exec-2] [c.j.modules.app.dao.OrderDao.findList  ] - ==> Parameters: 071109335016301(String)
2019-07-11 09:33:51.183 DEBUG 4420 [nio-8980-exec-2] [c.j.modules.app.dao.OrderDao.findList  ] - <==      Total: 1
2019-07-11 09:33:51.195 DEBUG 4420 [nio-8980-exec-2] [c.j.c.m.m.provider.SelectSqlProvider   ] - 1毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", dd.id AS "userInfo.id", dd.mobile AS "userInfo.mobile", dd.password AS "userInfo.password", dd.icon AS "userInfo.icon", dd.regtime AS "userInfo.regtime", dd.lastlogin AS "userInfo.lastlogin", dd.islock AS "userInfo.islock", dd.isauthentication AS "userInfo.isauthentication", dd.type AS "userInfo.type", dd.create_by AS "userInfo.createBy", dd.create_date AS "userInfo.createDate", dd.update_by AS "userInfo.updateBy", dd.update_date AS "userInfo.updateDate", dd.remarks AS "userInfo.remarks", dd.del_flag AS "userInfo.delFlag", dd.nike_name AS "userInfo.nikeName", dd.is_invite AS "userInfo.isInvite", dd.third_id AS "userInfo.thirdId", dd.third_type AS "userInfo.thirdType", dd.third_icon AS "userInfo.thirdIcon", dd.member_lv AS "userInfo.memberLv", dd.member_flag AS "userInfo.memberFlag", dd.member_start AS "userInfo.memberStart", dd.member_end AS "userInfo.memberEnd", dd.invite_user_id AS "userInfo.inviteUserId", di.id AS "doctorInfos.id", di.doctorid AS "doctorInfos.doctorid", di.doctornum AS "doctorInfos.doctornum", di.name AS "doctorInfos.name", di.sex AS "doctorInfos.sex", di.age AS "doctorInfos.age", di.telephone AS "doctorInfos.telephone", di.idcard AS "doctorInfos.idcard", di.adress AS "doctorInfos.adress", di.technical AS "doctorInfos.technical", di.classify AS "doctorInfos.classify", di.introduce AS "doctorInfos.introduce", di.create_by AS "doctorInfos.createBy", di.cost AS "doctorInfos.cost", di.create_date AS "doctorInfos.createDate", di.update_by AS "doctorInfos.updateBy", di.update_date AS "doctorInfos.updateDate", di.remarks AS "doctorInfos.remarks", di.del_flag AS "doctorInfos.delFlag", di.cityid AS "doctorInfos.cityid", di.come_flag AS "doctorInfos.comeFlag", di.come_cost AS "doctorInfos.comeCost", di.own_flag AS "doctorInfos.ownFlag", di.first_count AS "doctorInfos.firstCount", di.star_lv AS "doctorInfos.starLv" FROM sys_tiaoli_order a LEFT JOIN sys_user_info dd ON a.userid = dd.id LEFT JOIN sys_doctor_info di ON a.docid = di.doctorid WHERE a.order_no = #{sqlMap.where#order_no#EQ1} ORDER BY a.create_date DESC
2019-07-11 09:33:51.196 DEBUG 4420 [nio-8980-exec-2] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@6109d880] will not be managed by Spring
2019-07-11 09:33:51.196 DEBUG 4420 [nio-8980-exec-2] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", dd.id AS "userInfo.id", dd.mobile AS "userInfo.mobile", dd.password AS "userInfo.password", dd.icon AS "userInfo.icon", dd.regtime AS "userInfo.regtime", dd.lastlogin AS "userInfo.lastlogin", dd.islock AS "userInfo.islock", dd.isauthentication AS "userInfo.isauthentication", dd.type AS "userInfo.type", dd.create_by AS "userInfo.createBy", dd.create_date AS "userInfo.createDate", dd.update_by AS "userInfo.updateBy", dd.update_date AS "userInfo.updateDate", dd.remarks AS "userInfo.remarks", dd.del_flag AS "userInfo.delFlag", dd.nike_name AS "userInfo.nikeName", dd.is_invite AS "userInfo.isInvite", dd.third_id AS "userInfo.thirdId", dd.third_type AS "userInfo.thirdType", dd.third_icon AS "userInfo.thirdIcon", dd.member_lv AS "userInfo.memberLv", dd.member_flag AS "userInfo.memberFlag", dd.member_start AS "userInfo.memberStart", dd.member_end AS "userInfo.memberEnd", dd.invite_user_id AS "userInfo.inviteUserId", di.id AS "doctorInfos.id", di.doctorid AS "doctorInfos.doctorid", di.doctornum AS "doctorInfos.doctornum", di.name AS "doctorInfos.name", di.sex AS "doctorInfos.sex", di.age AS "doctorInfos.age", di.telephone AS "doctorInfos.telephone", di.idcard AS "doctorInfos.idcard", di.adress AS "doctorInfos.adress", di.technical AS "doctorInfos.technical", di.classify AS "doctorInfos.classify", di.introduce AS "doctorInfos.introduce", di.create_by AS "doctorInfos.createBy", di.cost AS "doctorInfos.cost", di.create_date AS "doctorInfos.createDate", di.update_by AS "doctorInfos.updateBy", di.update_date AS "doctorInfos.updateDate", di.remarks AS "doctorInfos.remarks", di.del_flag AS "doctorInfos.delFlag", di.cityid AS "doctorInfos.cityid", di.come_flag AS "doctorInfos.comeFlag", di.come_cost AS "doctorInfos.comeCost", di.own_flag AS "doctorInfos.ownFlag", di.first_count AS "doctorInfos.firstCount", di.star_lv AS "doctorInfos.starLv" FROM sys_tiaoli_order a LEFT JOIN sys_user_info dd ON a.userid = dd.id LEFT JOIN sys_doctor_info di ON a.docid = di.doctorid WHERE a.order_no = ? ORDER BY a.create_date DESC 
2019-07-11 09:33:51.197 DEBUG 4420 [nio-8980-exec-2] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - ==> Parameters: 071109335016301(String)
2019-07-11 09:33:51.242 DEBUG 4420 [nio-8980-exec-2] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - <==      Total: 0
2019-07-11 09:33:51.244 DEBUG 4420 [nio-8980-exec-2] [c.j.c.m.m.provider.SelectSqlProvider   ] - 1毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", dd.id AS "userInfo.id", dd.mobile AS "userInfo.mobile", dd.password AS "userInfo.password", dd.icon AS "userInfo.icon", dd.regtime AS "userInfo.regtime", dd.lastlogin AS "userInfo.lastlogin", dd.islock AS "userInfo.islock", dd.isauthentication AS "userInfo.isauthentication", dd.type AS "userInfo.type", dd.create_by AS "userInfo.createBy", dd.create_date AS "userInfo.createDate", dd.update_by AS "userInfo.updateBy", dd.update_date AS "userInfo.updateDate", dd.remarks AS "userInfo.remarks", dd.del_flag AS "userInfo.delFlag", dd.nike_name AS "userInfo.nikeName", dd.is_invite AS "userInfo.isInvite", dd.third_id AS "userInfo.thirdId", dd.third_type AS "userInfo.thirdType", dd.third_icon AS "userInfo.thirdIcon", dd.member_lv AS "userInfo.memberLv", dd.member_flag AS "userInfo.memberFlag", dd.member_start AS "userInfo.memberStart", dd.member_end AS "userInfo.memberEnd", dd.invite_user_id AS "userInfo.inviteUserId", di.id AS "doctorInfos.id", di.doctorid AS "doctorInfos.doctorid", di.doctornum AS "doctorInfos.doctornum", di.name AS "doctorInfos.name", di.sex AS "doctorInfos.sex", di.age AS "doctorInfos.age", di.telephone AS "doctorInfos.telephone", di.idcard AS "doctorInfos.idcard", di.adress AS "doctorInfos.adress", di.technical AS "doctorInfos.technical", di.classify AS "doctorInfos.classify", di.introduce AS "doctorInfos.introduce", di.create_by AS "doctorInfos.createBy", di.cost AS "doctorInfos.cost", di.create_date AS "doctorInfos.createDate", di.update_by AS "doctorInfos.updateBy", di.update_date AS "doctorInfos.updateDate", di.remarks AS "doctorInfos.remarks", di.del_flag AS "doctorInfos.delFlag", di.cityid AS "doctorInfos.cityid", di.come_flag AS "doctorInfos.comeFlag", di.come_cost AS "doctorInfos.comeCost", di.own_flag AS "doctorInfos.ownFlag", di.first_count AS "doctorInfos.firstCount", di.star_lv AS "doctorInfos.starLv" FROM sys_tiaoli_order a LEFT JOIN sys_user_info dd ON a.userid = dd.id LEFT JOIN sys_doctor_info di ON a.docid = di.doctorid WHERE a.order_no = #{sqlMap.where#order_no#EQ1} ORDER BY a.create_date DESC
2019-07-11 09:33:51.244 DEBUG 4420 [nio-8980-exec-2] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@6109d880] will not be managed by Spring
2019-07-11 09:33:51.244 DEBUG 4420 [nio-8980-exec-2] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", dd.id AS "userInfo.id", dd.mobile AS "userInfo.mobile", dd.password AS "userInfo.password", dd.icon AS "userInfo.icon", dd.regtime AS "userInfo.regtime", dd.lastlogin AS "userInfo.lastlogin", dd.islock AS "userInfo.islock", dd.isauthentication AS "userInfo.isauthentication", dd.type AS "userInfo.type", dd.create_by AS "userInfo.createBy", dd.create_date AS "userInfo.createDate", dd.update_by AS "userInfo.updateBy", dd.update_date AS "userInfo.updateDate", dd.remarks AS "userInfo.remarks", dd.del_flag AS "userInfo.delFlag", dd.nike_name AS "userInfo.nikeName", dd.is_invite AS "userInfo.isInvite", dd.third_id AS "userInfo.thirdId", dd.third_type AS "userInfo.thirdType", dd.third_icon AS "userInfo.thirdIcon", dd.member_lv AS "userInfo.memberLv", dd.member_flag AS "userInfo.memberFlag", dd.member_start AS "userInfo.memberStart", dd.member_end AS "userInfo.memberEnd", dd.invite_user_id AS "userInfo.inviteUserId", di.id AS "doctorInfos.id", di.doctorid AS "doctorInfos.doctorid", di.doctornum AS "doctorInfos.doctornum", di.name AS "doctorInfos.name", di.sex AS "doctorInfos.sex", di.age AS "doctorInfos.age", di.telephone AS "doctorInfos.telephone", di.idcard AS "doctorInfos.idcard", di.adress AS "doctorInfos.adress", di.technical AS "doctorInfos.technical", di.classify AS "doctorInfos.classify", di.introduce AS "doctorInfos.introduce", di.create_by AS "doctorInfos.createBy", di.cost AS "doctorInfos.cost", di.create_date AS "doctorInfos.createDate", di.update_by AS "doctorInfos.updateBy", di.update_date AS "doctorInfos.updateDate", di.remarks AS "doctorInfos.remarks", di.del_flag AS "doctorInfos.delFlag", di.cityid AS "doctorInfos.cityid", di.come_flag AS "doctorInfos.comeFlag", di.come_cost AS "doctorInfos.comeCost", di.own_flag AS "doctorInfos.ownFlag", di.first_count AS "doctorInfos.firstCount", di.star_lv AS "doctorInfos.starLv" FROM sys_tiaoli_order a LEFT JOIN sys_user_info dd ON a.userid = dd.id LEFT JOIN sys_doctor_info di ON a.docid = di.doctorid WHERE a.order_no = ? ORDER BY a.create_date DESC 
2019-07-11 09:33:51.245 DEBUG 4420 [nio-8980-exec-2] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - ==> Parameters: 071109335016301(String)
2019-07-11 09:33:51.270 DEBUG 4420 [nio-8980-exec-2] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - <==      Total: 0
2019-07-11 09:33:51.281 DEBUG 4420 [nio-8980-exec-2] [c.j.c.m.m.provider.SelectSqlProvider   ] - 0毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.total_price AS "totalPrice", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag" FROM sys_member_order a WHERE a.order_no = #{sqlMap.where#order_no#EQ1} ORDER BY a.update_date DESC
2019-07-11 09:33:51.282 DEBUG 4420 [nio-8980-exec-2] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@6109d880] will not be managed by Spring
2019-07-11 09:33:51.283 DEBUG 4420 [nio-8980-exec-2] [c.j.m.app.dao.MemberOrderDao.findList  ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.total_price AS "totalPrice", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag" FROM sys_member_order a WHERE a.order_no = ? ORDER BY a.update_date DESC 
2019-07-11 09:33:51.284 DEBUG 4420 [nio-8980-exec-2] [c.j.m.app.dao.MemberOrderDao.findList  ] - ==> Parameters: 071109335016301(String)
2019-07-11 09:33:51.307 DEBUG 4420 [nio-8980-exec-2] [c.j.m.app.dao.MemberOrderDao.findList  ] - <==      Total: 0
2019-07-11 09:33:51.316 DEBUG 4420 [nio-8980-exec-2] [c.j.c.m.m.provider.SelectSqlProvider   ] - 0毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.total_price AS "totalPrice", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", a.doctor_user_id AS "doctorUserId" FROM sys_doctor_register_order a WHERE a.order_no = #{sqlMap.where#order_no#EQ1} ORDER BY a.update_date DESC
2019-07-11 09:33:51.317 DEBUG 4420 [nio-8980-exec-2] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@6109d880] will not be managed by Spring
2019-07-11 09:33:51.318 DEBUG 4420 [nio-8980-exec-2] [c.j.m.a.d.D.findList                   ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.total_price AS "totalPrice", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", a.doctor_user_id AS "doctorUserId" FROM sys_doctor_register_order a WHERE a.order_no = ? ORDER BY a.update_date DESC 
2019-07-11 09:33:51.318 DEBUG 4420 [nio-8980-exec-2] [c.j.m.a.d.D.findList                   ] - ==> Parameters: 071109335016301(String)
2019-07-11 09:33:51.341 DEBUG 4420 [nio-8980-exec-2] [c.j.m.a.d.D.findList                   ] - <==      Total: 0
2019-07-11 09:33:51.350 DEBUG 4420 [nio-8980-exec-2] [c.j.c.m.m.provider.SelectSqlProvider   ] - 1毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag" FROM sys_dashang_order a WHERE a.order_no = #{sqlMap.where#order_no#EQ1} ORDER BY a.update_date DESC
2019-07-11 09:33:51.351 DEBUG 4420 [nio-8980-exec-2] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@6109d880] will not be managed by Spring
2019-07-11 09:33:51.351 DEBUG 4420 [nio-8980-exec-2] [c.j.m.app.dao.DashangOrderDao.findList ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag" FROM sys_dashang_order a WHERE a.order_no = ? ORDER BY a.update_date DESC 
2019-07-11 09:33:51.352 DEBUG 4420 [nio-8980-exec-2] [c.j.m.app.dao.DashangOrderDao.findList ] - ==> Parameters: 071109335016301(String)
2019-07-11 09:33:51.376 DEBUG 4420 [nio-8980-exec-2] [c.j.m.app.dao.DashangOrderDao.findList ] - <==      Total: 0
2019-07-11 09:33:51.410 DEBUG 4420 [nio-8980-exec-2] [c.j.c.m.m.provider.UpdateSqlProvider   ] - 10毫秒: UPDATE sys_order SET `order_no` = #{orderNo}, `order_status` = #{orderStatus}, `product_count` = #{productCount}, `total_price` = #{totalPrice}, `logistics_price` = #{logisticsPrice}, `discount_price` = #{discountPrice}, `really_price` = #{reallyPrice}, `pay_channel` = #{payChannel}, `out_trade_no` = #{outTradeNo}, `update_by` = #{updateBy}, `user_id` = #{userId}, `del_flag` = #{delFlag}, `delivery_name` = #{deliveryName}, `delivery_address` = #{deliveryAddress}, `delivery_phone` = #{deliveryPhone}, `total_count` = #{totalCount} WHERE `id` = #{id}
2019-07-11 09:33:51.411 DEBUG 4420 [nio-8980-exec-2] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@6109d880] will be managed by Spring
2019-07-11 09:33:51.411 DEBUG 4420 [nio-8980-exec-2] [c.j.modules.app.dao.OrderDao.update    ] - ==>  Preparing: UPDATE sys_order SET `order_no` = ?, `order_status` = ?, `product_count` = ?, `total_price` = ?, `logistics_price` = ?, `discount_price` = ?, `really_price` = ?, `pay_channel` = ?, `out_trade_no` = ?, `update_by` = ?, `user_id` = ?, `del_flag` = ?, `delivery_name` = ?, `delivery_address` = ?, `delivery_phone` = ?, `total_count` = ? WHERE `id` = ? 
2019-07-11 09:33:51.412 DEBUG 4420 [nio-8980-exec-2] [c.j.modules.app.dao.OrderDao.update    ] - ==> Parameters: 071109335016301(String), 0(String), 1(String), 3000(String), 0(String), 0(String), 3000(String), null(String), 201907119335000000(String), system(String), 123(String), 0(String), 范耘诚123(String), 辽宁省铁西区铁西广场23(String), 15004001841(String), 6(String), 332(String)
2019-07-11 09:33:51.458 DEBUG 4420 [nio-8980-exec-2] [c.j.modules.app.dao.OrderDao.update    ] - <==    Updates: 1
2019-07-11 09:33:58.023 DEBUG 4420 [nio-8980-exec-4] [c.j.c.m.m.provider.SelectSqlProvider   ] - 1毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.product_count AS "productCount", a.total_price AS "totalPrice", a.logistics_price AS "logisticsPrice", a.discount_price AS "discountPrice", a.really_price AS "reallyPrice", a.pay_channel AS "payChannel", a.out_trade_no AS "outTradeNo", a.create_date AS "createDate", a.update_date AS "updateDate", a.create_by AS "createBy", a.update_by AS "updateBy", a.pay_date AS "payDate", a.user_id AS "userId", a.address_id AS "addressId", a.logistics_id AS "logisticsId", a.delivery_date AS "deliveryDate", a.del_flag AS "delFlag", a.delivery_name AS "deliveryName", a.delivery_address AS "deliveryAddress", a.delivery_phone AS "deliveryPhone", a.total_count AS "totalCount", a.trade_no AS "tradeNo" FROM sys_order a WHERE a.out_trade_no = #{sqlMap.where#out_trade_no#EQ1} ORDER BY a.update_date DESC
2019-07-11 09:33:58.024 DEBUG 4420 [nio-8980-exec-4] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@6109d880] will not be managed by Spring
2019-07-11 09:33:58.024 DEBUG 4420 [nio-8980-exec-4] [c.j.modules.app.dao.OrderDao.findList  ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.product_count AS "productCount", a.total_price AS "totalPrice", a.logistics_price AS "logisticsPrice", a.discount_price AS "discountPrice", a.really_price AS "reallyPrice", a.pay_channel AS "payChannel", a.out_trade_no AS "outTradeNo", a.create_date AS "createDate", a.update_date AS "updateDate", a.create_by AS "createBy", a.update_by AS "updateBy", a.pay_date AS "payDate", a.user_id AS "userId", a.address_id AS "addressId", a.logistics_id AS "logisticsId", a.delivery_date AS "deliveryDate", a.del_flag AS "delFlag", a.delivery_name AS "deliveryName", a.delivery_address AS "deliveryAddress", a.delivery_phone AS "deliveryPhone", a.total_count AS "totalCount", a.trade_no AS "tradeNo" FROM sys_order a WHERE a.out_trade_no = ? ORDER BY a.update_date DESC 
2019-07-11 09:33:58.025 DEBUG 4420 [nio-8980-exec-4] [c.j.modules.app.dao.OrderDao.findList  ] - ==> Parameters: 201907119335000000(String)
2019-07-11 09:33:58.051 DEBUG 4420 [nio-8980-exec-4] [c.j.modules.app.dao.OrderDao.findList  ] - <==      Total: 1
2019-07-11 09:33:58.052 DEBUG 4420 [nio-8980-exec-4] [c.j.c.m.m.provider.SelectSqlProvider   ] - 0毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", dd.id AS "userInfo.id", dd.mobile AS "userInfo.mobile", dd.password AS "userInfo.password", dd.icon AS "userInfo.icon", dd.regtime AS "userInfo.regtime", dd.lastlogin AS "userInfo.lastlogin", dd.islock AS "userInfo.islock", dd.isauthentication AS "userInfo.isauthentication", dd.type AS "userInfo.type", dd.create_by AS "userInfo.createBy", dd.create_date AS "userInfo.createDate", dd.update_by AS "userInfo.updateBy", dd.update_date AS "userInfo.updateDate", dd.remarks AS "userInfo.remarks", dd.del_flag AS "userInfo.delFlag", dd.nike_name AS "userInfo.nikeName", dd.is_invite AS "userInfo.isInvite", dd.third_id AS "userInfo.thirdId", dd.third_type AS "userInfo.thirdType", dd.third_icon AS "userInfo.thirdIcon", dd.member_lv AS "userInfo.memberLv", dd.member_flag AS "userInfo.memberFlag", dd.member_start AS "userInfo.memberStart", dd.member_end AS "userInfo.memberEnd", dd.invite_user_id AS "userInfo.inviteUserId", di.id AS "doctorInfos.id", di.doctorid AS "doctorInfos.doctorid", di.doctornum AS "doctorInfos.doctornum", di.name AS "doctorInfos.name", di.sex AS "doctorInfos.sex", di.age AS "doctorInfos.age", di.telephone AS "doctorInfos.telephone", di.idcard AS "doctorInfos.idcard", di.adress AS "doctorInfos.adress", di.technical AS "doctorInfos.technical", di.classify AS "doctorInfos.classify", di.introduce AS "doctorInfos.introduce", di.create_by AS "doctorInfos.createBy", di.cost AS "doctorInfos.cost", di.create_date AS "doctorInfos.createDate", di.update_by AS "doctorInfos.updateBy", di.update_date AS "doctorInfos.updateDate", di.remarks AS "doctorInfos.remarks", di.del_flag AS "doctorInfos.delFlag", di.cityid AS "doctorInfos.cityid", di.come_flag AS "doctorInfos.comeFlag", di.come_cost AS "doctorInfos.comeCost", di.own_flag AS "doctorInfos.ownFlag", di.first_count AS "doctorInfos.firstCount", di.star_lv AS "doctorInfos.starLv" FROM sys_tiaoli_order a LEFT JOIN sys_user_info dd ON a.userid = dd.id LEFT JOIN sys_doctor_info di ON a.docid = di.doctorid WHERE a.out_trade_no = #{sqlMap.where#out_trade_no#EQ1} ORDER BY a.create_date DESC
2019-07-11 09:33:58.053 DEBUG 4420 [nio-8980-exec-4] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@6109d880] will not be managed by Spring
2019-07-11 09:33:58.053 DEBUG 4420 [nio-8980-exec-4] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", dd.id AS "userInfo.id", dd.mobile AS "userInfo.mobile", dd.password AS "userInfo.password", dd.icon AS "userInfo.icon", dd.regtime AS "userInfo.regtime", dd.lastlogin AS "userInfo.lastlogin", dd.islock AS "userInfo.islock", dd.isauthentication AS "userInfo.isauthentication", dd.type AS "userInfo.type", dd.create_by AS "userInfo.createBy", dd.create_date AS "userInfo.createDate", dd.update_by AS "userInfo.updateBy", dd.update_date AS "userInfo.updateDate", dd.remarks AS "userInfo.remarks", dd.del_flag AS "userInfo.delFlag", dd.nike_name AS "userInfo.nikeName", dd.is_invite AS "userInfo.isInvite", dd.third_id AS "userInfo.thirdId", dd.third_type AS "userInfo.thirdType", dd.third_icon AS "userInfo.thirdIcon", dd.member_lv AS "userInfo.memberLv", dd.member_flag AS "userInfo.memberFlag", dd.member_start AS "userInfo.memberStart", dd.member_end AS "userInfo.memberEnd", dd.invite_user_id AS "userInfo.inviteUserId", di.id AS "doctorInfos.id", di.doctorid AS "doctorInfos.doctorid", di.doctornum AS "doctorInfos.doctornum", di.name AS "doctorInfos.name", di.sex AS "doctorInfos.sex", di.age AS "doctorInfos.age", di.telephone AS "doctorInfos.telephone", di.idcard AS "doctorInfos.idcard", di.adress AS "doctorInfos.adress", di.technical AS "doctorInfos.technical", di.classify AS "doctorInfos.classify", di.introduce AS "doctorInfos.introduce", di.create_by AS "doctorInfos.createBy", di.cost AS "doctorInfos.cost", di.create_date AS "doctorInfos.createDate", di.update_by AS "doctorInfos.updateBy", di.update_date AS "doctorInfos.updateDate", di.remarks AS "doctorInfos.remarks", di.del_flag AS "doctorInfos.delFlag", di.cityid AS "doctorInfos.cityid", di.come_flag AS "doctorInfos.comeFlag", di.come_cost AS "doctorInfos.comeCost", di.own_flag AS "doctorInfos.ownFlag", di.first_count AS "doctorInfos.firstCount", di.star_lv AS "doctorInfos.starLv" FROM sys_tiaoli_order a LEFT JOIN sys_user_info dd ON a.userid = dd.id LEFT JOIN sys_doctor_info di ON a.docid = di.doctorid WHERE a.out_trade_no = ? ORDER BY a.create_date DESC 
2019-07-11 09:33:58.053 DEBUG 4420 [nio-8980-exec-4] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - ==> Parameters: 201907119335000000(String)
2019-07-11 09:33:58.080 DEBUG 4420 [nio-8980-exec-4] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - <==      Total: 0
2019-07-11 09:33:58.082 DEBUG 4420 [nio-8980-exec-4] [c.j.c.m.m.provider.SelectSqlProvider   ] - 1毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", dd.id AS "userInfo.id", dd.mobile AS "userInfo.mobile", dd.password AS "userInfo.password", dd.icon AS "userInfo.icon", dd.regtime AS "userInfo.regtime", dd.lastlogin AS "userInfo.lastlogin", dd.islock AS "userInfo.islock", dd.isauthentication AS "userInfo.isauthentication", dd.type AS "userInfo.type", dd.create_by AS "userInfo.createBy", dd.create_date AS "userInfo.createDate", dd.update_by AS "userInfo.updateBy", dd.update_date AS "userInfo.updateDate", dd.remarks AS "userInfo.remarks", dd.del_flag AS "userInfo.delFlag", dd.nike_name AS "userInfo.nikeName", dd.is_invite AS "userInfo.isInvite", dd.third_id AS "userInfo.thirdId", dd.third_type AS "userInfo.thirdType", dd.third_icon AS "userInfo.thirdIcon", dd.member_lv AS "userInfo.memberLv", dd.member_flag AS "userInfo.memberFlag", dd.member_start AS "userInfo.memberStart", dd.member_end AS "userInfo.memberEnd", dd.invite_user_id AS "userInfo.inviteUserId", di.id AS "doctorInfos.id", di.doctorid AS "doctorInfos.doctorid", di.doctornum AS "doctorInfos.doctornum", di.name AS "doctorInfos.name", di.sex AS "doctorInfos.sex", di.age AS "doctorInfos.age", di.telephone AS "doctorInfos.telephone", di.idcard AS "doctorInfos.idcard", di.adress AS "doctorInfos.adress", di.technical AS "doctorInfos.technical", di.classify AS "doctorInfos.classify", di.introduce AS "doctorInfos.introduce", di.create_by AS "doctorInfos.createBy", di.cost AS "doctorInfos.cost", di.create_date AS "doctorInfos.createDate", di.update_by AS "doctorInfos.updateBy", di.update_date AS "doctorInfos.updateDate", di.remarks AS "doctorInfos.remarks", di.del_flag AS "doctorInfos.delFlag", di.cityid AS "doctorInfos.cityid", di.come_flag AS "doctorInfos.comeFlag", di.come_cost AS "doctorInfos.comeCost", di.own_flag AS "doctorInfos.ownFlag", di.first_count AS "doctorInfos.firstCount", di.star_lv AS "doctorInfos.starLv" FROM sys_tiaoli_order a LEFT JOIN sys_user_info dd ON a.userid = dd.id LEFT JOIN sys_doctor_info di ON a.docid = di.doctorid WHERE a.out_trade_no = #{sqlMap.where#out_trade_no#EQ1} ORDER BY a.create_date DESC
2019-07-11 09:33:58.082 DEBUG 4420 [nio-8980-exec-4] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@6109d880] will not be managed by Spring
2019-07-11 09:33:58.083 DEBUG 4420 [nio-8980-exec-4] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", dd.id AS "userInfo.id", dd.mobile AS "userInfo.mobile", dd.password AS "userInfo.password", dd.icon AS "userInfo.icon", dd.regtime AS "userInfo.regtime", dd.lastlogin AS "userInfo.lastlogin", dd.islock AS "userInfo.islock", dd.isauthentication AS "userInfo.isauthentication", dd.type AS "userInfo.type", dd.create_by AS "userInfo.createBy", dd.create_date AS "userInfo.createDate", dd.update_by AS "userInfo.updateBy", dd.update_date AS "userInfo.updateDate", dd.remarks AS "userInfo.remarks", dd.del_flag AS "userInfo.delFlag", dd.nike_name AS "userInfo.nikeName", dd.is_invite AS "userInfo.isInvite", dd.third_id AS "userInfo.thirdId", dd.third_type AS "userInfo.thirdType", dd.third_icon AS "userInfo.thirdIcon", dd.member_lv AS "userInfo.memberLv", dd.member_flag AS "userInfo.memberFlag", dd.member_start AS "userInfo.memberStart", dd.member_end AS "userInfo.memberEnd", dd.invite_user_id AS "userInfo.inviteUserId", di.id AS "doctorInfos.id", di.doctorid AS "doctorInfos.doctorid", di.doctornum AS "doctorInfos.doctornum", di.name AS "doctorInfos.name", di.sex AS "doctorInfos.sex", di.age AS "doctorInfos.age", di.telephone AS "doctorInfos.telephone", di.idcard AS "doctorInfos.idcard", di.adress AS "doctorInfos.adress", di.technical AS "doctorInfos.technical", di.classify AS "doctorInfos.classify", di.introduce AS "doctorInfos.introduce", di.create_by AS "doctorInfos.createBy", di.cost AS "doctorInfos.cost", di.create_date AS "doctorInfos.createDate", di.update_by AS "doctorInfos.updateBy", di.update_date AS "doctorInfos.updateDate", di.remarks AS "doctorInfos.remarks", di.del_flag AS "doctorInfos.delFlag", di.cityid AS "doctorInfos.cityid", di.come_flag AS "doctorInfos.comeFlag", di.come_cost AS "doctorInfos.comeCost", di.own_flag AS "doctorInfos.ownFlag", di.first_count AS "doctorInfos.firstCount", di.star_lv AS "doctorInfos.starLv" FROM sys_tiaoli_order a LEFT JOIN sys_user_info dd ON a.userid = dd.id LEFT JOIN sys_doctor_info di ON a.docid = di.doctorid WHERE a.out_trade_no = ? ORDER BY a.create_date DESC 
2019-07-11 09:33:58.083 DEBUG 4420 [nio-8980-exec-4] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - ==> Parameters: 201907119335000000(String)
2019-07-11 09:33:58.109 DEBUG 4420 [nio-8980-exec-4] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - <==      Total: 0
2019-07-11 09:33:58.110 DEBUG 4420 [nio-8980-exec-4] [c.j.c.m.m.provider.SelectSqlProvider   ] - 0毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.total_price AS "totalPrice", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag" FROM sys_member_order a WHERE a.out_trade_no = #{sqlMap.where#out_trade_no#EQ1} ORDER BY a.update_date DESC
2019-07-11 09:33:58.111 DEBUG 4420 [nio-8980-exec-4] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@6109d880] will not be managed by Spring
2019-07-11 09:33:58.112 DEBUG 4420 [nio-8980-exec-4] [c.j.m.app.dao.MemberOrderDao.findList  ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.total_price AS "totalPrice", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag" FROM sys_member_order a WHERE a.out_trade_no = ? ORDER BY a.update_date DESC 
2019-07-11 09:33:58.112 DEBUG 4420 [nio-8980-exec-4] [c.j.m.app.dao.MemberOrderDao.findList  ] - ==> Parameters: 201907119335000000(String)
2019-07-11 09:33:58.135 DEBUG 4420 [nio-8980-exec-4] [c.j.m.app.dao.MemberOrderDao.findList  ] - <==      Total: 0
2019-07-11 09:33:58.136 DEBUG 4420 [nio-8980-exec-4] [c.j.c.m.m.provider.SelectSqlProvider   ] - 0毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.total_price AS "totalPrice", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", a.doctor_user_id AS "doctorUserId" FROM sys_doctor_register_order a WHERE a.out_trade_no = #{sqlMap.where#out_trade_no#EQ1} ORDER BY a.update_date DESC
2019-07-11 09:33:58.137 DEBUG 4420 [nio-8980-exec-4] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@6109d880] will not be managed by Spring
2019-07-11 09:33:58.137 DEBUG 4420 [nio-8980-exec-4] [c.j.m.a.d.D.findList                   ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.total_price AS "totalPrice", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", a.doctor_user_id AS "doctorUserId" FROM sys_doctor_register_order a WHERE a.out_trade_no = ? ORDER BY a.update_date DESC 
2019-07-11 09:33:58.138 DEBUG 4420 [nio-8980-exec-4] [c.j.m.a.d.D.findList                   ] - ==> Parameters: 201907119335000000(String)
2019-07-11 09:33:58.161 DEBUG 4420 [nio-8980-exec-4] [c.j.m.a.d.D.findList                   ] - <==      Total: 0
2019-07-11 09:33:58.162 DEBUG 4420 [nio-8980-exec-4] [c.j.c.m.m.provider.SelectSqlProvider   ] - 0毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag" FROM sys_dashang_order a WHERE a.out_trade_no = #{sqlMap.where#out_trade_no#EQ1} ORDER BY a.update_date DESC
2019-07-11 09:33:58.162 DEBUG 4420 [nio-8980-exec-4] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@6109d880] will not be managed by Spring
2019-07-11 09:33:58.163 DEBUG 4420 [nio-8980-exec-4] [c.j.m.app.dao.DashangOrderDao.findList ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag" FROM sys_dashang_order a WHERE a.out_trade_no = ? ORDER BY a.update_date DESC 
2019-07-11 09:33:58.163 DEBUG 4420 [nio-8980-exec-4] [c.j.m.app.dao.DashangOrderDao.findList ] - ==> Parameters: 201907119335000000(String)
2019-07-11 09:33:58.186 DEBUG 4420 [nio-8980-exec-4] [c.j.m.app.dao.DashangOrderDao.findList ] - <==      Total: 0
2019-07-11 09:33:58.222 DEBUG 4420 [nio-8980-exec-4] [c.j.c.m.m.provider.UpdateSqlProvider   ] - 11毫秒: UPDATE sys_order SET `order_no` = #{orderNo}, `order_status` = #{orderStatus}, `product_count` = #{productCount}, `total_price` = #{totalPrice}, `logistics_price` = #{logisticsPrice}, `discount_price` = #{discountPrice}, `really_price` = #{reallyPrice}, `pay_channel` = #{payChannel}, `out_trade_no` = #{outTradeNo}, `update_by` = #{updateBy}, `pay_date` = #{payDate}, `user_id` = #{userId}, `del_flag` = #{delFlag}, `delivery_name` = #{deliveryName}, `delivery_address` = #{deliveryAddress}, `delivery_phone` = #{deliveryPhone}, `total_count` = #{totalCount} WHERE `id` = #{id}
2019-07-11 09:33:58.223 DEBUG 4420 [nio-8980-exec-4] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@6109d880] will be managed by Spring
2019-07-11 09:33:58.223 DEBUG 4420 [nio-8980-exec-4] [c.j.modules.app.dao.OrderDao.update    ] - ==>  Preparing: UPDATE sys_order SET `order_no` = ?, `order_status` = ?, `product_count` = ?, `total_price` = ?, `logistics_price` = ?, `discount_price` = ?, `really_price` = ?, `pay_channel` = ?, `out_trade_no` = ?, `update_by` = ?, `pay_date` = ?, `user_id` = ?, `del_flag` = ?, `delivery_name` = ?, `delivery_address` = ?, `delivery_phone` = ?, `total_count` = ? WHERE `id` = ? 
2019-07-11 09:33:58.224 DEBUG 4420 [nio-8980-exec-4] [c.j.modules.app.dao.OrderDao.update    ] - ==> Parameters: 071109335016301(String), 1(String), 1(String), 3000(String), 0(String), 0(String), 3000(String), 微信(String), 201907119335000000(String), system(String), 2019-07-11 09:33:58.187(Timestamp), 123(String), 0(String), 范耘诚123(String), 辽宁省铁西区铁西广场23(String), 15004001841(String), 6(String), 332(String)
2019-07-11 09:33:58.269 DEBUG 4420 [nio-8980-exec-4] [c.j.modules.app.dao.OrderDao.update    ] - <==    Updates: 1
2019-07-11 09:33:58.372 DEBUG 4420 [nio-8980-exec-4] [c.j.c.m.m.provider.SelectSqlProvider   ] - 1毫秒: SELECT a.id AS "id", a.user_id AS "userId", a.discount_price AS "discountPrice", a.create_date AS "createDate", a.update_date AS "updateDate", a.create_by AS "createBy", a.update_by AS "updateBy", a.remarks AS "remarks", dd.id AS "discountDetail.id", dd.discount_id AS "discountDetail.discountId", dd.remarks AS "discountDetail.remarks", dd.detail_price AS "discountDetail.detailPrice", dd.detail_state AS "discountDetail.detailState", dd.create_date AS "discountDetail.createDate", dd.update_date AS "discountDetail.updateDate", dd.create_by AS "discountDetail.createBy", dd.update_by AS "discountDetail.updateBy", dd.del_flag AS "discountDetail.delFlag" FROM sys_discount a LEFT JOIN sys_discount_detail dd ON a.id = dd.discount_id WHERE a.user_id = #{sqlMap.where#user_id#EQ1} ORDER BY a.update_date DESC
2019-07-11 09:33:58.373 DEBUG 4420 [nio-8980-exec-4] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@6109d880] will be managed by Spring
2019-07-11 09:33:58.373 DEBUG 4420 [nio-8980-exec-4] [c.j.m.app.dao.DiscountDao.findList     ] - ==>  Preparing: SELECT a.id AS "id", a.user_id AS "userId", a.discount_price AS "discountPrice", a.create_date AS "createDate", a.update_date AS "updateDate", a.create_by AS "createBy", a.update_by AS "updateBy", a.remarks AS "remarks", dd.id AS "discountDetail.id", dd.discount_id AS "discountDetail.discountId", dd.remarks AS "discountDetail.remarks", dd.detail_price AS "discountDetail.detailPrice", dd.detail_state AS "discountDetail.detailState", dd.create_date AS "discountDetail.createDate", dd.update_date AS "discountDetail.updateDate", dd.create_by AS "discountDetail.createBy", dd.update_by AS "discountDetail.updateBy", dd.del_flag AS "discountDetail.delFlag" FROM sys_discount a LEFT JOIN sys_discount_detail dd ON a.id = dd.discount_id WHERE a.user_id = ? ORDER BY a.update_date DESC 
2019-07-11 09:33:58.373 DEBUG 4420 [nio-8980-exec-4] [c.j.m.app.dao.DiscountDao.findList     ] - ==> Parameters: 123(String)
2019-07-11 09:33:58.399 DEBUG 4420 [nio-8980-exec-4] [c.j.m.app.dao.DiscountDao.findList     ] - <==      Total: 1
2019-07-11 09:33:58.400 DEBUG 4420 [nio-8980-exec-4] [c.j.c.m.m.provider.UpdateSqlProvider   ] - 0毫秒: UPDATE sys_discount SET `user_id` = #{userId}, `discount_price` = #{discountPrice}, `update_date` = #{updateDate}, `update_by` = #{updateBy}, `remarks` = #{remarks} WHERE `id` = #{id}
2019-07-11 09:33:58.401 DEBUG 4420 [nio-8980-exec-4] [c.j.modules.app.dao.DiscountDao.update ] - ==>  Preparing: UPDATE sys_discount SET `user_id` = ?, `discount_price` = ?, `update_date` = ?, `update_by` = ?, `remarks` = ? WHERE `id` = ? 
2019-07-11 09:33:58.402 DEBUG 4420 [nio-8980-exec-4] [c.j.modules.app.dao.DiscountDao.update ] - ==> Parameters: 123(String), 0(String), 2019-07-11 09:33:58.4(Timestamp), system(String), 备注(String), 1(String)
2019-07-11 09:33:58.452 DEBUG 4420 [nio-8980-exec-4] [c.j.modules.app.dao.DiscountDao.update ] - <==    Updates: 1
2019-07-11 09:39:25.623 DEBUG 4420 [nio-8980-exec-7] [c.j.c.m.m.provider.SelectSqlProvider   ] - 0毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.product_count AS "productCount", a.total_price AS "totalPrice", a.logistics_price AS "logisticsPrice", a.discount_price AS "discountPrice", a.really_price AS "reallyPrice", a.pay_channel AS "payChannel", a.out_trade_no AS "outTradeNo", a.create_date AS "createDate", a.update_date AS "updateDate", a.create_by AS "createBy", a.update_by AS "updateBy", a.pay_date AS "payDate", a.user_id AS "userId", a.address_id AS "addressId", a.logistics_id AS "logisticsId", a.delivery_date AS "deliveryDate", a.del_flag AS "delFlag", a.delivery_name AS "deliveryName", a.delivery_address AS "deliveryAddress", a.delivery_phone AS "deliveryPhone", a.total_count AS "totalCount", a.trade_no AS "tradeNo" FROM sys_order a WHERE a.order_no = #{sqlMap.where#order_no#EQ1} ORDER BY a.update_date DESC
2019-07-11 09:39:25.646 DEBUG 4420 [nio-8980-exec-7] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@6109d880] will not be managed by Spring
2019-07-11 09:39:25.647 DEBUG 4420 [nio-8980-exec-7] [c.j.modules.app.dao.OrderDao.findList  ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.product_count AS "productCount", a.total_price AS "totalPrice", a.logistics_price AS "logisticsPrice", a.discount_price AS "discountPrice", a.really_price AS "reallyPrice", a.pay_channel AS "payChannel", a.out_trade_no AS "outTradeNo", a.create_date AS "createDate", a.update_date AS "updateDate", a.create_by AS "createBy", a.update_by AS "updateBy", a.pay_date AS "payDate", a.user_id AS "userId", a.address_id AS "addressId", a.logistics_id AS "logisticsId", a.delivery_date AS "deliveryDate", a.del_flag AS "delFlag", a.delivery_name AS "deliveryName", a.delivery_address AS "deliveryAddress", a.delivery_phone AS "deliveryPhone", a.total_count AS "totalCount", a.trade_no AS "tradeNo" FROM sys_order a WHERE a.order_no = ? ORDER BY a.update_date DESC 
2019-07-11 09:39:25.647 DEBUG 4420 [nio-8980-exec-7] [c.j.modules.app.dao.OrderDao.findList  ] - ==> Parameters: 071109392530901(String)
2019-07-11 09:39:25.672 DEBUG 4420 [nio-8980-exec-7] [c.j.modules.app.dao.OrderDao.findList  ] - <==      Total: 1
2019-07-11 09:39:25.673 DEBUG 4420 [nio-8980-exec-7] [c.j.c.m.m.provider.SelectSqlProvider   ] - 0毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", dd.id AS "userInfo.id", dd.mobile AS "userInfo.mobile", dd.password AS "userInfo.password", dd.icon AS "userInfo.icon", dd.regtime AS "userInfo.regtime", dd.lastlogin AS "userInfo.lastlogin", dd.islock AS "userInfo.islock", dd.isauthentication AS "userInfo.isauthentication", dd.type AS "userInfo.type", dd.create_by AS "userInfo.createBy", dd.create_date AS "userInfo.createDate", dd.update_by AS "userInfo.updateBy", dd.update_date AS "userInfo.updateDate", dd.remarks AS "userInfo.remarks", dd.del_flag AS "userInfo.delFlag", dd.nike_name AS "userInfo.nikeName", dd.is_invite AS "userInfo.isInvite", dd.third_id AS "userInfo.thirdId", dd.third_type AS "userInfo.thirdType", dd.third_icon AS "userInfo.thirdIcon", dd.member_lv AS "userInfo.memberLv", dd.member_flag AS "userInfo.memberFlag", dd.member_start AS "userInfo.memberStart", dd.member_end AS "userInfo.memberEnd", dd.invite_user_id AS "userInfo.inviteUserId", di.id AS "doctorInfos.id", di.doctorid AS "doctorInfos.doctorid", di.doctornum AS "doctorInfos.doctornum", di.name AS "doctorInfos.name", di.sex AS "doctorInfos.sex", di.age AS "doctorInfos.age", di.telephone AS "doctorInfos.telephone", di.idcard AS "doctorInfos.idcard", di.adress AS "doctorInfos.adress", di.technical AS "doctorInfos.technical", di.classify AS "doctorInfos.classify", di.introduce AS "doctorInfos.introduce", di.create_by AS "doctorInfos.createBy", di.cost AS "doctorInfos.cost", di.create_date AS "doctorInfos.createDate", di.update_by AS "doctorInfos.updateBy", di.update_date AS "doctorInfos.updateDate", di.remarks AS "doctorInfos.remarks", di.del_flag AS "doctorInfos.delFlag", di.cityid AS "doctorInfos.cityid", di.come_flag AS "doctorInfos.comeFlag", di.come_cost AS "doctorInfos.comeCost", di.own_flag AS "doctorInfos.ownFlag", di.first_count AS "doctorInfos.firstCount", di.star_lv AS "doctorInfos.starLv" FROM sys_tiaoli_order a LEFT JOIN sys_user_info dd ON a.userid = dd.id LEFT JOIN sys_doctor_info di ON a.docid = di.doctorid WHERE a.order_no = #{sqlMap.where#order_no#EQ1} ORDER BY a.create_date DESC
2019-07-11 09:39:25.674 DEBUG 4420 [nio-8980-exec-7] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@6109d880] will not be managed by Spring
2019-07-11 09:39:25.675 DEBUG 4420 [nio-8980-exec-7] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", dd.id AS "userInfo.id", dd.mobile AS "userInfo.mobile", dd.password AS "userInfo.password", dd.icon AS "userInfo.icon", dd.regtime AS "userInfo.regtime", dd.lastlogin AS "userInfo.lastlogin", dd.islock AS "userInfo.islock", dd.isauthentication AS "userInfo.isauthentication", dd.type AS "userInfo.type", dd.create_by AS "userInfo.createBy", dd.create_date AS "userInfo.createDate", dd.update_by AS "userInfo.updateBy", dd.update_date AS "userInfo.updateDate", dd.remarks AS "userInfo.remarks", dd.del_flag AS "userInfo.delFlag", dd.nike_name AS "userInfo.nikeName", dd.is_invite AS "userInfo.isInvite", dd.third_id AS "userInfo.thirdId", dd.third_type AS "userInfo.thirdType", dd.third_icon AS "userInfo.thirdIcon", dd.member_lv AS "userInfo.memberLv", dd.member_flag AS "userInfo.memberFlag", dd.member_start AS "userInfo.memberStart", dd.member_end AS "userInfo.memberEnd", dd.invite_user_id AS "userInfo.inviteUserId", di.id AS "doctorInfos.id", di.doctorid AS "doctorInfos.doctorid", di.doctornum AS "doctorInfos.doctornum", di.name AS "doctorInfos.name", di.sex AS "doctorInfos.sex", di.age AS "doctorInfos.age", di.telephone AS "doctorInfos.telephone", di.idcard AS "doctorInfos.idcard", di.adress AS "doctorInfos.adress", di.technical AS "doctorInfos.technical", di.classify AS "doctorInfos.classify", di.introduce AS "doctorInfos.introduce", di.create_by AS "doctorInfos.createBy", di.cost AS "doctorInfos.cost", di.create_date AS "doctorInfos.createDate", di.update_by AS "doctorInfos.updateBy", di.update_date AS "doctorInfos.updateDate", di.remarks AS "doctorInfos.remarks", di.del_flag AS "doctorInfos.delFlag", di.cityid AS "doctorInfos.cityid", di.come_flag AS "doctorInfos.comeFlag", di.come_cost AS "doctorInfos.comeCost", di.own_flag AS "doctorInfos.ownFlag", di.first_count AS "doctorInfos.firstCount", di.star_lv AS "doctorInfos.starLv" FROM sys_tiaoli_order a LEFT JOIN sys_user_info dd ON a.userid = dd.id LEFT JOIN sys_doctor_info di ON a.docid = di.doctorid WHERE a.order_no = ? ORDER BY a.create_date DESC 
2019-07-11 09:39:25.676 DEBUG 4420 [nio-8980-exec-7] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - ==> Parameters: 071109392530901(String)
2019-07-11 09:39:25.702 DEBUG 4420 [nio-8980-exec-7] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - <==      Total: 0
2019-07-11 09:39:25.705 DEBUG 4420 [nio-8980-exec-7] [c.j.c.m.m.provider.SelectSqlProvider   ] - 2毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", dd.id AS "userInfo.id", dd.mobile AS "userInfo.mobile", dd.password AS "userInfo.password", dd.icon AS "userInfo.icon", dd.regtime AS "userInfo.regtime", dd.lastlogin AS "userInfo.lastlogin", dd.islock AS "userInfo.islock", dd.isauthentication AS "userInfo.isauthentication", dd.type AS "userInfo.type", dd.create_by AS "userInfo.createBy", dd.create_date AS "userInfo.createDate", dd.update_by AS "userInfo.updateBy", dd.update_date AS "userInfo.updateDate", dd.remarks AS "userInfo.remarks", dd.del_flag AS "userInfo.delFlag", dd.nike_name AS "userInfo.nikeName", dd.is_invite AS "userInfo.isInvite", dd.third_id AS "userInfo.thirdId", dd.third_type AS "userInfo.thirdType", dd.third_icon AS "userInfo.thirdIcon", dd.member_lv AS "userInfo.memberLv", dd.member_flag AS "userInfo.memberFlag", dd.member_start AS "userInfo.memberStart", dd.member_end AS "userInfo.memberEnd", dd.invite_user_id AS "userInfo.inviteUserId", di.id AS "doctorInfos.id", di.doctorid AS "doctorInfos.doctorid", di.doctornum AS "doctorInfos.doctornum", di.name AS "doctorInfos.name", di.sex AS "doctorInfos.sex", di.age AS "doctorInfos.age", di.telephone AS "doctorInfos.telephone", di.idcard AS "doctorInfos.idcard", di.adress AS "doctorInfos.adress", di.technical AS "doctorInfos.technical", di.classify AS "doctorInfos.classify", di.introduce AS "doctorInfos.introduce", di.create_by AS "doctorInfos.createBy", di.cost AS "doctorInfos.cost", di.create_date AS "doctorInfos.createDate", di.update_by AS "doctorInfos.updateBy", di.update_date AS "doctorInfos.updateDate", di.remarks AS "doctorInfos.remarks", di.del_flag AS "doctorInfos.delFlag", di.cityid AS "doctorInfos.cityid", di.come_flag AS "doctorInfos.comeFlag", di.come_cost AS "doctorInfos.comeCost", di.own_flag AS "doctorInfos.ownFlag", di.first_count AS "doctorInfos.firstCount", di.star_lv AS "doctorInfos.starLv" FROM sys_tiaoli_order a LEFT JOIN sys_user_info dd ON a.userid = dd.id LEFT JOIN sys_doctor_info di ON a.docid = di.doctorid WHERE a.order_no = #{sqlMap.where#order_no#EQ1} ORDER BY a.create_date DESC
2019-07-11 09:39:25.707 DEBUG 4420 [nio-8980-exec-7] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@6109d880] will not be managed by Spring
2019-07-11 09:39:25.708 DEBUG 4420 [nio-8980-exec-7] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", dd.id AS "userInfo.id", dd.mobile AS "userInfo.mobile", dd.password AS "userInfo.password", dd.icon AS "userInfo.icon", dd.regtime AS "userInfo.regtime", dd.lastlogin AS "userInfo.lastlogin", dd.islock AS "userInfo.islock", dd.isauthentication AS "userInfo.isauthentication", dd.type AS "userInfo.type", dd.create_by AS "userInfo.createBy", dd.create_date AS "userInfo.createDate", dd.update_by AS "userInfo.updateBy", dd.update_date AS "userInfo.updateDate", dd.remarks AS "userInfo.remarks", dd.del_flag AS "userInfo.delFlag", dd.nike_name AS "userInfo.nikeName", dd.is_invite AS "userInfo.isInvite", dd.third_id AS "userInfo.thirdId", dd.third_type AS "userInfo.thirdType", dd.third_icon AS "userInfo.thirdIcon", dd.member_lv AS "userInfo.memberLv", dd.member_flag AS "userInfo.memberFlag", dd.member_start AS "userInfo.memberStart", dd.member_end AS "userInfo.memberEnd", dd.invite_user_id AS "userInfo.inviteUserId", di.id AS "doctorInfos.id", di.doctorid AS "doctorInfos.doctorid", di.doctornum AS "doctorInfos.doctornum", di.name AS "doctorInfos.name", di.sex AS "doctorInfos.sex", di.age AS "doctorInfos.age", di.telephone AS "doctorInfos.telephone", di.idcard AS "doctorInfos.idcard", di.adress AS "doctorInfos.adress", di.technical AS "doctorInfos.technical", di.classify AS "doctorInfos.classify", di.introduce AS "doctorInfos.introduce", di.create_by AS "doctorInfos.createBy", di.cost AS "doctorInfos.cost", di.create_date AS "doctorInfos.createDate", di.update_by AS "doctorInfos.updateBy", di.update_date AS "doctorInfos.updateDate", di.remarks AS "doctorInfos.remarks", di.del_flag AS "doctorInfos.delFlag", di.cityid AS "doctorInfos.cityid", di.come_flag AS "doctorInfos.comeFlag", di.come_cost AS "doctorInfos.comeCost", di.own_flag AS "doctorInfos.ownFlag", di.first_count AS "doctorInfos.firstCount", di.star_lv AS "doctorInfos.starLv" FROM sys_tiaoli_order a LEFT JOIN sys_user_info dd ON a.userid = dd.id LEFT JOIN sys_doctor_info di ON a.docid = di.doctorid WHERE a.order_no = ? ORDER BY a.create_date DESC 
2019-07-11 09:39:25.710 DEBUG 4420 [nio-8980-exec-7] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - ==> Parameters: 071109392530901(String)
2019-07-11 09:39:25.736 DEBUG 4420 [nio-8980-exec-7] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - <==      Total: 0
2019-07-11 09:39:25.737 DEBUG 4420 [nio-8980-exec-7] [c.j.c.m.m.provider.SelectSqlProvider   ] - 0毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.total_price AS "totalPrice", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag" FROM sys_member_order a WHERE a.order_no = #{sqlMap.where#order_no#EQ1} ORDER BY a.update_date DESC
2019-07-11 09:39:25.737 DEBUG 4420 [nio-8980-exec-7] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@6109d880] will not be managed by Spring
2019-07-11 09:39:25.738 DEBUG 4420 [nio-8980-exec-7] [c.j.m.app.dao.MemberOrderDao.findList  ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.total_price AS "totalPrice", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag" FROM sys_member_order a WHERE a.order_no = ? ORDER BY a.update_date DESC 
2019-07-11 09:39:25.738 DEBUG 4420 [nio-8980-exec-7] [c.j.m.app.dao.MemberOrderDao.findList  ] - ==> Parameters: 071109392530901(String)
2019-07-11 09:39:25.760 DEBUG 4420 [nio-8980-exec-7] [c.j.m.app.dao.MemberOrderDao.findList  ] - <==      Total: 0
2019-07-11 09:39:25.760 DEBUG 4420 [nio-8980-exec-7] [c.j.c.m.m.provider.SelectSqlProvider   ] - 0毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.total_price AS "totalPrice", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", a.doctor_user_id AS "doctorUserId" FROM sys_doctor_register_order a WHERE a.order_no = #{sqlMap.where#order_no#EQ1} ORDER BY a.update_date DESC
2019-07-11 09:39:25.761 DEBUG 4420 [nio-8980-exec-7] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@6109d880] will not be managed by Spring
2019-07-11 09:39:25.761 DEBUG 4420 [nio-8980-exec-7] [c.j.m.a.d.D.findList                   ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.total_price AS "totalPrice", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", a.doctor_user_id AS "doctorUserId" FROM sys_doctor_register_order a WHERE a.order_no = ? ORDER BY a.update_date DESC 
2019-07-11 09:39:25.761 DEBUG 4420 [nio-8980-exec-7] [c.j.m.a.d.D.findList                   ] - ==> Parameters: 071109392530901(String)
2019-07-11 09:39:25.784 DEBUG 4420 [nio-8980-exec-7] [c.j.m.a.d.D.findList                   ] - <==      Total: 0
2019-07-11 09:39:25.785 DEBUG 4420 [nio-8980-exec-7] [c.j.c.m.m.provider.SelectSqlProvider   ] - 0毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag" FROM sys_dashang_order a WHERE a.order_no = #{sqlMap.where#order_no#EQ1} ORDER BY a.update_date DESC
2019-07-11 09:39:25.786 DEBUG 4420 [nio-8980-exec-7] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@6109d880] will not be managed by Spring
2019-07-11 09:39:25.786 DEBUG 4420 [nio-8980-exec-7] [c.j.m.app.dao.DashangOrderDao.findList ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag" FROM sys_dashang_order a WHERE a.order_no = ? ORDER BY a.update_date DESC 
2019-07-11 09:39:25.786 DEBUG 4420 [nio-8980-exec-7] [c.j.m.app.dao.DashangOrderDao.findList ] - ==> Parameters: 071109392530901(String)
2019-07-11 09:39:25.810 DEBUG 4420 [nio-8980-exec-7] [c.j.m.app.dao.DashangOrderDao.findList ] - <==      Total: 0
2019-07-11 09:39:25.840 DEBUG 4420 [nio-8980-exec-7] [c.j.c.m.m.provider.UpdateSqlProvider   ] - 7毫秒: UPDATE sys_order SET `order_no` = #{orderNo}, `order_status` = #{orderStatus}, `product_count` = #{productCount}, `total_price` = #{totalPrice}, `logistics_price` = #{logisticsPrice}, `discount_price` = #{discountPrice}, `really_price` = #{reallyPrice}, `pay_channel` = #{payChannel}, `out_trade_no` = #{outTradeNo}, `update_by` = #{updateBy}, `user_id` = #{userId}, `del_flag` = #{delFlag}, `delivery_name` = #{deliveryName}, `delivery_address` = #{deliveryAddress}, `delivery_phone` = #{deliveryPhone}, `total_count` = #{totalCount} WHERE `id` = #{id}
2019-07-11 09:39:25.841 DEBUG 4420 [nio-8980-exec-7] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@6109d880] will be managed by Spring
2019-07-11 09:39:25.841 DEBUG 4420 [nio-8980-exec-7] [c.j.modules.app.dao.OrderDao.update    ] - ==>  Preparing: UPDATE sys_order SET `order_no` = ?, `order_status` = ?, `product_count` = ?, `total_price` = ?, `logistics_price` = ?, `discount_price` = ?, `really_price` = ?, `pay_channel` = ?, `out_trade_no` = ?, `update_by` = ?, `user_id` = ?, `del_flag` = ?, `delivery_name` = ?, `delivery_address` = ?, `delivery_phone` = ?, `total_count` = ? WHERE `id` = ? 
2019-07-11 09:39:25.842 DEBUG 4420 [nio-8980-exec-7] [c.j.modules.app.dao.OrderDao.update    ] - ==> Parameters: 071109392530901(String), 0(String), 1(String), 3900(String), 0(String), 0(String), 3900(String), null(String), 201907119392500001(String), system(String), 123(String), 0(String), 范耘诚123(String), 辽宁省铁西区铁西广场23(String), 15004001841(String), 13(String), 333(String)
2019-07-11 09:39:25.888 DEBUG 4420 [nio-8980-exec-7] [c.j.modules.app.dao.OrderDao.update    ] - <==    Updates: 1
2019-07-11 09:39:31.633 DEBUG 4420 [nio-8980-exec-8] [c.j.c.m.m.provider.SelectSqlProvider   ] - 0毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.product_count AS "productCount", a.total_price AS "totalPrice", a.logistics_price AS "logisticsPrice", a.discount_price AS "discountPrice", a.really_price AS "reallyPrice", a.pay_channel AS "payChannel", a.out_trade_no AS "outTradeNo", a.create_date AS "createDate", a.update_date AS "updateDate", a.create_by AS "createBy", a.update_by AS "updateBy", a.pay_date AS "payDate", a.user_id AS "userId", a.address_id AS "addressId", a.logistics_id AS "logisticsId", a.delivery_date AS "deliveryDate", a.del_flag AS "delFlag", a.delivery_name AS "deliveryName", a.delivery_address AS "deliveryAddress", a.delivery_phone AS "deliveryPhone", a.total_count AS "totalCount", a.trade_no AS "tradeNo" FROM sys_order a WHERE a.out_trade_no = #{sqlMap.where#out_trade_no#EQ1} ORDER BY a.update_date DESC
2019-07-11 09:39:31.634 DEBUG 4420 [nio-8980-exec-8] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@6109d880] will not be managed by Spring
2019-07-11 09:39:31.634 DEBUG 4420 [nio-8980-exec-8] [c.j.modules.app.dao.OrderDao.findList  ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.product_count AS "productCount", a.total_price AS "totalPrice", a.logistics_price AS "logisticsPrice", a.discount_price AS "discountPrice", a.really_price AS "reallyPrice", a.pay_channel AS "payChannel", a.out_trade_no AS "outTradeNo", a.create_date AS "createDate", a.update_date AS "updateDate", a.create_by AS "createBy", a.update_by AS "updateBy", a.pay_date AS "payDate", a.user_id AS "userId", a.address_id AS "addressId", a.logistics_id AS "logisticsId", a.delivery_date AS "deliveryDate", a.del_flag AS "delFlag", a.delivery_name AS "deliveryName", a.delivery_address AS "deliveryAddress", a.delivery_phone AS "deliveryPhone", a.total_count AS "totalCount", a.trade_no AS "tradeNo" FROM sys_order a WHERE a.out_trade_no = ? ORDER BY a.update_date DESC 
2019-07-11 09:39:31.634 DEBUG 4420 [nio-8980-exec-8] [c.j.modules.app.dao.OrderDao.findList  ] - ==> Parameters: 201907119392500001(String)
2019-07-11 09:39:31.659 DEBUG 4420 [nio-8980-exec-8] [c.j.modules.app.dao.OrderDao.findList  ] - <==      Total: 1
2019-07-11 09:39:31.660 DEBUG 4420 [nio-8980-exec-8] [c.j.c.m.m.provider.SelectSqlProvider   ] - 0毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", dd.id AS "userInfo.id", dd.mobile AS "userInfo.mobile", dd.password AS "userInfo.password", dd.icon AS "userInfo.icon", dd.regtime AS "userInfo.regtime", dd.lastlogin AS "userInfo.lastlogin", dd.islock AS "userInfo.islock", dd.isauthentication AS "userInfo.isauthentication", dd.type AS "userInfo.type", dd.create_by AS "userInfo.createBy", dd.create_date AS "userInfo.createDate", dd.update_by AS "userInfo.updateBy", dd.update_date AS "userInfo.updateDate", dd.remarks AS "userInfo.remarks", dd.del_flag AS "userInfo.delFlag", dd.nike_name AS "userInfo.nikeName", dd.is_invite AS "userInfo.isInvite", dd.third_id AS "userInfo.thirdId", dd.third_type AS "userInfo.thirdType", dd.third_icon AS "userInfo.thirdIcon", dd.member_lv AS "userInfo.memberLv", dd.member_flag AS "userInfo.memberFlag", dd.member_start AS "userInfo.memberStart", dd.member_end AS "userInfo.memberEnd", dd.invite_user_id AS "userInfo.inviteUserId", di.id AS "doctorInfos.id", di.doctorid AS "doctorInfos.doctorid", di.doctornum AS "doctorInfos.doctornum", di.name AS "doctorInfos.name", di.sex AS "doctorInfos.sex", di.age AS "doctorInfos.age", di.telephone AS "doctorInfos.telephone", di.idcard AS "doctorInfos.idcard", di.adress AS "doctorInfos.adress", di.technical AS "doctorInfos.technical", di.classify AS "doctorInfos.classify", di.introduce AS "doctorInfos.introduce", di.create_by AS "doctorInfos.createBy", di.cost AS "doctorInfos.cost", di.create_date AS "doctorInfos.createDate", di.update_by AS "doctorInfos.updateBy", di.update_date AS "doctorInfos.updateDate", di.remarks AS "doctorInfos.remarks", di.del_flag AS "doctorInfos.delFlag", di.cityid AS "doctorInfos.cityid", di.come_flag AS "doctorInfos.comeFlag", di.come_cost AS "doctorInfos.comeCost", di.own_flag AS "doctorInfos.ownFlag", di.first_count AS "doctorInfos.firstCount", di.star_lv AS "doctorInfos.starLv" FROM sys_tiaoli_order a LEFT JOIN sys_user_info dd ON a.userid = dd.id LEFT JOIN sys_doctor_info di ON a.docid = di.doctorid WHERE a.out_trade_no = #{sqlMap.where#out_trade_no#EQ1} ORDER BY a.create_date DESC
2019-07-11 09:39:31.661 DEBUG 4420 [nio-8980-exec-8] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@6109d880] will not be managed by Spring
2019-07-11 09:39:31.661 DEBUG 4420 [nio-8980-exec-8] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", dd.id AS "userInfo.id", dd.mobile AS "userInfo.mobile", dd.password AS "userInfo.password", dd.icon AS "userInfo.icon", dd.regtime AS "userInfo.regtime", dd.lastlogin AS "userInfo.lastlogin", dd.islock AS "userInfo.islock", dd.isauthentication AS "userInfo.isauthentication", dd.type AS "userInfo.type", dd.create_by AS "userInfo.createBy", dd.create_date AS "userInfo.createDate", dd.update_by AS "userInfo.updateBy", dd.update_date AS "userInfo.updateDate", dd.remarks AS "userInfo.remarks", dd.del_flag AS "userInfo.delFlag", dd.nike_name AS "userInfo.nikeName", dd.is_invite AS "userInfo.isInvite", dd.third_id AS "userInfo.thirdId", dd.third_type AS "userInfo.thirdType", dd.third_icon AS "userInfo.thirdIcon", dd.member_lv AS "userInfo.memberLv", dd.member_flag AS "userInfo.memberFlag", dd.member_start AS "userInfo.memberStart", dd.member_end AS "userInfo.memberEnd", dd.invite_user_id AS "userInfo.inviteUserId", di.id AS "doctorInfos.id", di.doctorid AS "doctorInfos.doctorid", di.doctornum AS "doctorInfos.doctornum", di.name AS "doctorInfos.name", di.sex AS "doctorInfos.sex", di.age AS "doctorInfos.age", di.telephone AS "doctorInfos.telephone", di.idcard AS "doctorInfos.idcard", di.adress AS "doctorInfos.adress", di.technical AS "doctorInfos.technical", di.classify AS "doctorInfos.classify", di.introduce AS "doctorInfos.introduce", di.create_by AS "doctorInfos.createBy", di.cost AS "doctorInfos.cost", di.create_date AS "doctorInfos.createDate", di.update_by AS "doctorInfos.updateBy", di.update_date AS "doctorInfos.updateDate", di.remarks AS "doctorInfos.remarks", di.del_flag AS "doctorInfos.delFlag", di.cityid AS "doctorInfos.cityid", di.come_flag AS "doctorInfos.comeFlag", di.come_cost AS "doctorInfos.comeCost", di.own_flag AS "doctorInfos.ownFlag", di.first_count AS "doctorInfos.firstCount", di.star_lv AS "doctorInfos.starLv" FROM sys_tiaoli_order a LEFT JOIN sys_user_info dd ON a.userid = dd.id LEFT JOIN sys_doctor_info di ON a.docid = di.doctorid WHERE a.out_trade_no = ? ORDER BY a.create_date DESC 
2019-07-11 09:39:31.662 DEBUG 4420 [nio-8980-exec-8] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - ==> Parameters: 201907119392500001(String)
2019-07-11 09:39:31.687 DEBUG 4420 [nio-8980-exec-8] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - <==      Total: 0
2019-07-11 09:39:31.689 DEBUG 4420 [nio-8980-exec-8] [c.j.c.m.m.provider.SelectSqlProvider   ] - 0毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", dd.id AS "userInfo.id", dd.mobile AS "userInfo.mobile", dd.password AS "userInfo.password", dd.icon AS "userInfo.icon", dd.regtime AS "userInfo.regtime", dd.lastlogin AS "userInfo.lastlogin", dd.islock AS "userInfo.islock", dd.isauthentication AS "userInfo.isauthentication", dd.type AS "userInfo.type", dd.create_by AS "userInfo.createBy", dd.create_date AS "userInfo.createDate", dd.update_by AS "userInfo.updateBy", dd.update_date AS "userInfo.updateDate", dd.remarks AS "userInfo.remarks", dd.del_flag AS "userInfo.delFlag", dd.nike_name AS "userInfo.nikeName", dd.is_invite AS "userInfo.isInvite", dd.third_id AS "userInfo.thirdId", dd.third_type AS "userInfo.thirdType", dd.third_icon AS "userInfo.thirdIcon", dd.member_lv AS "userInfo.memberLv", dd.member_flag AS "userInfo.memberFlag", dd.member_start AS "userInfo.memberStart", dd.member_end AS "userInfo.memberEnd", dd.invite_user_id AS "userInfo.inviteUserId", di.id AS "doctorInfos.id", di.doctorid AS "doctorInfos.doctorid", di.doctornum AS "doctorInfos.doctornum", di.name AS "doctorInfos.name", di.sex AS "doctorInfos.sex", di.age AS "doctorInfos.age", di.telephone AS "doctorInfos.telephone", di.idcard AS "doctorInfos.idcard", di.adress AS "doctorInfos.adress", di.technical AS "doctorInfos.technical", di.classify AS "doctorInfos.classify", di.introduce AS "doctorInfos.introduce", di.create_by AS "doctorInfos.createBy", di.cost AS "doctorInfos.cost", di.create_date AS "doctorInfos.createDate", di.update_by AS "doctorInfos.updateBy", di.update_date AS "doctorInfos.updateDate", di.remarks AS "doctorInfos.remarks", di.del_flag AS "doctorInfos.delFlag", di.cityid AS "doctorInfos.cityid", di.come_flag AS "doctorInfos.comeFlag", di.come_cost AS "doctorInfos.comeCost", di.own_flag AS "doctorInfos.ownFlag", di.first_count AS "doctorInfos.firstCount", di.star_lv AS "doctorInfos.starLv" FROM sys_tiaoli_order a LEFT JOIN sys_user_info dd ON a.userid = dd.id LEFT JOIN sys_doctor_info di ON a.docid = di.doctorid WHERE a.out_trade_no = #{sqlMap.where#out_trade_no#EQ1} ORDER BY a.create_date DESC
2019-07-11 09:39:31.690 DEBUG 4420 [nio-8980-exec-8] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@6109d880] will not be managed by Spring
2019-07-11 09:39:31.690 DEBUG 4420 [nio-8980-exec-8] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", dd.id AS "userInfo.id", dd.mobile AS "userInfo.mobile", dd.password AS "userInfo.password", dd.icon AS "userInfo.icon", dd.regtime AS "userInfo.regtime", dd.lastlogin AS "userInfo.lastlogin", dd.islock AS "userInfo.islock", dd.isauthentication AS "userInfo.isauthentication", dd.type AS "userInfo.type", dd.create_by AS "userInfo.createBy", dd.create_date AS "userInfo.createDate", dd.update_by AS "userInfo.updateBy", dd.update_date AS "userInfo.updateDate", dd.remarks AS "userInfo.remarks", dd.del_flag AS "userInfo.delFlag", dd.nike_name AS "userInfo.nikeName", dd.is_invite AS "userInfo.isInvite", dd.third_id AS "userInfo.thirdId", dd.third_type AS "userInfo.thirdType", dd.third_icon AS "userInfo.thirdIcon", dd.member_lv AS "userInfo.memberLv", dd.member_flag AS "userInfo.memberFlag", dd.member_start AS "userInfo.memberStart", dd.member_end AS "userInfo.memberEnd", dd.invite_user_id AS "userInfo.inviteUserId", di.id AS "doctorInfos.id", di.doctorid AS "doctorInfos.doctorid", di.doctornum AS "doctorInfos.doctornum", di.name AS "doctorInfos.name", di.sex AS "doctorInfos.sex", di.age AS "doctorInfos.age", di.telephone AS "doctorInfos.telephone", di.idcard AS "doctorInfos.idcard", di.adress AS "doctorInfos.adress", di.technical AS "doctorInfos.technical", di.classify AS "doctorInfos.classify", di.introduce AS "doctorInfos.introduce", di.create_by AS "doctorInfos.createBy", di.cost AS "doctorInfos.cost", di.create_date AS "doctorInfos.createDate", di.update_by AS "doctorInfos.updateBy", di.update_date AS "doctorInfos.updateDate", di.remarks AS "doctorInfos.remarks", di.del_flag AS "doctorInfos.delFlag", di.cityid AS "doctorInfos.cityid", di.come_flag AS "doctorInfos.comeFlag", di.come_cost AS "doctorInfos.comeCost", di.own_flag AS "doctorInfos.ownFlag", di.first_count AS "doctorInfos.firstCount", di.star_lv AS "doctorInfos.starLv" FROM sys_tiaoli_order a LEFT JOIN sys_user_info dd ON a.userid = dd.id LEFT JOIN sys_doctor_info di ON a.docid = di.doctorid WHERE a.out_trade_no = ? ORDER BY a.create_date DESC 
2019-07-11 09:39:31.691 DEBUG 4420 [nio-8980-exec-8] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - ==> Parameters: 201907119392500001(String)
2019-07-11 09:39:31.716 DEBUG 4420 [nio-8980-exec-8] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - <==      Total: 0
2019-07-11 09:39:31.717 DEBUG 4420 [nio-8980-exec-8] [c.j.c.m.m.provider.SelectSqlProvider   ] - 1毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.total_price AS "totalPrice", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag" FROM sys_member_order a WHERE a.out_trade_no = #{sqlMap.where#out_trade_no#EQ1} ORDER BY a.update_date DESC
2019-07-11 09:39:31.717 DEBUG 4420 [nio-8980-exec-8] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@6109d880] will not be managed by Spring
2019-07-11 09:39:31.717 DEBUG 4420 [nio-8980-exec-8] [c.j.m.app.dao.MemberOrderDao.findList  ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.total_price AS "totalPrice", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag" FROM sys_member_order a WHERE a.out_trade_no = ? ORDER BY a.update_date DESC 
2019-07-11 09:39:31.718 DEBUG 4420 [nio-8980-exec-8] [c.j.m.app.dao.MemberOrderDao.findList  ] - ==> Parameters: 201907119392500001(String)
2019-07-11 09:39:31.740 DEBUG 4420 [nio-8980-exec-8] [c.j.m.app.dao.MemberOrderDao.findList  ] - <==      Total: 0
2019-07-11 09:39:31.740 DEBUG 4420 [nio-8980-exec-8] [c.j.c.m.m.provider.SelectSqlProvider   ] - 0毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.total_price AS "totalPrice", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", a.doctor_user_id AS "doctorUserId" FROM sys_doctor_register_order a WHERE a.out_trade_no = #{sqlMap.where#out_trade_no#EQ1} ORDER BY a.update_date DESC
2019-07-11 09:39:31.741 DEBUG 4420 [nio-8980-exec-8] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@6109d880] will not be managed by Spring
2019-07-11 09:39:31.741 DEBUG 4420 [nio-8980-exec-8] [c.j.m.a.d.D.findList                   ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.total_price AS "totalPrice", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", a.doctor_user_id AS "doctorUserId" FROM sys_doctor_register_order a WHERE a.out_trade_no = ? ORDER BY a.update_date DESC 
2019-07-11 09:39:31.741 DEBUG 4420 [nio-8980-exec-8] [c.j.m.a.d.D.findList                   ] - ==> Parameters: 201907119392500001(String)
2019-07-11 09:39:31.764 DEBUG 4420 [nio-8980-exec-8] [c.j.m.a.d.D.findList                   ] - <==      Total: 0
2019-07-11 09:39:31.765 DEBUG 4420 [nio-8980-exec-8] [c.j.c.m.m.provider.SelectSqlProvider   ] - 0毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag" FROM sys_dashang_order a WHERE a.out_trade_no = #{sqlMap.where#out_trade_no#EQ1} ORDER BY a.update_date DESC
2019-07-11 09:39:31.766 DEBUG 4420 [nio-8980-exec-8] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@6109d880] will not be managed by Spring
2019-07-11 09:39:31.766 DEBUG 4420 [nio-8980-exec-8] [c.j.m.app.dao.DashangOrderDao.findList ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag" FROM sys_dashang_order a WHERE a.out_trade_no = ? ORDER BY a.update_date DESC 
2019-07-11 09:39:31.766 DEBUG 4420 [nio-8980-exec-8] [c.j.m.app.dao.DashangOrderDao.findList ] - ==> Parameters: 201907119392500001(String)
2019-07-11 09:39:31.789 DEBUG 4420 [nio-8980-exec-8] [c.j.m.app.dao.DashangOrderDao.findList ] - <==      Total: 0
2019-07-11 09:39:31.823 DEBUG 4420 [nio-8980-exec-8] [c.j.c.m.m.provider.UpdateSqlProvider   ] - 11毫秒: UPDATE sys_order SET `order_no` = #{orderNo}, `order_status` = #{orderStatus}, `product_count` = #{productCount}, `total_price` = #{totalPrice}, `logistics_price` = #{logisticsPrice}, `discount_price` = #{discountPrice}, `really_price` = #{reallyPrice}, `pay_channel` = #{payChannel}, `out_trade_no` = #{outTradeNo}, `update_by` = #{updateBy}, `pay_date` = #{payDate}, `user_id` = #{userId}, `del_flag` = #{delFlag}, `delivery_name` = #{deliveryName}, `delivery_address` = #{deliveryAddress}, `delivery_phone` = #{deliveryPhone}, `total_count` = #{totalCount} WHERE `id` = #{id}
2019-07-11 09:39:31.824 DEBUG 4420 [nio-8980-exec-8] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@6109d880] will be managed by Spring
2019-07-11 09:39:31.824 DEBUG 4420 [nio-8980-exec-8] [c.j.modules.app.dao.OrderDao.update    ] - ==>  Preparing: UPDATE sys_order SET `order_no` = ?, `order_status` = ?, `product_count` = ?, `total_price` = ?, `logistics_price` = ?, `discount_price` = ?, `really_price` = ?, `pay_channel` = ?, `out_trade_no` = ?, `update_by` = ?, `pay_date` = ?, `user_id` = ?, `del_flag` = ?, `delivery_name` = ?, `delivery_address` = ?, `delivery_phone` = ?, `total_count` = ? WHERE `id` = ? 
2019-07-11 09:39:31.825 DEBUG 4420 [nio-8980-exec-8] [c.j.modules.app.dao.OrderDao.update    ] - ==> Parameters: 071109392530901(String), 1(String), 1(String), 3900(String), 0(String), 0(String), 3900(String), 微信(String), 201907119392500001(String), system(String), 2019-07-11 09:39:31.79(Timestamp), 123(String), 0(String), 范耘诚123(String), 辽宁省铁西区铁西广场23(String), 15004001841(String), 13(String), 333(String)
2019-07-11 09:39:31.870 DEBUG 4420 [nio-8980-exec-8] [c.j.modules.app.dao.OrderDao.update    ] - <==    Updates: 1
2019-07-11 09:39:31.968 DEBUG 4420 [nio-8980-exec-8] [c.j.c.m.m.provider.SelectSqlProvider   ] - 1毫秒: SELECT a.id AS "id", a.user_id AS "userId", a.discount_price AS "discountPrice", a.create_date AS "createDate", a.update_date AS "updateDate", a.create_by AS "createBy", a.update_by AS "updateBy", a.remarks AS "remarks", dd.id AS "discountDetail.id", dd.discount_id AS "discountDetail.discountId", dd.remarks AS "discountDetail.remarks", dd.detail_price AS "discountDetail.detailPrice", dd.detail_state AS "discountDetail.detailState", dd.create_date AS "discountDetail.createDate", dd.update_date AS "discountDetail.updateDate", dd.create_by AS "discountDetail.createBy", dd.update_by AS "discountDetail.updateBy", dd.del_flag AS "discountDetail.delFlag" FROM sys_discount a LEFT JOIN sys_discount_detail dd ON a.id = dd.discount_id WHERE a.user_id = #{sqlMap.where#user_id#EQ1} ORDER BY a.update_date DESC
2019-07-11 09:39:31.968 DEBUG 4420 [nio-8980-exec-8] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@6109d880] will be managed by Spring
2019-07-11 09:39:31.968 DEBUG 4420 [nio-8980-exec-8] [c.j.m.app.dao.DiscountDao.findList     ] - ==>  Preparing: SELECT a.id AS "id", a.user_id AS "userId", a.discount_price AS "discountPrice", a.create_date AS "createDate", a.update_date AS "updateDate", a.create_by AS "createBy", a.update_by AS "updateBy", a.remarks AS "remarks", dd.id AS "discountDetail.id", dd.discount_id AS "discountDetail.discountId", dd.remarks AS "discountDetail.remarks", dd.detail_price AS "discountDetail.detailPrice", dd.detail_state AS "discountDetail.detailState", dd.create_date AS "discountDetail.createDate", dd.update_date AS "discountDetail.updateDate", dd.create_by AS "discountDetail.createBy", dd.update_by AS "discountDetail.updateBy", dd.del_flag AS "discountDetail.delFlag" FROM sys_discount a LEFT JOIN sys_discount_detail dd ON a.id = dd.discount_id WHERE a.user_id = ? ORDER BY a.update_date DESC 
2019-07-11 09:39:31.969 DEBUG 4420 [nio-8980-exec-8] [c.j.m.app.dao.DiscountDao.findList     ] - ==> Parameters: 123(String)
2019-07-11 09:39:31.993 DEBUG 4420 [nio-8980-exec-8] [c.j.m.app.dao.DiscountDao.findList     ] - <==      Total: 1
2019-07-11 09:39:31.994 DEBUG 4420 [nio-8980-exec-8] [c.j.c.m.m.provider.UpdateSqlProvider   ] - 1毫秒: UPDATE sys_discount SET `user_id` = #{userId}, `discount_price` = #{discountPrice}, `update_date` = #{updateDate}, `update_by` = #{updateBy}, `remarks` = #{remarks} WHERE `id` = #{id}
2019-07-11 09:39:31.995 DEBUG 4420 [nio-8980-exec-8] [c.j.modules.app.dao.DiscountDao.update ] - ==>  Preparing: UPDATE sys_discount SET `user_id` = ?, `discount_price` = ?, `update_date` = ?, `update_by` = ?, `remarks` = ? WHERE `id` = ? 
2019-07-11 09:39:31.995 DEBUG 4420 [nio-8980-exec-8] [c.j.modules.app.dao.DiscountDao.update ] - ==> Parameters: 123(String), 0(String), 2019-07-11 09:39:31.994(Timestamp), system(String), 备注(String), 1(String)
2019-07-11 09:39:32.041 DEBUG 4420 [nio-8980-exec-8] [c.j.modules.app.dao.DiscountDao.update ] - <==    Updates: 1
2019-07-11 09:39:59.034 DEBUG 4420 [nio-8980-exec-3] [c.j.c.m.m.provider.SelectSqlProvider   ] - 1毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.product_count AS "productCount", a.total_price AS "totalPrice", a.logistics_price AS "logisticsPrice", a.discount_price AS "discountPrice", a.really_price AS "reallyPrice", a.pay_channel AS "payChannel", a.out_trade_no AS "outTradeNo", a.create_date AS "createDate", a.update_date AS "updateDate", a.create_by AS "createBy", a.update_by AS "updateBy", a.pay_date AS "payDate", a.user_id AS "userId", a.address_id AS "addressId", a.logistics_id AS "logisticsId", a.delivery_date AS "deliveryDate", a.del_flag AS "delFlag", a.delivery_name AS "deliveryName", a.delivery_address AS "deliveryAddress", a.delivery_phone AS "deliveryPhone", a.total_count AS "totalCount", a.trade_no AS "tradeNo" FROM sys_order a WHERE a.order_no = #{sqlMap.where#order_no#EQ1} ORDER BY a.update_date DESC
2019-07-11 09:39:59.035 DEBUG 4420 [nio-8980-exec-3] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@6109d880] will not be managed by Spring
2019-07-11 09:39:59.035 DEBUG 4420 [nio-8980-exec-3] [c.j.modules.app.dao.OrderDao.findList  ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.product_count AS "productCount", a.total_price AS "totalPrice", a.logistics_price AS "logisticsPrice", a.discount_price AS "discountPrice", a.really_price AS "reallyPrice", a.pay_channel AS "payChannel", a.out_trade_no AS "outTradeNo", a.create_date AS "createDate", a.update_date AS "updateDate", a.create_by AS "createBy", a.update_by AS "updateBy", a.pay_date AS "payDate", a.user_id AS "userId", a.address_id AS "addressId", a.logistics_id AS "logisticsId", a.delivery_date AS "deliveryDate", a.del_flag AS "delFlag", a.delivery_name AS "deliveryName", a.delivery_address AS "deliveryAddress", a.delivery_phone AS "deliveryPhone", a.total_count AS "totalCount", a.trade_no AS "tradeNo" FROM sys_order a WHERE a.order_no = ? ORDER BY a.update_date DESC 
2019-07-11 09:39:59.035 DEBUG 4420 [nio-8980-exec-3] [c.j.modules.app.dao.OrderDao.findList  ] - ==> Parameters: 071109395871001(String)
2019-07-11 09:39:59.059 DEBUG 4420 [nio-8980-exec-3] [c.j.modules.app.dao.OrderDao.findList  ] - <==      Total: 1
2019-07-11 09:39:59.061 DEBUG 4420 [nio-8980-exec-3] [c.j.c.m.m.provider.SelectSqlProvider   ] - 1毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", dd.id AS "userInfo.id", dd.mobile AS "userInfo.mobile", dd.password AS "userInfo.password", dd.icon AS "userInfo.icon", dd.regtime AS "userInfo.regtime", dd.lastlogin AS "userInfo.lastlogin", dd.islock AS "userInfo.islock", dd.isauthentication AS "userInfo.isauthentication", dd.type AS "userInfo.type", dd.create_by AS "userInfo.createBy", dd.create_date AS "userInfo.createDate", dd.update_by AS "userInfo.updateBy", dd.update_date AS "userInfo.updateDate", dd.remarks AS "userInfo.remarks", dd.del_flag AS "userInfo.delFlag", dd.nike_name AS "userInfo.nikeName", dd.is_invite AS "userInfo.isInvite", dd.third_id AS "userInfo.thirdId", dd.third_type AS "userInfo.thirdType", dd.third_icon AS "userInfo.thirdIcon", dd.member_lv AS "userInfo.memberLv", dd.member_flag AS "userInfo.memberFlag", dd.member_start AS "userInfo.memberStart", dd.member_end AS "userInfo.memberEnd", dd.invite_user_id AS "userInfo.inviteUserId", di.id AS "doctorInfos.id", di.doctorid AS "doctorInfos.doctorid", di.doctornum AS "doctorInfos.doctornum", di.name AS "doctorInfos.name", di.sex AS "doctorInfos.sex", di.age AS "doctorInfos.age", di.telephone AS "doctorInfos.telephone", di.idcard AS "doctorInfos.idcard", di.adress AS "doctorInfos.adress", di.technical AS "doctorInfos.technical", di.classify AS "doctorInfos.classify", di.introduce AS "doctorInfos.introduce", di.create_by AS "doctorInfos.createBy", di.cost AS "doctorInfos.cost", di.create_date AS "doctorInfos.createDate", di.update_by AS "doctorInfos.updateBy", di.update_date AS "doctorInfos.updateDate", di.remarks AS "doctorInfos.remarks", di.del_flag AS "doctorInfos.delFlag", di.cityid AS "doctorInfos.cityid", di.come_flag AS "doctorInfos.comeFlag", di.come_cost AS "doctorInfos.comeCost", di.own_flag AS "doctorInfos.ownFlag", di.first_count AS "doctorInfos.firstCount", di.star_lv AS "doctorInfos.starLv" FROM sys_tiaoli_order a LEFT JOIN sys_user_info dd ON a.userid = dd.id LEFT JOIN sys_doctor_info di ON a.docid = di.doctorid WHERE a.order_no = #{sqlMap.where#order_no#EQ1} ORDER BY a.create_date DESC
2019-07-11 09:39:59.061 DEBUG 4420 [nio-8980-exec-3] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@6109d880] will not be managed by Spring
2019-07-11 09:39:59.062 DEBUG 4420 [nio-8980-exec-3] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", dd.id AS "userInfo.id", dd.mobile AS "userInfo.mobile", dd.password AS "userInfo.password", dd.icon AS "userInfo.icon", dd.regtime AS "userInfo.regtime", dd.lastlogin AS "userInfo.lastlogin", dd.islock AS "userInfo.islock", dd.isauthentication AS "userInfo.isauthentication", dd.type AS "userInfo.type", dd.create_by AS "userInfo.createBy", dd.create_date AS "userInfo.createDate", dd.update_by AS "userInfo.updateBy", dd.update_date AS "userInfo.updateDate", dd.remarks AS "userInfo.remarks", dd.del_flag AS "userInfo.delFlag", dd.nike_name AS "userInfo.nikeName", dd.is_invite AS "userInfo.isInvite", dd.third_id AS "userInfo.thirdId", dd.third_type AS "userInfo.thirdType", dd.third_icon AS "userInfo.thirdIcon", dd.member_lv AS "userInfo.memberLv", dd.member_flag AS "userInfo.memberFlag", dd.member_start AS "userInfo.memberStart", dd.member_end AS "userInfo.memberEnd", dd.invite_user_id AS "userInfo.inviteUserId", di.id AS "doctorInfos.id", di.doctorid AS "doctorInfos.doctorid", di.doctornum AS "doctorInfos.doctornum", di.name AS "doctorInfos.name", di.sex AS "doctorInfos.sex", di.age AS "doctorInfos.age", di.telephone AS "doctorInfos.telephone", di.idcard AS "doctorInfos.idcard", di.adress AS "doctorInfos.adress", di.technical AS "doctorInfos.technical", di.classify AS "doctorInfos.classify", di.introduce AS "doctorInfos.introduce", di.create_by AS "doctorInfos.createBy", di.cost AS "doctorInfos.cost", di.create_date AS "doctorInfos.createDate", di.update_by AS "doctorInfos.updateBy", di.update_date AS "doctorInfos.updateDate", di.remarks AS "doctorInfos.remarks", di.del_flag AS "doctorInfos.delFlag", di.cityid AS "doctorInfos.cityid", di.come_flag AS "doctorInfos.comeFlag", di.come_cost AS "doctorInfos.comeCost", di.own_flag AS "doctorInfos.ownFlag", di.first_count AS "doctorInfos.firstCount", di.star_lv AS "doctorInfos.starLv" FROM sys_tiaoli_order a LEFT JOIN sys_user_info dd ON a.userid = dd.id LEFT JOIN sys_doctor_info di ON a.docid = di.doctorid WHERE a.order_no = ? ORDER BY a.create_date DESC 
2019-07-11 09:39:59.062 DEBUG 4420 [nio-8980-exec-3] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - ==> Parameters: 071109395871001(String)
2019-07-11 09:39:59.088 DEBUG 4420 [nio-8980-exec-3] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - <==      Total: 0
2019-07-11 09:39:59.089 DEBUG 4420 [nio-8980-exec-3] [c.j.c.m.m.provider.SelectSqlProvider   ] - 1毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", dd.id AS "userInfo.id", dd.mobile AS "userInfo.mobile", dd.password AS "userInfo.password", dd.icon AS "userInfo.icon", dd.regtime AS "userInfo.regtime", dd.lastlogin AS "userInfo.lastlogin", dd.islock AS "userInfo.islock", dd.isauthentication AS "userInfo.isauthentication", dd.type AS "userInfo.type", dd.create_by AS "userInfo.createBy", dd.create_date AS "userInfo.createDate", dd.update_by AS "userInfo.updateBy", dd.update_date AS "userInfo.updateDate", dd.remarks AS "userInfo.remarks", dd.del_flag AS "userInfo.delFlag", dd.nike_name AS "userInfo.nikeName", dd.is_invite AS "userInfo.isInvite", dd.third_id AS "userInfo.thirdId", dd.third_type AS "userInfo.thirdType", dd.third_icon AS "userInfo.thirdIcon", dd.member_lv AS "userInfo.memberLv", dd.member_flag AS "userInfo.memberFlag", dd.member_start AS "userInfo.memberStart", dd.member_end AS "userInfo.memberEnd", dd.invite_user_id AS "userInfo.inviteUserId", di.id AS "doctorInfos.id", di.doctorid AS "doctorInfos.doctorid", di.doctornum AS "doctorInfos.doctornum", di.name AS "doctorInfos.name", di.sex AS "doctorInfos.sex", di.age AS "doctorInfos.age", di.telephone AS "doctorInfos.telephone", di.idcard AS "doctorInfos.idcard", di.adress AS "doctorInfos.adress", di.technical AS "doctorInfos.technical", di.classify AS "doctorInfos.classify", di.introduce AS "doctorInfos.introduce", di.create_by AS "doctorInfos.createBy", di.cost AS "doctorInfos.cost", di.create_date AS "doctorInfos.createDate", di.update_by AS "doctorInfos.updateBy", di.update_date AS "doctorInfos.updateDate", di.remarks AS "doctorInfos.remarks", di.del_flag AS "doctorInfos.delFlag", di.cityid AS "doctorInfos.cityid", di.come_flag AS "doctorInfos.comeFlag", di.come_cost AS "doctorInfos.comeCost", di.own_flag AS "doctorInfos.ownFlag", di.first_count AS "doctorInfos.firstCount", di.star_lv AS "doctorInfos.starLv" FROM sys_tiaoli_order a LEFT JOIN sys_user_info dd ON a.userid = dd.id LEFT JOIN sys_doctor_info di ON a.docid = di.doctorid WHERE a.order_no = #{sqlMap.where#order_no#EQ1} ORDER BY a.create_date DESC
2019-07-11 09:39:59.089 DEBUG 4420 [nio-8980-exec-3] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@6109d880] will not be managed by Spring
2019-07-11 09:39:59.090 DEBUG 4420 [nio-8980-exec-3] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", dd.id AS "userInfo.id", dd.mobile AS "userInfo.mobile", dd.password AS "userInfo.password", dd.icon AS "userInfo.icon", dd.regtime AS "userInfo.regtime", dd.lastlogin AS "userInfo.lastlogin", dd.islock AS "userInfo.islock", dd.isauthentication AS "userInfo.isauthentication", dd.type AS "userInfo.type", dd.create_by AS "userInfo.createBy", dd.create_date AS "userInfo.createDate", dd.update_by AS "userInfo.updateBy", dd.update_date AS "userInfo.updateDate", dd.remarks AS "userInfo.remarks", dd.del_flag AS "userInfo.delFlag", dd.nike_name AS "userInfo.nikeName", dd.is_invite AS "userInfo.isInvite", dd.third_id AS "userInfo.thirdId", dd.third_type AS "userInfo.thirdType", dd.third_icon AS "userInfo.thirdIcon", dd.member_lv AS "userInfo.memberLv", dd.member_flag AS "userInfo.memberFlag", dd.member_start AS "userInfo.memberStart", dd.member_end AS "userInfo.memberEnd", dd.invite_user_id AS "userInfo.inviteUserId", di.id AS "doctorInfos.id", di.doctorid AS "doctorInfos.doctorid", di.doctornum AS "doctorInfos.doctornum", di.name AS "doctorInfos.name", di.sex AS "doctorInfos.sex", di.age AS "doctorInfos.age", di.telephone AS "doctorInfos.telephone", di.idcard AS "doctorInfos.idcard", di.adress AS "doctorInfos.adress", di.technical AS "doctorInfos.technical", di.classify AS "doctorInfos.classify", di.introduce AS "doctorInfos.introduce", di.create_by AS "doctorInfos.createBy", di.cost AS "doctorInfos.cost", di.create_date AS "doctorInfos.createDate", di.update_by AS "doctorInfos.updateBy", di.update_date AS "doctorInfos.updateDate", di.remarks AS "doctorInfos.remarks", di.del_flag AS "doctorInfos.delFlag", di.cityid AS "doctorInfos.cityid", di.come_flag AS "doctorInfos.comeFlag", di.come_cost AS "doctorInfos.comeCost", di.own_flag AS "doctorInfos.ownFlag", di.first_count AS "doctorInfos.firstCount", di.star_lv AS "doctorInfos.starLv" FROM sys_tiaoli_order a LEFT JOIN sys_user_info dd ON a.userid = dd.id LEFT JOIN sys_doctor_info di ON a.docid = di.doctorid WHERE a.order_no = ? ORDER BY a.create_date DESC 
2019-07-11 09:39:59.090 DEBUG 4420 [nio-8980-exec-3] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - ==> Parameters: 071109395871001(String)
2019-07-11 09:39:59.117 DEBUG 4420 [nio-8980-exec-3] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - <==      Total: 0
2019-07-11 09:39:59.118 DEBUG 4420 [nio-8980-exec-3] [c.j.c.m.m.provider.SelectSqlProvider   ] - 0毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.total_price AS "totalPrice", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag" FROM sys_member_order a WHERE a.order_no = #{sqlMap.where#order_no#EQ1} ORDER BY a.update_date DESC
2019-07-11 09:39:59.118 DEBUG 4420 [nio-8980-exec-3] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@6109d880] will not be managed by Spring
2019-07-11 09:39:59.118 DEBUG 4420 [nio-8980-exec-3] [c.j.m.app.dao.MemberOrderDao.findList  ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.total_price AS "totalPrice", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag" FROM sys_member_order a WHERE a.order_no = ? ORDER BY a.update_date DESC 
2019-07-11 09:39:59.119 DEBUG 4420 [nio-8980-exec-3] [c.j.m.app.dao.MemberOrderDao.findList  ] - ==> Parameters: 071109395871001(String)
2019-07-11 09:39:59.142 DEBUG 4420 [nio-8980-exec-3] [c.j.m.app.dao.MemberOrderDao.findList  ] - <==      Total: 0
2019-07-11 09:39:59.143 DEBUG 4420 [nio-8980-exec-3] [c.j.c.m.m.provider.SelectSqlProvider   ] - 0毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.total_price AS "totalPrice", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", a.doctor_user_id AS "doctorUserId" FROM sys_doctor_register_order a WHERE a.order_no = #{sqlMap.where#order_no#EQ1} ORDER BY a.update_date DESC
2019-07-11 09:39:59.144 DEBUG 4420 [nio-8980-exec-3] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@6109d880] will not be managed by Spring
2019-07-11 09:39:59.144 DEBUG 4420 [nio-8980-exec-3] [c.j.m.a.d.D.findList                   ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.total_price AS "totalPrice", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", a.doctor_user_id AS "doctorUserId" FROM sys_doctor_register_order a WHERE a.order_no = ? ORDER BY a.update_date DESC 
2019-07-11 09:39:59.145 DEBUG 4420 [nio-8980-exec-3] [c.j.m.a.d.D.findList                   ] - ==> Parameters: 071109395871001(String)
2019-07-11 09:39:59.168 DEBUG 4420 [nio-8980-exec-3] [c.j.m.a.d.D.findList                   ] - <==      Total: 0
2019-07-11 09:39:59.169 DEBUG 4420 [nio-8980-exec-3] [c.j.c.m.m.provider.SelectSqlProvider   ] - 1毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag" FROM sys_dashang_order a WHERE a.order_no = #{sqlMap.where#order_no#EQ1} ORDER BY a.update_date DESC
2019-07-11 09:39:59.169 DEBUG 4420 [nio-8980-exec-3] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@6109d880] will not be managed by Spring
2019-07-11 09:39:59.169 DEBUG 4420 [nio-8980-exec-3] [c.j.m.app.dao.DashangOrderDao.findList ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag" FROM sys_dashang_order a WHERE a.order_no = ? ORDER BY a.update_date DESC 
2019-07-11 09:39:59.170 DEBUG 4420 [nio-8980-exec-3] [c.j.m.app.dao.DashangOrderDao.findList ] - ==> Parameters: 071109395871001(String)
2019-07-11 09:39:59.193 DEBUG 4420 [nio-8980-exec-3] [c.j.m.app.dao.DashangOrderDao.findList ] - <==      Total: 0
2019-07-11 09:39:59.223 DEBUG 4420 [nio-8980-exec-3] [c.j.c.m.m.provider.UpdateSqlProvider   ] - 6毫秒: UPDATE sys_order SET `order_no` = #{orderNo}, `order_status` = #{orderStatus}, `product_count` = #{productCount}, `total_price` = #{totalPrice}, `logistics_price` = #{logisticsPrice}, `discount_price` = #{discountPrice}, `really_price` = #{reallyPrice}, `pay_channel` = #{payChannel}, `out_trade_no` = #{outTradeNo}, `update_by` = #{updateBy}, `user_id` = #{userId}, `del_flag` = #{delFlag}, `delivery_name` = #{deliveryName}, `delivery_address` = #{deliveryAddress}, `delivery_phone` = #{deliveryPhone}, `total_count` = #{totalCount} WHERE `id` = #{id}
2019-07-11 09:39:59.223 DEBUG 4420 [nio-8980-exec-3] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@6109d880] will be managed by Spring
2019-07-11 09:39:59.223 DEBUG 4420 [nio-8980-exec-3] [c.j.modules.app.dao.OrderDao.update    ] - ==>  Preparing: UPDATE sys_order SET `order_no` = ?, `order_status` = ?, `product_count` = ?, `total_price` = ?, `logistics_price` = ?, `discount_price` = ?, `really_price` = ?, `pay_channel` = ?, `out_trade_no` = ?, `update_by` = ?, `user_id` = ?, `del_flag` = ?, `delivery_name` = ?, `delivery_address` = ?, `delivery_phone` = ?, `total_count` = ? WHERE `id` = ? 
2019-07-11 09:39:59.224 DEBUG 4420 [nio-8980-exec-3] [c.j.modules.app.dao.OrderDao.update    ] - ==> Parameters: 071109395871001(String), 0(String), 1(String), 3000(String), 0(String), 0(String), 3000(String), null(String), 201907119395800002(String), system(String), 123(String), 0(String), 范耘诚123(String), 辽宁省铁西区铁西广场23(String), 15004001841(String), 6(String), 334(String)
2019-07-11 09:39:59.269 DEBUG 4420 [nio-8980-exec-3] [c.j.modules.app.dao.OrderDao.update    ] - <==    Updates: 1
2019-07-11 09:40:05.575 DEBUG 4420 [nio-8980-exec-1] [c.j.c.m.m.provider.SelectSqlProvider   ] - 1毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.product_count AS "productCount", a.total_price AS "totalPrice", a.logistics_price AS "logisticsPrice", a.discount_price AS "discountPrice", a.really_price AS "reallyPrice", a.pay_channel AS "payChannel", a.out_trade_no AS "outTradeNo", a.create_date AS "createDate", a.update_date AS "updateDate", a.create_by AS "createBy", a.update_by AS "updateBy", a.pay_date AS "payDate", a.user_id AS "userId", a.address_id AS "addressId", a.logistics_id AS "logisticsId", a.delivery_date AS "deliveryDate", a.del_flag AS "delFlag", a.delivery_name AS "deliveryName", a.delivery_address AS "deliveryAddress", a.delivery_phone AS "deliveryPhone", a.total_count AS "totalCount", a.trade_no AS "tradeNo" FROM sys_order a WHERE a.out_trade_no = #{sqlMap.where#out_trade_no#EQ1} ORDER BY a.update_date DESC
2019-07-11 09:40:05.576 DEBUG 4420 [nio-8980-exec-1] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@6109d880] will not be managed by Spring
2019-07-11 09:40:05.576 DEBUG 4420 [nio-8980-exec-1] [c.j.modules.app.dao.OrderDao.findList  ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.product_count AS "productCount", a.total_price AS "totalPrice", a.logistics_price AS "logisticsPrice", a.discount_price AS "discountPrice", a.really_price AS "reallyPrice", a.pay_channel AS "payChannel", a.out_trade_no AS "outTradeNo", a.create_date AS "createDate", a.update_date AS "updateDate", a.create_by AS "createBy", a.update_by AS "updateBy", a.pay_date AS "payDate", a.user_id AS "userId", a.address_id AS "addressId", a.logistics_id AS "logisticsId", a.delivery_date AS "deliveryDate", a.del_flag AS "delFlag", a.delivery_name AS "deliveryName", a.delivery_address AS "deliveryAddress", a.delivery_phone AS "deliveryPhone", a.total_count AS "totalCount", a.trade_no AS "tradeNo" FROM sys_order a WHERE a.out_trade_no = ? ORDER BY a.update_date DESC 
2019-07-11 09:40:05.576 DEBUG 4420 [nio-8980-exec-1] [c.j.modules.app.dao.OrderDao.findList  ] - ==> Parameters: 201907119395800002(String)
2019-07-11 09:40:05.601 DEBUG 4420 [nio-8980-exec-1] [c.j.modules.app.dao.OrderDao.findList  ] - <==      Total: 1
2019-07-11 09:40:05.602 DEBUG 4420 [nio-8980-exec-1] [c.j.c.m.m.provider.SelectSqlProvider   ] - 1毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", dd.id AS "userInfo.id", dd.mobile AS "userInfo.mobile", dd.password AS "userInfo.password", dd.icon AS "userInfo.icon", dd.regtime AS "userInfo.regtime", dd.lastlogin AS "userInfo.lastlogin", dd.islock AS "userInfo.islock", dd.isauthentication AS "userInfo.isauthentication", dd.type AS "userInfo.type", dd.create_by AS "userInfo.createBy", dd.create_date AS "userInfo.createDate", dd.update_by AS "userInfo.updateBy", dd.update_date AS "userInfo.updateDate", dd.remarks AS "userInfo.remarks", dd.del_flag AS "userInfo.delFlag", dd.nike_name AS "userInfo.nikeName", dd.is_invite AS "userInfo.isInvite", dd.third_id AS "userInfo.thirdId", dd.third_type AS "userInfo.thirdType", dd.third_icon AS "userInfo.thirdIcon", dd.member_lv AS "userInfo.memberLv", dd.member_flag AS "userInfo.memberFlag", dd.member_start AS "userInfo.memberStart", dd.member_end AS "userInfo.memberEnd", dd.invite_user_id AS "userInfo.inviteUserId", di.id AS "doctorInfos.id", di.doctorid AS "doctorInfos.doctorid", di.doctornum AS "doctorInfos.doctornum", di.name AS "doctorInfos.name", di.sex AS "doctorInfos.sex", di.age AS "doctorInfos.age", di.telephone AS "doctorInfos.telephone", di.idcard AS "doctorInfos.idcard", di.adress AS "doctorInfos.adress", di.technical AS "doctorInfos.technical", di.classify AS "doctorInfos.classify", di.introduce AS "doctorInfos.introduce", di.create_by AS "doctorInfos.createBy", di.cost AS "doctorInfos.cost", di.create_date AS "doctorInfos.createDate", di.update_by AS "doctorInfos.updateBy", di.update_date AS "doctorInfos.updateDate", di.remarks AS "doctorInfos.remarks", di.del_flag AS "doctorInfos.delFlag", di.cityid AS "doctorInfos.cityid", di.come_flag AS "doctorInfos.comeFlag", di.come_cost AS "doctorInfos.comeCost", di.own_flag AS "doctorInfos.ownFlag", di.first_count AS "doctorInfos.firstCount", di.star_lv AS "doctorInfos.starLv" FROM sys_tiaoli_order a LEFT JOIN sys_user_info dd ON a.userid = dd.id LEFT JOIN sys_doctor_info di ON a.docid = di.doctorid WHERE a.out_trade_no = #{sqlMap.where#out_trade_no#EQ1} ORDER BY a.create_date DESC
2019-07-11 09:40:05.602 DEBUG 4420 [nio-8980-exec-1] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@6109d880] will not be managed by Spring
2019-07-11 09:40:05.602 DEBUG 4420 [nio-8980-exec-1] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", dd.id AS "userInfo.id", dd.mobile AS "userInfo.mobile", dd.password AS "userInfo.password", dd.icon AS "userInfo.icon", dd.regtime AS "userInfo.regtime", dd.lastlogin AS "userInfo.lastlogin", dd.islock AS "userInfo.islock", dd.isauthentication AS "userInfo.isauthentication", dd.type AS "userInfo.type", dd.create_by AS "userInfo.createBy", dd.create_date AS "userInfo.createDate", dd.update_by AS "userInfo.updateBy", dd.update_date AS "userInfo.updateDate", dd.remarks AS "userInfo.remarks", dd.del_flag AS "userInfo.delFlag", dd.nike_name AS "userInfo.nikeName", dd.is_invite AS "userInfo.isInvite", dd.third_id AS "userInfo.thirdId", dd.third_type AS "userInfo.thirdType", dd.third_icon AS "userInfo.thirdIcon", dd.member_lv AS "userInfo.memberLv", dd.member_flag AS "userInfo.memberFlag", dd.member_start AS "userInfo.memberStart", dd.member_end AS "userInfo.memberEnd", dd.invite_user_id AS "userInfo.inviteUserId", di.id AS "doctorInfos.id", di.doctorid AS "doctorInfos.doctorid", di.doctornum AS "doctorInfos.doctornum", di.name AS "doctorInfos.name", di.sex AS "doctorInfos.sex", di.age AS "doctorInfos.age", di.telephone AS "doctorInfos.telephone", di.idcard AS "doctorInfos.idcard", di.adress AS "doctorInfos.adress", di.technical AS "doctorInfos.technical", di.classify AS "doctorInfos.classify", di.introduce AS "doctorInfos.introduce", di.create_by AS "doctorInfos.createBy", di.cost AS "doctorInfos.cost", di.create_date AS "doctorInfos.createDate", di.update_by AS "doctorInfos.updateBy", di.update_date AS "doctorInfos.updateDate", di.remarks AS "doctorInfos.remarks", di.del_flag AS "doctorInfos.delFlag", di.cityid AS "doctorInfos.cityid", di.come_flag AS "doctorInfos.comeFlag", di.come_cost AS "doctorInfos.comeCost", di.own_flag AS "doctorInfos.ownFlag", di.first_count AS "doctorInfos.firstCount", di.star_lv AS "doctorInfos.starLv" FROM sys_tiaoli_order a LEFT JOIN sys_user_info dd ON a.userid = dd.id LEFT JOIN sys_doctor_info di ON a.docid = di.doctorid WHERE a.out_trade_no = ? ORDER BY a.create_date DESC 
2019-07-11 09:40:05.603 DEBUG 4420 [nio-8980-exec-1] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - ==> Parameters: 201907119395800002(String)
2019-07-11 09:40:05.629 DEBUG 4420 [nio-8980-exec-1] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - <==      Total: 0
2019-07-11 09:40:05.630 DEBUG 4420 [nio-8980-exec-1] [c.j.c.m.m.provider.SelectSqlProvider   ] - 1毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", dd.id AS "userInfo.id", dd.mobile AS "userInfo.mobile", dd.password AS "userInfo.password", dd.icon AS "userInfo.icon", dd.regtime AS "userInfo.regtime", dd.lastlogin AS "userInfo.lastlogin", dd.islock AS "userInfo.islock", dd.isauthentication AS "userInfo.isauthentication", dd.type AS "userInfo.type", dd.create_by AS "userInfo.createBy", dd.create_date AS "userInfo.createDate", dd.update_by AS "userInfo.updateBy", dd.update_date AS "userInfo.updateDate", dd.remarks AS "userInfo.remarks", dd.del_flag AS "userInfo.delFlag", dd.nike_name AS "userInfo.nikeName", dd.is_invite AS "userInfo.isInvite", dd.third_id AS "userInfo.thirdId", dd.third_type AS "userInfo.thirdType", dd.third_icon AS "userInfo.thirdIcon", dd.member_lv AS "userInfo.memberLv", dd.member_flag AS "userInfo.memberFlag", dd.member_start AS "userInfo.memberStart", dd.member_end AS "userInfo.memberEnd", dd.invite_user_id AS "userInfo.inviteUserId", di.id AS "doctorInfos.id", di.doctorid AS "doctorInfos.doctorid", di.doctornum AS "doctorInfos.doctornum", di.name AS "doctorInfos.name", di.sex AS "doctorInfos.sex", di.age AS "doctorInfos.age", di.telephone AS "doctorInfos.telephone", di.idcard AS "doctorInfos.idcard", di.adress AS "doctorInfos.adress", di.technical AS "doctorInfos.technical", di.classify AS "doctorInfos.classify", di.introduce AS "doctorInfos.introduce", di.create_by AS "doctorInfos.createBy", di.cost AS "doctorInfos.cost", di.create_date AS "doctorInfos.createDate", di.update_by AS "doctorInfos.updateBy", di.update_date AS "doctorInfos.updateDate", di.remarks AS "doctorInfos.remarks", di.del_flag AS "doctorInfos.delFlag", di.cityid AS "doctorInfos.cityid", di.come_flag AS "doctorInfos.comeFlag", di.come_cost AS "doctorInfos.comeCost", di.own_flag AS "doctorInfos.ownFlag", di.first_count AS "doctorInfos.firstCount", di.star_lv AS "doctorInfos.starLv" FROM sys_tiaoli_order a LEFT JOIN sys_user_info dd ON a.userid = dd.id LEFT JOIN sys_doctor_info di ON a.docid = di.doctorid WHERE a.out_trade_no = #{sqlMap.where#out_trade_no#EQ1} ORDER BY a.create_date DESC
2019-07-11 09:40:05.630 DEBUG 4420 [nio-8980-exec-1] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@6109d880] will not be managed by Spring
2019-07-11 09:40:05.631 DEBUG 4420 [nio-8980-exec-1] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", dd.id AS "userInfo.id", dd.mobile AS "userInfo.mobile", dd.password AS "userInfo.password", dd.icon AS "userInfo.icon", dd.regtime AS "userInfo.regtime", dd.lastlogin AS "userInfo.lastlogin", dd.islock AS "userInfo.islock", dd.isauthentication AS "userInfo.isauthentication", dd.type AS "userInfo.type", dd.create_by AS "userInfo.createBy", dd.create_date AS "userInfo.createDate", dd.update_by AS "userInfo.updateBy", dd.update_date AS "userInfo.updateDate", dd.remarks AS "userInfo.remarks", dd.del_flag AS "userInfo.delFlag", dd.nike_name AS "userInfo.nikeName", dd.is_invite AS "userInfo.isInvite", dd.third_id AS "userInfo.thirdId", dd.third_type AS "userInfo.thirdType", dd.third_icon AS "userInfo.thirdIcon", dd.member_lv AS "userInfo.memberLv", dd.member_flag AS "userInfo.memberFlag", dd.member_start AS "userInfo.memberStart", dd.member_end AS "userInfo.memberEnd", dd.invite_user_id AS "userInfo.inviteUserId", di.id AS "doctorInfos.id", di.doctorid AS "doctorInfos.doctorid", di.doctornum AS "doctorInfos.doctornum", di.name AS "doctorInfos.name", di.sex AS "doctorInfos.sex", di.age AS "doctorInfos.age", di.telephone AS "doctorInfos.telephone", di.idcard AS "doctorInfos.idcard", di.adress AS "doctorInfos.adress", di.technical AS "doctorInfos.technical", di.classify AS "doctorInfos.classify", di.introduce AS "doctorInfos.introduce", di.create_by AS "doctorInfos.createBy", di.cost AS "doctorInfos.cost", di.create_date AS "doctorInfos.createDate", di.update_by AS "doctorInfos.updateBy", di.update_date AS "doctorInfos.updateDate", di.remarks AS "doctorInfos.remarks", di.del_flag AS "doctorInfos.delFlag", di.cityid AS "doctorInfos.cityid", di.come_flag AS "doctorInfos.comeFlag", di.come_cost AS "doctorInfos.comeCost", di.own_flag AS "doctorInfos.ownFlag", di.first_count AS "doctorInfos.firstCount", di.star_lv AS "doctorInfos.starLv" FROM sys_tiaoli_order a LEFT JOIN sys_user_info dd ON a.userid = dd.id LEFT JOIN sys_doctor_info di ON a.docid = di.doctorid WHERE a.out_trade_no = ? ORDER BY a.create_date DESC 
2019-07-11 09:40:05.631 DEBUG 4420 [nio-8980-exec-1] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - ==> Parameters: 201907119395800002(String)
2019-07-11 09:40:05.657 DEBUG 4420 [nio-8980-exec-1] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - <==      Total: 0
2019-07-11 09:40:05.657 DEBUG 4420 [nio-8980-exec-1] [c.j.c.m.m.provider.SelectSqlProvider   ] - 0毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.total_price AS "totalPrice", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag" FROM sys_member_order a WHERE a.out_trade_no = #{sqlMap.where#out_trade_no#EQ1} ORDER BY a.update_date DESC
2019-07-11 09:40:05.658 DEBUG 4420 [nio-8980-exec-1] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@6109d880] will not be managed by Spring
2019-07-11 09:40:05.658 DEBUG 4420 [nio-8980-exec-1] [c.j.m.app.dao.MemberOrderDao.findList  ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.total_price AS "totalPrice", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag" FROM sys_member_order a WHERE a.out_trade_no = ? ORDER BY a.update_date DESC 
2019-07-11 09:40:05.658 DEBUG 4420 [nio-8980-exec-1] [c.j.m.app.dao.MemberOrderDao.findList  ] - ==> Parameters: 201907119395800002(String)
2019-07-11 09:40:05.682 DEBUG 4420 [nio-8980-exec-1] [c.j.m.app.dao.MemberOrderDao.findList  ] - <==      Total: 0
2019-07-11 09:40:05.682 DEBUG 4420 [nio-8980-exec-1] [c.j.c.m.m.provider.SelectSqlProvider   ] - 0毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.total_price AS "totalPrice", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", a.doctor_user_id AS "doctorUserId" FROM sys_doctor_register_order a WHERE a.out_trade_no = #{sqlMap.where#out_trade_no#EQ1} ORDER BY a.update_date DESC
2019-07-11 09:40:05.683 DEBUG 4420 [nio-8980-exec-1] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@6109d880] will not be managed by Spring
2019-07-11 09:40:05.684 DEBUG 4420 [nio-8980-exec-1] [c.j.m.a.d.D.findList                   ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.total_price AS "totalPrice", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", a.doctor_user_id AS "doctorUserId" FROM sys_doctor_register_order a WHERE a.out_trade_no = ? ORDER BY a.update_date DESC 
2019-07-11 09:40:05.684 DEBUG 4420 [nio-8980-exec-1] [c.j.m.a.d.D.findList                   ] - ==> Parameters: 201907119395800002(String)
2019-07-11 09:40:05.707 DEBUG 4420 [nio-8980-exec-1] [c.j.m.a.d.D.findList                   ] - <==      Total: 0
2019-07-11 09:40:05.708 DEBUG 4420 [nio-8980-exec-1] [c.j.c.m.m.provider.SelectSqlProvider   ] - 1毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag" FROM sys_dashang_order a WHERE a.out_trade_no = #{sqlMap.where#out_trade_no#EQ1} ORDER BY a.update_date DESC
2019-07-11 09:40:05.708 DEBUG 4420 [nio-8980-exec-1] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@6109d880] will not be managed by Spring
2019-07-11 09:40:05.708 DEBUG 4420 [nio-8980-exec-1] [c.j.m.app.dao.DashangOrderDao.findList ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag" FROM sys_dashang_order a WHERE a.out_trade_no = ? ORDER BY a.update_date DESC 
2019-07-11 09:40:05.709 DEBUG 4420 [nio-8980-exec-1] [c.j.m.app.dao.DashangOrderDao.findList ] - ==> Parameters: 201907119395800002(String)
2019-07-11 09:40:05.732 DEBUG 4420 [nio-8980-exec-1] [c.j.m.app.dao.DashangOrderDao.findList ] - <==      Total: 0
2019-07-11 09:40:05.765 DEBUG 4420 [nio-8980-exec-1] [c.j.c.m.m.provider.UpdateSqlProvider   ] - 10毫秒: UPDATE sys_order SET `order_no` = #{orderNo}, `order_status` = #{orderStatus}, `product_count` = #{productCount}, `total_price` = #{totalPrice}, `logistics_price` = #{logisticsPrice}, `discount_price` = #{discountPrice}, `really_price` = #{reallyPrice}, `pay_channel` = #{payChannel}, `out_trade_no` = #{outTradeNo}, `update_by` = #{updateBy}, `pay_date` = #{payDate}, `user_id` = #{userId}, `del_flag` = #{delFlag}, `delivery_name` = #{deliveryName}, `delivery_address` = #{deliveryAddress}, `delivery_phone` = #{deliveryPhone}, `total_count` = #{totalCount} WHERE `id` = #{id}
2019-07-11 09:40:05.765 DEBUG 4420 [nio-8980-exec-1] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@6109d880] will be managed by Spring
2019-07-11 09:40:05.766 DEBUG 4420 [nio-8980-exec-1] [c.j.modules.app.dao.OrderDao.update    ] - ==>  Preparing: UPDATE sys_order SET `order_no` = ?, `order_status` = ?, `product_count` = ?, `total_price` = ?, `logistics_price` = ?, `discount_price` = ?, `really_price` = ?, `pay_channel` = ?, `out_trade_no` = ?, `update_by` = ?, `pay_date` = ?, `user_id` = ?, `del_flag` = ?, `delivery_name` = ?, `delivery_address` = ?, `delivery_phone` = ?, `total_count` = ? WHERE `id` = ? 
2019-07-11 09:40:05.766 DEBUG 4420 [nio-8980-exec-1] [c.j.modules.app.dao.OrderDao.update    ] - ==> Parameters: 071109395871001(String), 1(String), 1(String), 3000(String), 0(String), 0(String), 3000(String), 微信(String), 201907119395800002(String), system(String), 2019-07-11 09:40:05.732(Timestamp), 123(String), 0(String), 范耘诚123(String), 辽宁省铁西区铁西广场23(String), 15004001841(String), 6(String), 334(String)
2019-07-11 09:40:05.811 DEBUG 4420 [nio-8980-exec-1] [c.j.modules.app.dao.OrderDao.update    ] - <==    Updates: 1
2019-07-11 09:40:05.902 DEBUG 4420 [nio-8980-exec-1] [c.j.c.m.m.provider.SelectSqlProvider   ] - 0毫秒: SELECT a.id AS "id", a.user_id AS "userId", a.discount_price AS "discountPrice", a.create_date AS "createDate", a.update_date AS "updateDate", a.create_by AS "createBy", a.update_by AS "updateBy", a.remarks AS "remarks", dd.id AS "discountDetail.id", dd.discount_id AS "discountDetail.discountId", dd.remarks AS "discountDetail.remarks", dd.detail_price AS "discountDetail.detailPrice", dd.detail_state AS "discountDetail.detailState", dd.create_date AS "discountDetail.createDate", dd.update_date AS "discountDetail.updateDate", dd.create_by AS "discountDetail.createBy", dd.update_by AS "discountDetail.updateBy", dd.del_flag AS "discountDetail.delFlag" FROM sys_discount a LEFT JOIN sys_discount_detail dd ON a.id = dd.discount_id WHERE a.user_id = #{sqlMap.where#user_id#EQ1} ORDER BY a.update_date DESC
2019-07-11 09:40:05.903 DEBUG 4420 [nio-8980-exec-1] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@6109d880] will be managed by Spring
2019-07-11 09:40:05.903 DEBUG 4420 [nio-8980-exec-1] [c.j.m.app.dao.DiscountDao.findList     ] - ==>  Preparing: SELECT a.id AS "id", a.user_id AS "userId", a.discount_price AS "discountPrice", a.create_date AS "createDate", a.update_date AS "updateDate", a.create_by AS "createBy", a.update_by AS "updateBy", a.remarks AS "remarks", dd.id AS "discountDetail.id", dd.discount_id AS "discountDetail.discountId", dd.remarks AS "discountDetail.remarks", dd.detail_price AS "discountDetail.detailPrice", dd.detail_state AS "discountDetail.detailState", dd.create_date AS "discountDetail.createDate", dd.update_date AS "discountDetail.updateDate", dd.create_by AS "discountDetail.createBy", dd.update_by AS "discountDetail.updateBy", dd.del_flag AS "discountDetail.delFlag" FROM sys_discount a LEFT JOIN sys_discount_detail dd ON a.id = dd.discount_id WHERE a.user_id = ? ORDER BY a.update_date DESC 
2019-07-11 09:40:05.903 DEBUG 4420 [nio-8980-exec-1] [c.j.m.app.dao.DiscountDao.findList     ] - ==> Parameters: 123(String)
2019-07-11 09:40:05.928 DEBUG 4420 [nio-8980-exec-1] [c.j.m.app.dao.DiscountDao.findList     ] - <==      Total: 1
2019-07-11 09:40:05.929 DEBUG 4420 [nio-8980-exec-1] [c.j.c.m.m.provider.UpdateSqlProvider   ] - 0毫秒: UPDATE sys_discount SET `user_id` = #{userId}, `discount_price` = #{discountPrice}, `update_date` = #{updateDate}, `update_by` = #{updateBy}, `remarks` = #{remarks} WHERE `id` = #{id}
2019-07-11 09:40:05.930 DEBUG 4420 [nio-8980-exec-1] [c.j.modules.app.dao.DiscountDao.update ] - ==>  Preparing: UPDATE sys_discount SET `user_id` = ?, `discount_price` = ?, `update_date` = ?, `update_by` = ?, `remarks` = ? WHERE `id` = ? 
2019-07-11 09:40:05.931 DEBUG 4420 [nio-8980-exec-1] [c.j.modules.app.dao.DiscountDao.update ] - ==> Parameters: 123(String), 0(String), 2019-07-11 09:40:05.929(Timestamp), system(String), 备注(String), 1(String)
2019-07-11 09:40:05.977 DEBUG 4420 [nio-8980-exec-1] [c.j.modules.app.dao.DiscountDao.update ] - <==    Updates: 1
2019-07-11 09:40:14.472 DEBUG 4420 [nio-8980-exec-4] [c.j.c.m.m.provider.SelectSqlProvider   ] - 1毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.product_count AS "productCount", a.total_price AS "totalPrice", a.logistics_price AS "logisticsPrice", a.discount_price AS "discountPrice", a.really_price AS "reallyPrice", a.pay_channel AS "payChannel", a.out_trade_no AS "outTradeNo", a.create_date AS "createDate", a.update_date AS "updateDate", a.create_by AS "createBy", a.update_by AS "updateBy", a.pay_date AS "payDate", a.user_id AS "userId", a.address_id AS "addressId", a.logistics_id AS "logisticsId", a.delivery_date AS "deliveryDate", a.del_flag AS "delFlag", a.delivery_name AS "deliveryName", a.delivery_address AS "deliveryAddress", a.delivery_phone AS "deliveryPhone", a.total_count AS "totalCount", a.trade_no AS "tradeNo" FROM sys_order a WHERE a.order_no = #{sqlMap.where#order_no#EQ1} ORDER BY a.update_date DESC
2019-07-11 09:40:14.472 DEBUG 4420 [nio-8980-exec-4] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@6109d880] will not be managed by Spring
2019-07-11 09:40:14.472 DEBUG 4420 [nio-8980-exec-4] [c.j.modules.app.dao.OrderDao.findList  ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.product_count AS "productCount", a.total_price AS "totalPrice", a.logistics_price AS "logisticsPrice", a.discount_price AS "discountPrice", a.really_price AS "reallyPrice", a.pay_channel AS "payChannel", a.out_trade_no AS "outTradeNo", a.create_date AS "createDate", a.update_date AS "updateDate", a.create_by AS "createBy", a.update_by AS "updateBy", a.pay_date AS "payDate", a.user_id AS "userId", a.address_id AS "addressId", a.logistics_id AS "logisticsId", a.delivery_date AS "deliveryDate", a.del_flag AS "delFlag", a.delivery_name AS "deliveryName", a.delivery_address AS "deliveryAddress", a.delivery_phone AS "deliveryPhone", a.total_count AS "totalCount", a.trade_no AS "tradeNo" FROM sys_order a WHERE a.order_no = ? ORDER BY a.update_date DESC 
2019-07-11 09:40:14.473 DEBUG 4420 [nio-8980-exec-4] [c.j.modules.app.dao.OrderDao.findList  ] - ==> Parameters: 071109401422701(String)
2019-07-11 09:40:14.498 DEBUG 4420 [nio-8980-exec-4] [c.j.modules.app.dao.OrderDao.findList  ] - <==      Total: 1
2019-07-11 09:40:14.498 DEBUG 4420 [nio-8980-exec-4] [c.j.c.m.m.provider.SelectSqlProvider   ] - 0毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", dd.id AS "userInfo.id", dd.mobile AS "userInfo.mobile", dd.password AS "userInfo.password", dd.icon AS "userInfo.icon", dd.regtime AS "userInfo.regtime", dd.lastlogin AS "userInfo.lastlogin", dd.islock AS "userInfo.islock", dd.isauthentication AS "userInfo.isauthentication", dd.type AS "userInfo.type", dd.create_by AS "userInfo.createBy", dd.create_date AS "userInfo.createDate", dd.update_by AS "userInfo.updateBy", dd.update_date AS "userInfo.updateDate", dd.remarks AS "userInfo.remarks", dd.del_flag AS "userInfo.delFlag", dd.nike_name AS "userInfo.nikeName", dd.is_invite AS "userInfo.isInvite", dd.third_id AS "userInfo.thirdId", dd.third_type AS "userInfo.thirdType", dd.third_icon AS "userInfo.thirdIcon", dd.member_lv AS "userInfo.memberLv", dd.member_flag AS "userInfo.memberFlag", dd.member_start AS "userInfo.memberStart", dd.member_end AS "userInfo.memberEnd", dd.invite_user_id AS "userInfo.inviteUserId", di.id AS "doctorInfos.id", di.doctorid AS "doctorInfos.doctorid", di.doctornum AS "doctorInfos.doctornum", di.name AS "doctorInfos.name", di.sex AS "doctorInfos.sex", di.age AS "doctorInfos.age", di.telephone AS "doctorInfos.telephone", di.idcard AS "doctorInfos.idcard", di.adress AS "doctorInfos.adress", di.technical AS "doctorInfos.technical", di.classify AS "doctorInfos.classify", di.introduce AS "doctorInfos.introduce", di.create_by AS "doctorInfos.createBy", di.cost AS "doctorInfos.cost", di.create_date AS "doctorInfos.createDate", di.update_by AS "doctorInfos.updateBy", di.update_date AS "doctorInfos.updateDate", di.remarks AS "doctorInfos.remarks", di.del_flag AS "doctorInfos.delFlag", di.cityid AS "doctorInfos.cityid", di.come_flag AS "doctorInfos.comeFlag", di.come_cost AS "doctorInfos.comeCost", di.own_flag AS "doctorInfos.ownFlag", di.first_count AS "doctorInfos.firstCount", di.star_lv AS "doctorInfos.starLv" FROM sys_tiaoli_order a LEFT JOIN sys_user_info dd ON a.userid = dd.id LEFT JOIN sys_doctor_info di ON a.docid = di.doctorid WHERE a.order_no = #{sqlMap.where#order_no#EQ1} ORDER BY a.create_date DESC
2019-07-11 09:40:14.499 DEBUG 4420 [nio-8980-exec-4] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@6109d880] will not be managed by Spring
2019-07-11 09:40:14.499 DEBUG 4420 [nio-8980-exec-4] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", dd.id AS "userInfo.id", dd.mobile AS "userInfo.mobile", dd.password AS "userInfo.password", dd.icon AS "userInfo.icon", dd.regtime AS "userInfo.regtime", dd.lastlogin AS "userInfo.lastlogin", dd.islock AS "userInfo.islock", dd.isauthentication AS "userInfo.isauthentication", dd.type AS "userInfo.type", dd.create_by AS "userInfo.createBy", dd.create_date AS "userInfo.createDate", dd.update_by AS "userInfo.updateBy", dd.update_date AS "userInfo.updateDate", dd.remarks AS "userInfo.remarks", dd.del_flag AS "userInfo.delFlag", dd.nike_name AS "userInfo.nikeName", dd.is_invite AS "userInfo.isInvite", dd.third_id AS "userInfo.thirdId", dd.third_type AS "userInfo.thirdType", dd.third_icon AS "userInfo.thirdIcon", dd.member_lv AS "userInfo.memberLv", dd.member_flag AS "userInfo.memberFlag", dd.member_start AS "userInfo.memberStart", dd.member_end AS "userInfo.memberEnd", dd.invite_user_id AS "userInfo.inviteUserId", di.id AS "doctorInfos.id", di.doctorid AS "doctorInfos.doctorid", di.doctornum AS "doctorInfos.doctornum", di.name AS "doctorInfos.name", di.sex AS "doctorInfos.sex", di.age AS "doctorInfos.age", di.telephone AS "doctorInfos.telephone", di.idcard AS "doctorInfos.idcard", di.adress AS "doctorInfos.adress", di.technical AS "doctorInfos.technical", di.classify AS "doctorInfos.classify", di.introduce AS "doctorInfos.introduce", di.create_by AS "doctorInfos.createBy", di.cost AS "doctorInfos.cost", di.create_date AS "doctorInfos.createDate", di.update_by AS "doctorInfos.updateBy", di.update_date AS "doctorInfos.updateDate", di.remarks AS "doctorInfos.remarks", di.del_flag AS "doctorInfos.delFlag", di.cityid AS "doctorInfos.cityid", di.come_flag AS "doctorInfos.comeFlag", di.come_cost AS "doctorInfos.comeCost", di.own_flag AS "doctorInfos.ownFlag", di.first_count AS "doctorInfos.firstCount", di.star_lv AS "doctorInfos.starLv" FROM sys_tiaoli_order a LEFT JOIN sys_user_info dd ON a.userid = dd.id LEFT JOIN sys_doctor_info di ON a.docid = di.doctorid WHERE a.order_no = ? ORDER BY a.create_date DESC 
2019-07-11 09:40:14.500 DEBUG 4420 [nio-8980-exec-4] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - ==> Parameters: 071109401422701(String)
2019-07-11 09:40:14.525 DEBUG 4420 [nio-8980-exec-4] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - <==      Total: 0
2019-07-11 09:40:14.527 DEBUG 4420 [nio-8980-exec-4] [c.j.c.m.m.provider.SelectSqlProvider   ] - 1毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", dd.id AS "userInfo.id", dd.mobile AS "userInfo.mobile", dd.password AS "userInfo.password", dd.icon AS "userInfo.icon", dd.regtime AS "userInfo.regtime", dd.lastlogin AS "userInfo.lastlogin", dd.islock AS "userInfo.islock", dd.isauthentication AS "userInfo.isauthentication", dd.type AS "userInfo.type", dd.create_by AS "userInfo.createBy", dd.create_date AS "userInfo.createDate", dd.update_by AS "userInfo.updateBy", dd.update_date AS "userInfo.updateDate", dd.remarks AS "userInfo.remarks", dd.del_flag AS "userInfo.delFlag", dd.nike_name AS "userInfo.nikeName", dd.is_invite AS "userInfo.isInvite", dd.third_id AS "userInfo.thirdId", dd.third_type AS "userInfo.thirdType", dd.third_icon AS "userInfo.thirdIcon", dd.member_lv AS "userInfo.memberLv", dd.member_flag AS "userInfo.memberFlag", dd.member_start AS "userInfo.memberStart", dd.member_end AS "userInfo.memberEnd", dd.invite_user_id AS "userInfo.inviteUserId", di.id AS "doctorInfos.id", di.doctorid AS "doctorInfos.doctorid", di.doctornum AS "doctorInfos.doctornum", di.name AS "doctorInfos.name", di.sex AS "doctorInfos.sex", di.age AS "doctorInfos.age", di.telephone AS "doctorInfos.telephone", di.idcard AS "doctorInfos.idcard", di.adress AS "doctorInfos.adress", di.technical AS "doctorInfos.technical", di.classify AS "doctorInfos.classify", di.introduce AS "doctorInfos.introduce", di.create_by AS "doctorInfos.createBy", di.cost AS "doctorInfos.cost", di.create_date AS "doctorInfos.createDate", di.update_by AS "doctorInfos.updateBy", di.update_date AS "doctorInfos.updateDate", di.remarks AS "doctorInfos.remarks", di.del_flag AS "doctorInfos.delFlag", di.cityid AS "doctorInfos.cityid", di.come_flag AS "doctorInfos.comeFlag", di.come_cost AS "doctorInfos.comeCost", di.own_flag AS "doctorInfos.ownFlag", di.first_count AS "doctorInfos.firstCount", di.star_lv AS "doctorInfos.starLv" FROM sys_tiaoli_order a LEFT JOIN sys_user_info dd ON a.userid = dd.id LEFT JOIN sys_doctor_info di ON a.docid = di.doctorid WHERE a.order_no = #{sqlMap.where#order_no#EQ1} ORDER BY a.create_date DESC
2019-07-11 09:40:14.527 DEBUG 4420 [nio-8980-exec-4] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@6109d880] will not be managed by Spring
2019-07-11 09:40:14.528 DEBUG 4420 [nio-8980-exec-4] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", dd.id AS "userInfo.id", dd.mobile AS "userInfo.mobile", dd.password AS "userInfo.password", dd.icon AS "userInfo.icon", dd.regtime AS "userInfo.regtime", dd.lastlogin AS "userInfo.lastlogin", dd.islock AS "userInfo.islock", dd.isauthentication AS "userInfo.isauthentication", dd.type AS "userInfo.type", dd.create_by AS "userInfo.createBy", dd.create_date AS "userInfo.createDate", dd.update_by AS "userInfo.updateBy", dd.update_date AS "userInfo.updateDate", dd.remarks AS "userInfo.remarks", dd.del_flag AS "userInfo.delFlag", dd.nike_name AS "userInfo.nikeName", dd.is_invite AS "userInfo.isInvite", dd.third_id AS "userInfo.thirdId", dd.third_type AS "userInfo.thirdType", dd.third_icon AS "userInfo.thirdIcon", dd.member_lv AS "userInfo.memberLv", dd.member_flag AS "userInfo.memberFlag", dd.member_start AS "userInfo.memberStart", dd.member_end AS "userInfo.memberEnd", dd.invite_user_id AS "userInfo.inviteUserId", di.id AS "doctorInfos.id", di.doctorid AS "doctorInfos.doctorid", di.doctornum AS "doctorInfos.doctornum", di.name AS "doctorInfos.name", di.sex AS "doctorInfos.sex", di.age AS "doctorInfos.age", di.telephone AS "doctorInfos.telephone", di.idcard AS "doctorInfos.idcard", di.adress AS "doctorInfos.adress", di.technical AS "doctorInfos.technical", di.classify AS "doctorInfos.classify", di.introduce AS "doctorInfos.introduce", di.create_by AS "doctorInfos.createBy", di.cost AS "doctorInfos.cost", di.create_date AS "doctorInfos.createDate", di.update_by AS "doctorInfos.updateBy", di.update_date AS "doctorInfos.updateDate", di.remarks AS "doctorInfos.remarks", di.del_flag AS "doctorInfos.delFlag", di.cityid AS "doctorInfos.cityid", di.come_flag AS "doctorInfos.comeFlag", di.come_cost AS "doctorInfos.comeCost", di.own_flag AS "doctorInfos.ownFlag", di.first_count AS "doctorInfos.firstCount", di.star_lv AS "doctorInfos.starLv" FROM sys_tiaoli_order a LEFT JOIN sys_user_info dd ON a.userid = dd.id LEFT JOIN sys_doctor_info di ON a.docid = di.doctorid WHERE a.order_no = ? ORDER BY a.create_date DESC 
2019-07-11 09:40:14.529 DEBUG 4420 [nio-8980-exec-4] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - ==> Parameters: 071109401422701(String)
2019-07-11 09:40:14.554 DEBUG 4420 [nio-8980-exec-4] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - <==      Total: 0
2019-07-11 09:40:14.555 DEBUG 4420 [nio-8980-exec-4] [c.j.c.m.m.provider.SelectSqlProvider   ] - 1毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.total_price AS "totalPrice", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag" FROM sys_member_order a WHERE a.order_no = #{sqlMap.where#order_no#EQ1} ORDER BY a.update_date DESC
2019-07-11 09:40:14.555 DEBUG 4420 [nio-8980-exec-4] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@6109d880] will not be managed by Spring
2019-07-11 09:40:14.555 DEBUG 4420 [nio-8980-exec-4] [c.j.m.app.dao.MemberOrderDao.findList  ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.total_price AS "totalPrice", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag" FROM sys_member_order a WHERE a.order_no = ? ORDER BY a.update_date DESC 
2019-07-11 09:40:14.555 DEBUG 4420 [nio-8980-exec-4] [c.j.m.app.dao.MemberOrderDao.findList  ] - ==> Parameters: 071109401422701(String)
2019-07-11 09:40:14.579 DEBUG 4420 [nio-8980-exec-4] [c.j.m.app.dao.MemberOrderDao.findList  ] - <==      Total: 0
2019-07-11 09:40:14.579 DEBUG 4420 [nio-8980-exec-4] [c.j.c.m.m.provider.SelectSqlProvider   ] - 0毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.total_price AS "totalPrice", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", a.doctor_user_id AS "doctorUserId" FROM sys_doctor_register_order a WHERE a.order_no = #{sqlMap.where#order_no#EQ1} ORDER BY a.update_date DESC
2019-07-11 09:40:14.580 DEBUG 4420 [nio-8980-exec-4] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@6109d880] will not be managed by Spring
2019-07-11 09:40:14.580 DEBUG 4420 [nio-8980-exec-4] [c.j.m.a.d.D.findList                   ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.total_price AS "totalPrice", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", a.doctor_user_id AS "doctorUserId" FROM sys_doctor_register_order a WHERE a.order_no = ? ORDER BY a.update_date DESC 
2019-07-11 09:40:14.580 DEBUG 4420 [nio-8980-exec-4] [c.j.m.a.d.D.findList                   ] - ==> Parameters: 071109401422701(String)
2019-07-11 09:40:14.603 DEBUG 4420 [nio-8980-exec-4] [c.j.m.a.d.D.findList                   ] - <==      Total: 0
2019-07-11 09:40:14.604 DEBUG 4420 [nio-8980-exec-4] [c.j.c.m.m.provider.SelectSqlProvider   ] - 0毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag" FROM sys_dashang_order a WHERE a.order_no = #{sqlMap.where#order_no#EQ1} ORDER BY a.update_date DESC
2019-07-11 09:40:14.604 DEBUG 4420 [nio-8980-exec-4] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@6109d880] will not be managed by Spring
2019-07-11 09:40:14.604 DEBUG 4420 [nio-8980-exec-4] [c.j.m.app.dao.DashangOrderDao.findList ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag" FROM sys_dashang_order a WHERE a.order_no = ? ORDER BY a.update_date DESC 
2019-07-11 09:40:14.605 DEBUG 4420 [nio-8980-exec-4] [c.j.m.app.dao.DashangOrderDao.findList ] - ==> Parameters: 071109401422701(String)
2019-07-11 09:40:14.628 DEBUG 4420 [nio-8980-exec-4] [c.j.m.app.dao.DashangOrderDao.findList ] - <==      Total: 0
2019-07-11 09:40:14.651 DEBUG 4420 [nio-8980-exec-4] [c.j.c.m.m.provider.UpdateSqlProvider   ] - 0毫秒: UPDATE sys_order SET `order_no` = #{orderNo}, `order_status` = #{orderStatus}, `product_count` = #{productCount}, `total_price` = #{totalPrice}, `logistics_price` = #{logisticsPrice}, `discount_price` = #{discountPrice}, `really_price` = #{reallyPrice}, `pay_channel` = #{payChannel}, `out_trade_no` = #{outTradeNo}, `update_by` = #{updateBy}, `user_id` = #{userId}, `del_flag` = #{delFlag}, `delivery_name` = #{deliveryName}, `delivery_address` = #{deliveryAddress}, `delivery_phone` = #{deliveryPhone}, `total_count` = #{totalCount} WHERE `id` = #{id}
2019-07-11 09:40:14.651 DEBUG 4420 [nio-8980-exec-4] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@6109d880] will be managed by Spring
2019-07-11 09:40:14.652 DEBUG 4420 [nio-8980-exec-4] [c.j.modules.app.dao.OrderDao.update    ] - ==>  Preparing: UPDATE sys_order SET `order_no` = ?, `order_status` = ?, `product_count` = ?, `total_price` = ?, `logistics_price` = ?, `discount_price` = ?, `really_price` = ?, `pay_channel` = ?, `out_trade_no` = ?, `update_by` = ?, `user_id` = ?, `del_flag` = ?, `delivery_name` = ?, `delivery_address` = ?, `delivery_phone` = ?, `total_count` = ? WHERE `id` = ? 
2019-07-11 09:40:14.652 DEBUG 4420 [nio-8980-exec-4] [c.j.modules.app.dao.OrderDao.update    ] - ==> Parameters: 071109401422701(String), 0(String), 1(String), 3000(String), 0(String), 0(String), 3000(String), null(String), 201907119401400003(String), system(String), 123(String), 0(String), 范耘诚123(String), 辽宁省铁西区铁西广场23(String), 15004001841(String), 6(String), 335(String)
2019-07-11 09:40:14.697 DEBUG 4420 [nio-8980-exec-4] [c.j.modules.app.dao.OrderDao.update    ] - <==    Updates: 1
2019-07-11 09:40:19.222 DEBUG 4420 [nio-8980-exec-5] [c.j.c.m.m.provider.SelectSqlProvider   ] - 1毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.product_count AS "productCount", a.total_price AS "totalPrice", a.logistics_price AS "logisticsPrice", a.discount_price AS "discountPrice", a.really_price AS "reallyPrice", a.pay_channel AS "payChannel", a.out_trade_no AS "outTradeNo", a.create_date AS "createDate", a.update_date AS "updateDate", a.create_by AS "createBy", a.update_by AS "updateBy", a.pay_date AS "payDate", a.user_id AS "userId", a.address_id AS "addressId", a.logistics_id AS "logisticsId", a.delivery_date AS "deliveryDate", a.del_flag AS "delFlag", a.delivery_name AS "deliveryName", a.delivery_address AS "deliveryAddress", a.delivery_phone AS "deliveryPhone", a.total_count AS "totalCount", a.trade_no AS "tradeNo" FROM sys_order a WHERE a.out_trade_no = #{sqlMap.where#out_trade_no#EQ1} ORDER BY a.update_date DESC
2019-07-11 09:40:19.223 DEBUG 4420 [nio-8980-exec-5] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@6109d880] will not be managed by Spring
2019-07-11 09:40:19.223 DEBUG 4420 [nio-8980-exec-5] [c.j.modules.app.dao.OrderDao.findList  ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.product_count AS "productCount", a.total_price AS "totalPrice", a.logistics_price AS "logisticsPrice", a.discount_price AS "discountPrice", a.really_price AS "reallyPrice", a.pay_channel AS "payChannel", a.out_trade_no AS "outTradeNo", a.create_date AS "createDate", a.update_date AS "updateDate", a.create_by AS "createBy", a.update_by AS "updateBy", a.pay_date AS "payDate", a.user_id AS "userId", a.address_id AS "addressId", a.logistics_id AS "logisticsId", a.delivery_date AS "deliveryDate", a.del_flag AS "delFlag", a.delivery_name AS "deliveryName", a.delivery_address AS "deliveryAddress", a.delivery_phone AS "deliveryPhone", a.total_count AS "totalCount", a.trade_no AS "tradeNo" FROM sys_order a WHERE a.out_trade_no = ? ORDER BY a.update_date DESC 
2019-07-11 09:40:19.224 DEBUG 4420 [nio-8980-exec-5] [c.j.modules.app.dao.OrderDao.findList  ] - ==> Parameters: 201907119401400003(String)
2019-07-11 09:40:19.248 DEBUG 4420 [nio-8980-exec-5] [c.j.modules.app.dao.OrderDao.findList  ] - <==      Total: 1
2019-07-11 09:40:19.249 DEBUG 4420 [nio-8980-exec-5] [c.j.c.m.m.provider.SelectSqlProvider   ] - 0毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", dd.id AS "userInfo.id", dd.mobile AS "userInfo.mobile", dd.password AS "userInfo.password", dd.icon AS "userInfo.icon", dd.regtime AS "userInfo.regtime", dd.lastlogin AS "userInfo.lastlogin", dd.islock AS "userInfo.islock", dd.isauthentication AS "userInfo.isauthentication", dd.type AS "userInfo.type", dd.create_by AS "userInfo.createBy", dd.create_date AS "userInfo.createDate", dd.update_by AS "userInfo.updateBy", dd.update_date AS "userInfo.updateDate", dd.remarks AS "userInfo.remarks", dd.del_flag AS "userInfo.delFlag", dd.nike_name AS "userInfo.nikeName", dd.is_invite AS "userInfo.isInvite", dd.third_id AS "userInfo.thirdId", dd.third_type AS "userInfo.thirdType", dd.third_icon AS "userInfo.thirdIcon", dd.member_lv AS "userInfo.memberLv", dd.member_flag AS "userInfo.memberFlag", dd.member_start AS "userInfo.memberStart", dd.member_end AS "userInfo.memberEnd", dd.invite_user_id AS "userInfo.inviteUserId", di.id AS "doctorInfos.id", di.doctorid AS "doctorInfos.doctorid", di.doctornum AS "doctorInfos.doctornum", di.name AS "doctorInfos.name", di.sex AS "doctorInfos.sex", di.age AS "doctorInfos.age", di.telephone AS "doctorInfos.telephone", di.idcard AS "doctorInfos.idcard", di.adress AS "doctorInfos.adress", di.technical AS "doctorInfos.technical", di.classify AS "doctorInfos.classify", di.introduce AS "doctorInfos.introduce", di.create_by AS "doctorInfos.createBy", di.cost AS "doctorInfos.cost", di.create_date AS "doctorInfos.createDate", di.update_by AS "doctorInfos.updateBy", di.update_date AS "doctorInfos.updateDate", di.remarks AS "doctorInfos.remarks", di.del_flag AS "doctorInfos.delFlag", di.cityid AS "doctorInfos.cityid", di.come_flag AS "doctorInfos.comeFlag", di.come_cost AS "doctorInfos.comeCost", di.own_flag AS "doctorInfos.ownFlag", di.first_count AS "doctorInfos.firstCount", di.star_lv AS "doctorInfos.starLv" FROM sys_tiaoli_order a LEFT JOIN sys_user_info dd ON a.userid = dd.id LEFT JOIN sys_doctor_info di ON a.docid = di.doctorid WHERE a.out_trade_no = #{sqlMap.where#out_trade_no#EQ1} ORDER BY a.create_date DESC
2019-07-11 09:40:19.250 DEBUG 4420 [nio-8980-exec-5] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@6109d880] will not be managed by Spring
2019-07-11 09:40:19.250 DEBUG 4420 [nio-8980-exec-5] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", dd.id AS "userInfo.id", dd.mobile AS "userInfo.mobile", dd.password AS "userInfo.password", dd.icon AS "userInfo.icon", dd.regtime AS "userInfo.regtime", dd.lastlogin AS "userInfo.lastlogin", dd.islock AS "userInfo.islock", dd.isauthentication AS "userInfo.isauthentication", dd.type AS "userInfo.type", dd.create_by AS "userInfo.createBy", dd.create_date AS "userInfo.createDate", dd.update_by AS "userInfo.updateBy", dd.update_date AS "userInfo.updateDate", dd.remarks AS "userInfo.remarks", dd.del_flag AS "userInfo.delFlag", dd.nike_name AS "userInfo.nikeName", dd.is_invite AS "userInfo.isInvite", dd.third_id AS "userInfo.thirdId", dd.third_type AS "userInfo.thirdType", dd.third_icon AS "userInfo.thirdIcon", dd.member_lv AS "userInfo.memberLv", dd.member_flag AS "userInfo.memberFlag", dd.member_start AS "userInfo.memberStart", dd.member_end AS "userInfo.memberEnd", dd.invite_user_id AS "userInfo.inviteUserId", di.id AS "doctorInfos.id", di.doctorid AS "doctorInfos.doctorid", di.doctornum AS "doctorInfos.doctornum", di.name AS "doctorInfos.name", di.sex AS "doctorInfos.sex", di.age AS "doctorInfos.age", di.telephone AS "doctorInfos.telephone", di.idcard AS "doctorInfos.idcard", di.adress AS "doctorInfos.adress", di.technical AS "doctorInfos.technical", di.classify AS "doctorInfos.classify", di.introduce AS "doctorInfos.introduce", di.create_by AS "doctorInfos.createBy", di.cost AS "doctorInfos.cost", di.create_date AS "doctorInfos.createDate", di.update_by AS "doctorInfos.updateBy", di.update_date AS "doctorInfos.updateDate", di.remarks AS "doctorInfos.remarks", di.del_flag AS "doctorInfos.delFlag", di.cityid AS "doctorInfos.cityid", di.come_flag AS "doctorInfos.comeFlag", di.come_cost AS "doctorInfos.comeCost", di.own_flag AS "doctorInfos.ownFlag", di.first_count AS "doctorInfos.firstCount", di.star_lv AS "doctorInfos.starLv" FROM sys_tiaoli_order a LEFT JOIN sys_user_info dd ON a.userid = dd.id LEFT JOIN sys_doctor_info di ON a.docid = di.doctorid WHERE a.out_trade_no = ? ORDER BY a.create_date DESC 
2019-07-11 09:40:19.251 DEBUG 4420 [nio-8980-exec-5] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - ==> Parameters: 201907119401400003(String)
2019-07-11 09:40:19.275 DEBUG 4420 [nio-8980-exec-5] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - <==      Total: 0
2019-07-11 09:40:19.277 DEBUG 4420 [nio-8980-exec-5] [c.j.c.m.m.provider.SelectSqlProvider   ] - 1毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", dd.id AS "userInfo.id", dd.mobile AS "userInfo.mobile", dd.password AS "userInfo.password", dd.icon AS "userInfo.icon", dd.regtime AS "userInfo.regtime", dd.lastlogin AS "userInfo.lastlogin", dd.islock AS "userInfo.islock", dd.isauthentication AS "userInfo.isauthentication", dd.type AS "userInfo.type", dd.create_by AS "userInfo.createBy", dd.create_date AS "userInfo.createDate", dd.update_by AS "userInfo.updateBy", dd.update_date AS "userInfo.updateDate", dd.remarks AS "userInfo.remarks", dd.del_flag AS "userInfo.delFlag", dd.nike_name AS "userInfo.nikeName", dd.is_invite AS "userInfo.isInvite", dd.third_id AS "userInfo.thirdId", dd.third_type AS "userInfo.thirdType", dd.third_icon AS "userInfo.thirdIcon", dd.member_lv AS "userInfo.memberLv", dd.member_flag AS "userInfo.memberFlag", dd.member_start AS "userInfo.memberStart", dd.member_end AS "userInfo.memberEnd", dd.invite_user_id AS "userInfo.inviteUserId", di.id AS "doctorInfos.id", di.doctorid AS "doctorInfos.doctorid", di.doctornum AS "doctorInfos.doctornum", di.name AS "doctorInfos.name", di.sex AS "doctorInfos.sex", di.age AS "doctorInfos.age", di.telephone AS "doctorInfos.telephone", di.idcard AS "doctorInfos.idcard", di.adress AS "doctorInfos.adress", di.technical AS "doctorInfos.technical", di.classify AS "doctorInfos.classify", di.introduce AS "doctorInfos.introduce", di.create_by AS "doctorInfos.createBy", di.cost AS "doctorInfos.cost", di.create_date AS "doctorInfos.createDate", di.update_by AS "doctorInfos.updateBy", di.update_date AS "doctorInfos.updateDate", di.remarks AS "doctorInfos.remarks", di.del_flag AS "doctorInfos.delFlag", di.cityid AS "doctorInfos.cityid", di.come_flag AS "doctorInfos.comeFlag", di.come_cost AS "doctorInfos.comeCost", di.own_flag AS "doctorInfos.ownFlag", di.first_count AS "doctorInfos.firstCount", di.star_lv AS "doctorInfos.starLv" FROM sys_tiaoli_order a LEFT JOIN sys_user_info dd ON a.userid = dd.id LEFT JOIN sys_doctor_info di ON a.docid = di.doctorid WHERE a.out_trade_no = #{sqlMap.where#out_trade_no#EQ1} ORDER BY a.create_date DESC
2019-07-11 09:40:19.278 DEBUG 4420 [nio-8980-exec-5] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@6109d880] will not be managed by Spring
2019-07-11 09:40:19.278 DEBUG 4420 [nio-8980-exec-5] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", dd.id AS "userInfo.id", dd.mobile AS "userInfo.mobile", dd.password AS "userInfo.password", dd.icon AS "userInfo.icon", dd.regtime AS "userInfo.regtime", dd.lastlogin AS "userInfo.lastlogin", dd.islock AS "userInfo.islock", dd.isauthentication AS "userInfo.isauthentication", dd.type AS "userInfo.type", dd.create_by AS "userInfo.createBy", dd.create_date AS "userInfo.createDate", dd.update_by AS "userInfo.updateBy", dd.update_date AS "userInfo.updateDate", dd.remarks AS "userInfo.remarks", dd.del_flag AS "userInfo.delFlag", dd.nike_name AS "userInfo.nikeName", dd.is_invite AS "userInfo.isInvite", dd.third_id AS "userInfo.thirdId", dd.third_type AS "userInfo.thirdType", dd.third_icon AS "userInfo.thirdIcon", dd.member_lv AS "userInfo.memberLv", dd.member_flag AS "userInfo.memberFlag", dd.member_start AS "userInfo.memberStart", dd.member_end AS "userInfo.memberEnd", dd.invite_user_id AS "userInfo.inviteUserId", di.id AS "doctorInfos.id", di.doctorid AS "doctorInfos.doctorid", di.doctornum AS "doctorInfos.doctornum", di.name AS "doctorInfos.name", di.sex AS "doctorInfos.sex", di.age AS "doctorInfos.age", di.telephone AS "doctorInfos.telephone", di.idcard AS "doctorInfos.idcard", di.adress AS "doctorInfos.adress", di.technical AS "doctorInfos.technical", di.classify AS "doctorInfos.classify", di.introduce AS "doctorInfos.introduce", di.create_by AS "doctorInfos.createBy", di.cost AS "doctorInfos.cost", di.create_date AS "doctorInfos.createDate", di.update_by AS "doctorInfos.updateBy", di.update_date AS "doctorInfos.updateDate", di.remarks AS "doctorInfos.remarks", di.del_flag AS "doctorInfos.delFlag", di.cityid AS "doctorInfos.cityid", di.come_flag AS "doctorInfos.comeFlag", di.come_cost AS "doctorInfos.comeCost", di.own_flag AS "doctorInfos.ownFlag", di.first_count AS "doctorInfos.firstCount", di.star_lv AS "doctorInfos.starLv" FROM sys_tiaoli_order a LEFT JOIN sys_user_info dd ON a.userid = dd.id LEFT JOIN sys_doctor_info di ON a.docid = di.doctorid WHERE a.out_trade_no = ? ORDER BY a.create_date DESC 
2019-07-11 09:40:19.279 DEBUG 4420 [nio-8980-exec-5] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - ==> Parameters: 201907119401400003(String)
2019-07-11 09:40:19.304 DEBUG 4420 [nio-8980-exec-5] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - <==      Total: 0
2019-07-11 09:40:19.304 DEBUG 4420 [nio-8980-exec-5] [c.j.c.m.m.provider.SelectSqlProvider   ] - 0毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.total_price AS "totalPrice", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag" FROM sys_member_order a WHERE a.out_trade_no = #{sqlMap.where#out_trade_no#EQ1} ORDER BY a.update_date DESC
2019-07-11 09:40:19.305 DEBUG 4420 [nio-8980-exec-5] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@6109d880] will not be managed by Spring
2019-07-11 09:40:19.305 DEBUG 4420 [nio-8980-exec-5] [c.j.m.app.dao.MemberOrderDao.findList  ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.total_price AS "totalPrice", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag" FROM sys_member_order a WHERE a.out_trade_no = ? ORDER BY a.update_date DESC 
2019-07-11 09:40:19.305 DEBUG 4420 [nio-8980-exec-5] [c.j.m.app.dao.MemberOrderDao.findList  ] - ==> Parameters: 201907119401400003(String)
2019-07-11 09:40:19.328 DEBUG 4420 [nio-8980-exec-5] [c.j.m.app.dao.MemberOrderDao.findList  ] - <==      Total: 0
2019-07-11 09:40:19.329 DEBUG 4420 [nio-8980-exec-5] [c.j.c.m.m.provider.SelectSqlProvider   ] - 1毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.total_price AS "totalPrice", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", a.doctor_user_id AS "doctorUserId" FROM sys_doctor_register_order a WHERE a.out_trade_no = #{sqlMap.where#out_trade_no#EQ1} ORDER BY a.update_date DESC
2019-07-11 09:40:19.329 DEBUG 4420 [nio-8980-exec-5] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@6109d880] will not be managed by Spring
2019-07-11 09:40:19.329 DEBUG 4420 [nio-8980-exec-5] [c.j.m.a.d.D.findList                   ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.total_price AS "totalPrice", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", a.doctor_user_id AS "doctorUserId" FROM sys_doctor_register_order a WHERE a.out_trade_no = ? ORDER BY a.update_date DESC 
2019-07-11 09:40:19.329 DEBUG 4420 [nio-8980-exec-5] [c.j.m.a.d.D.findList                   ] - ==> Parameters: 201907119401400003(String)
2019-07-11 09:40:19.352 DEBUG 4420 [nio-8980-exec-5] [c.j.m.a.d.D.findList                   ] - <==      Total: 0
2019-07-11 09:40:19.353 DEBUG 4420 [nio-8980-exec-5] [c.j.c.m.m.provider.SelectSqlProvider   ] - 0毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag" FROM sys_dashang_order a WHERE a.out_trade_no = #{sqlMap.where#out_trade_no#EQ1} ORDER BY a.update_date DESC
2019-07-11 09:40:19.353 DEBUG 4420 [nio-8980-exec-5] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@6109d880] will not be managed by Spring
2019-07-11 09:40:19.354 DEBUG 4420 [nio-8980-exec-5] [c.j.m.app.dao.DashangOrderDao.findList ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag" FROM sys_dashang_order a WHERE a.out_trade_no = ? ORDER BY a.update_date DESC 
2019-07-11 09:40:19.354 DEBUG 4420 [nio-8980-exec-5] [c.j.m.app.dao.DashangOrderDao.findList ] - ==> Parameters: 201907119401400003(String)
2019-07-11 09:40:19.378 DEBUG 4420 [nio-8980-exec-5] [c.j.m.app.dao.DashangOrderDao.findList ] - <==      Total: 0
2019-07-11 09:40:19.411 DEBUG 4420 [nio-8980-exec-5] [c.j.c.m.m.provider.UpdateSqlProvider   ] - 11毫秒: UPDATE sys_order SET `order_no` = #{orderNo}, `order_status` = #{orderStatus}, `product_count` = #{productCount}, `total_price` = #{totalPrice}, `logistics_price` = #{logisticsPrice}, `discount_price` = #{discountPrice}, `really_price` = #{reallyPrice}, `pay_channel` = #{payChannel}, `out_trade_no` = #{outTradeNo}, `update_by` = #{updateBy}, `pay_date` = #{payDate}, `user_id` = #{userId}, `del_flag` = #{delFlag}, `delivery_name` = #{deliveryName}, `delivery_address` = #{deliveryAddress}, `delivery_phone` = #{deliveryPhone}, `total_count` = #{totalCount} WHERE `id` = #{id}
2019-07-11 09:40:19.411 DEBUG 4420 [nio-8980-exec-5] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@6109d880] will be managed by Spring
2019-07-11 09:40:19.411 DEBUG 4420 [nio-8980-exec-5] [c.j.modules.app.dao.OrderDao.update    ] - ==>  Preparing: UPDATE sys_order SET `order_no` = ?, `order_status` = ?, `product_count` = ?, `total_price` = ?, `logistics_price` = ?, `discount_price` = ?, `really_price` = ?, `pay_channel` = ?, `out_trade_no` = ?, `update_by` = ?, `pay_date` = ?, `user_id` = ?, `del_flag` = ?, `delivery_name` = ?, `delivery_address` = ?, `delivery_phone` = ?, `total_count` = ? WHERE `id` = ? 
2019-07-11 09:40:19.412 DEBUG 4420 [nio-8980-exec-5] [c.j.modules.app.dao.OrderDao.update    ] - ==> Parameters: 071109401422701(String), 1(String), 1(String), 3000(String), 0(String), 0(String), 3000(String), 微信(String), 201907119401400003(String), system(String), 2019-07-11 09:40:19.378(Timestamp), 123(String), 0(String), 范耘诚123(String), 辽宁省铁西区铁西广场23(String), 15004001841(String), 6(String), 335(String)
2019-07-11 09:40:19.458 DEBUG 4420 [nio-8980-exec-5] [c.j.modules.app.dao.OrderDao.update    ] - <==    Updates: 1
2019-07-11 09:40:19.550 DEBUG 4420 [nio-8980-exec-5] [c.j.c.m.m.provider.SelectSqlProvider   ] - 0毫秒: SELECT a.id AS "id", a.user_id AS "userId", a.discount_price AS "discountPrice", a.create_date AS "createDate", a.update_date AS "updateDate", a.create_by AS "createBy", a.update_by AS "updateBy", a.remarks AS "remarks", dd.id AS "discountDetail.id", dd.discount_id AS "discountDetail.discountId", dd.remarks AS "discountDetail.remarks", dd.detail_price AS "discountDetail.detailPrice", dd.detail_state AS "discountDetail.detailState", dd.create_date AS "discountDetail.createDate", dd.update_date AS "discountDetail.updateDate", dd.create_by AS "discountDetail.createBy", dd.update_by AS "discountDetail.updateBy", dd.del_flag AS "discountDetail.delFlag" FROM sys_discount a LEFT JOIN sys_discount_detail dd ON a.id = dd.discount_id WHERE a.user_id = #{sqlMap.where#user_id#EQ1} ORDER BY a.update_date DESC
2019-07-11 09:40:19.551 DEBUG 4420 [nio-8980-exec-5] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@6109d880] will be managed by Spring
2019-07-11 09:40:19.551 DEBUG 4420 [nio-8980-exec-5] [c.j.m.app.dao.DiscountDao.findList     ] - ==>  Preparing: SELECT a.id AS "id", a.user_id AS "userId", a.discount_price AS "discountPrice", a.create_date AS "createDate", a.update_date AS "updateDate", a.create_by AS "createBy", a.update_by AS "updateBy", a.remarks AS "remarks", dd.id AS "discountDetail.id", dd.discount_id AS "discountDetail.discountId", dd.remarks AS "discountDetail.remarks", dd.detail_price AS "discountDetail.detailPrice", dd.detail_state AS "discountDetail.detailState", dd.create_date AS "discountDetail.createDate", dd.update_date AS "discountDetail.updateDate", dd.create_by AS "discountDetail.createBy", dd.update_by AS "discountDetail.updateBy", dd.del_flag AS "discountDetail.delFlag" FROM sys_discount a LEFT JOIN sys_discount_detail dd ON a.id = dd.discount_id WHERE a.user_id = ? ORDER BY a.update_date DESC 
2019-07-11 09:40:19.552 DEBUG 4420 [nio-8980-exec-5] [c.j.m.app.dao.DiscountDao.findList     ] - ==> Parameters: 123(String)
2019-07-11 09:40:19.576 DEBUG 4420 [nio-8980-exec-5] [c.j.m.app.dao.DiscountDao.findList     ] - <==      Total: 1
2019-07-11 09:40:19.577 DEBUG 4420 [nio-8980-exec-5] [c.j.c.m.m.provider.UpdateSqlProvider   ] - 1毫秒: UPDATE sys_discount SET `user_id` = #{userId}, `discount_price` = #{discountPrice}, `update_date` = #{updateDate}, `update_by` = #{updateBy}, `remarks` = #{remarks} WHERE `id` = #{id}
2019-07-11 09:40:19.577 DEBUG 4420 [nio-8980-exec-5] [c.j.modules.app.dao.DiscountDao.update ] - ==>  Preparing: UPDATE sys_discount SET `user_id` = ?, `discount_price` = ?, `update_date` = ?, `update_by` = ?, `remarks` = ? WHERE `id` = ? 
2019-07-11 09:40:19.578 DEBUG 4420 [nio-8980-exec-5] [c.j.modules.app.dao.DiscountDao.update ] - ==> Parameters: 123(String), 0(String), 2019-07-11 09:40:19.577(Timestamp), system(String), 备注(String), 1(String)
2019-07-11 09:40:19.622 DEBUG 4420 [nio-8980-exec-5] [c.j.modules.app.dao.DiscountDao.update ] - <==    Updates: 1
2019-07-11 09:40:23.993 DEBUG 4420 [nio-8980-exec-7] [c.j.c.m.m.provider.SelectSqlProvider   ] - 1毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.product_count AS "productCount", a.total_price AS "totalPrice", a.logistics_price AS "logisticsPrice", a.discount_price AS "discountPrice", a.really_price AS "reallyPrice", a.pay_channel AS "payChannel", a.out_trade_no AS "outTradeNo", a.create_date AS "createDate", a.update_date AS "updateDate", a.create_by AS "createBy", a.update_by AS "updateBy", a.pay_date AS "payDate", a.user_id AS "userId", a.address_id AS "addressId", a.logistics_id AS "logisticsId", a.delivery_date AS "deliveryDate", a.del_flag AS "delFlag", a.delivery_name AS "deliveryName", a.delivery_address AS "deliveryAddress", a.delivery_phone AS "deliveryPhone", a.total_count AS "totalCount", a.trade_no AS "tradeNo" FROM sys_order a WHERE a.order_no = #{sqlMap.where#order_no#EQ1} ORDER BY a.update_date DESC
2019-07-11 09:40:23.994 DEBUG 4420 [nio-8980-exec-7] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@6109d880] will not be managed by Spring
2019-07-11 09:40:23.994 DEBUG 4420 [nio-8980-exec-7] [c.j.modules.app.dao.OrderDao.findList  ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.product_count AS "productCount", a.total_price AS "totalPrice", a.logistics_price AS "logisticsPrice", a.discount_price AS "discountPrice", a.really_price AS "reallyPrice", a.pay_channel AS "payChannel", a.out_trade_no AS "outTradeNo", a.create_date AS "createDate", a.update_date AS "updateDate", a.create_by AS "createBy", a.update_by AS "updateBy", a.pay_date AS "payDate", a.user_id AS "userId", a.address_id AS "addressId", a.logistics_id AS "logisticsId", a.delivery_date AS "deliveryDate", a.del_flag AS "delFlag", a.delivery_name AS "deliveryName", a.delivery_address AS "deliveryAddress", a.delivery_phone AS "deliveryPhone", a.total_count AS "totalCount", a.trade_no AS "tradeNo" FROM sys_order a WHERE a.order_no = ? ORDER BY a.update_date DESC 
2019-07-11 09:40:23.995 DEBUG 4420 [nio-8980-exec-7] [c.j.modules.app.dao.OrderDao.findList  ] - ==> Parameters: 071109402369401(String)
2019-07-11 09:40:24.019 DEBUG 4420 [nio-8980-exec-7] [c.j.modules.app.dao.OrderDao.findList  ] - <==      Total: 1
2019-07-11 09:40:24.020 DEBUG 4420 [nio-8980-exec-7] [c.j.c.m.m.provider.SelectSqlProvider   ] - 0毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", dd.id AS "userInfo.id", dd.mobile AS "userInfo.mobile", dd.password AS "userInfo.password", dd.icon AS "userInfo.icon", dd.regtime AS "userInfo.regtime", dd.lastlogin AS "userInfo.lastlogin", dd.islock AS "userInfo.islock", dd.isauthentication AS "userInfo.isauthentication", dd.type AS "userInfo.type", dd.create_by AS "userInfo.createBy", dd.create_date AS "userInfo.createDate", dd.update_by AS "userInfo.updateBy", dd.update_date AS "userInfo.updateDate", dd.remarks AS "userInfo.remarks", dd.del_flag AS "userInfo.delFlag", dd.nike_name AS "userInfo.nikeName", dd.is_invite AS "userInfo.isInvite", dd.third_id AS "userInfo.thirdId", dd.third_type AS "userInfo.thirdType", dd.third_icon AS "userInfo.thirdIcon", dd.member_lv AS "userInfo.memberLv", dd.member_flag AS "userInfo.memberFlag", dd.member_start AS "userInfo.memberStart", dd.member_end AS "userInfo.memberEnd", dd.invite_user_id AS "userInfo.inviteUserId", di.id AS "doctorInfos.id", di.doctorid AS "doctorInfos.doctorid", di.doctornum AS "doctorInfos.doctornum", di.name AS "doctorInfos.name", di.sex AS "doctorInfos.sex", di.age AS "doctorInfos.age", di.telephone AS "doctorInfos.telephone", di.idcard AS "doctorInfos.idcard", di.adress AS "doctorInfos.adress", di.technical AS "doctorInfos.technical", di.classify AS "doctorInfos.classify", di.introduce AS "doctorInfos.introduce", di.create_by AS "doctorInfos.createBy", di.cost AS "doctorInfos.cost", di.create_date AS "doctorInfos.createDate", di.update_by AS "doctorInfos.updateBy", di.update_date AS "doctorInfos.updateDate", di.remarks AS "doctorInfos.remarks", di.del_flag AS "doctorInfos.delFlag", di.cityid AS "doctorInfos.cityid", di.come_flag AS "doctorInfos.comeFlag", di.come_cost AS "doctorInfos.comeCost", di.own_flag AS "doctorInfos.ownFlag", di.first_count AS "doctorInfos.firstCount", di.star_lv AS "doctorInfos.starLv" FROM sys_tiaoli_order a LEFT JOIN sys_user_info dd ON a.userid = dd.id LEFT JOIN sys_doctor_info di ON a.docid = di.doctorid WHERE a.order_no = #{sqlMap.where#order_no#EQ1} ORDER BY a.create_date DESC
2019-07-11 09:40:24.020 DEBUG 4420 [nio-8980-exec-7] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@6109d880] will not be managed by Spring
2019-07-11 09:40:24.021 DEBUG 4420 [nio-8980-exec-7] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", dd.id AS "userInfo.id", dd.mobile AS "userInfo.mobile", dd.password AS "userInfo.password", dd.icon AS "userInfo.icon", dd.regtime AS "userInfo.regtime", dd.lastlogin AS "userInfo.lastlogin", dd.islock AS "userInfo.islock", dd.isauthentication AS "userInfo.isauthentication", dd.type AS "userInfo.type", dd.create_by AS "userInfo.createBy", dd.create_date AS "userInfo.createDate", dd.update_by AS "userInfo.updateBy", dd.update_date AS "userInfo.updateDate", dd.remarks AS "userInfo.remarks", dd.del_flag AS "userInfo.delFlag", dd.nike_name AS "userInfo.nikeName", dd.is_invite AS "userInfo.isInvite", dd.third_id AS "userInfo.thirdId", dd.third_type AS "userInfo.thirdType", dd.third_icon AS "userInfo.thirdIcon", dd.member_lv AS "userInfo.memberLv", dd.member_flag AS "userInfo.memberFlag", dd.member_start AS "userInfo.memberStart", dd.member_end AS "userInfo.memberEnd", dd.invite_user_id AS "userInfo.inviteUserId", di.id AS "doctorInfos.id", di.doctorid AS "doctorInfos.doctorid", di.doctornum AS "doctorInfos.doctornum", di.name AS "doctorInfos.name", di.sex AS "doctorInfos.sex", di.age AS "doctorInfos.age", di.telephone AS "doctorInfos.telephone", di.idcard AS "doctorInfos.idcard", di.adress AS "doctorInfos.adress", di.technical AS "doctorInfos.technical", di.classify AS "doctorInfos.classify", di.introduce AS "doctorInfos.introduce", di.create_by AS "doctorInfos.createBy", di.cost AS "doctorInfos.cost", di.create_date AS "doctorInfos.createDate", di.update_by AS "doctorInfos.updateBy", di.update_date AS "doctorInfos.updateDate", di.remarks AS "doctorInfos.remarks", di.del_flag AS "doctorInfos.delFlag", di.cityid AS "doctorInfos.cityid", di.come_flag AS "doctorInfos.comeFlag", di.come_cost AS "doctorInfos.comeCost", di.own_flag AS "doctorInfos.ownFlag", di.first_count AS "doctorInfos.firstCount", di.star_lv AS "doctorInfos.starLv" FROM sys_tiaoli_order a LEFT JOIN sys_user_info dd ON a.userid = dd.id LEFT JOIN sys_doctor_info di ON a.docid = di.doctorid WHERE a.order_no = ? ORDER BY a.create_date DESC 
2019-07-11 09:40:24.021 DEBUG 4420 [nio-8980-exec-7] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - ==> Parameters: 071109402369401(String)
2019-07-11 09:40:24.047 DEBUG 4420 [nio-8980-exec-7] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - <==      Total: 0
2019-07-11 09:40:24.047 DEBUG 4420 [nio-8980-exec-7] [c.j.c.m.m.provider.SelectSqlProvider   ] - 0毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", dd.id AS "userInfo.id", dd.mobile AS "userInfo.mobile", dd.password AS "userInfo.password", dd.icon AS "userInfo.icon", dd.regtime AS "userInfo.regtime", dd.lastlogin AS "userInfo.lastlogin", dd.islock AS "userInfo.islock", dd.isauthentication AS "userInfo.isauthentication", dd.type AS "userInfo.type", dd.create_by AS "userInfo.createBy", dd.create_date AS "userInfo.createDate", dd.update_by AS "userInfo.updateBy", dd.update_date AS "userInfo.updateDate", dd.remarks AS "userInfo.remarks", dd.del_flag AS "userInfo.delFlag", dd.nike_name AS "userInfo.nikeName", dd.is_invite AS "userInfo.isInvite", dd.third_id AS "userInfo.thirdId", dd.third_type AS "userInfo.thirdType", dd.third_icon AS "userInfo.thirdIcon", dd.member_lv AS "userInfo.memberLv", dd.member_flag AS "userInfo.memberFlag", dd.member_start AS "userInfo.memberStart", dd.member_end AS "userInfo.memberEnd", dd.invite_user_id AS "userInfo.inviteUserId", di.id AS "doctorInfos.id", di.doctorid AS "doctorInfos.doctorid", di.doctornum AS "doctorInfos.doctornum", di.name AS "doctorInfos.name", di.sex AS "doctorInfos.sex", di.age AS "doctorInfos.age", di.telephone AS "doctorInfos.telephone", di.idcard AS "doctorInfos.idcard", di.adress AS "doctorInfos.adress", di.technical AS "doctorInfos.technical", di.classify AS "doctorInfos.classify", di.introduce AS "doctorInfos.introduce", di.create_by AS "doctorInfos.createBy", di.cost AS "doctorInfos.cost", di.create_date AS "doctorInfos.createDate", di.update_by AS "doctorInfos.updateBy", di.update_date AS "doctorInfos.updateDate", di.remarks AS "doctorInfos.remarks", di.del_flag AS "doctorInfos.delFlag", di.cityid AS "doctorInfos.cityid", di.come_flag AS "doctorInfos.comeFlag", di.come_cost AS "doctorInfos.comeCost", di.own_flag AS "doctorInfos.ownFlag", di.first_count AS "doctorInfos.firstCount", di.star_lv AS "doctorInfos.starLv" FROM sys_tiaoli_order a LEFT JOIN sys_user_info dd ON a.userid = dd.id LEFT JOIN sys_doctor_info di ON a.docid = di.doctorid WHERE a.order_no = #{sqlMap.where#order_no#EQ1} ORDER BY a.create_date DESC
2019-07-11 09:40:24.048 DEBUG 4420 [nio-8980-exec-7] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@6109d880] will not be managed by Spring
2019-07-11 09:40:24.048 DEBUG 4420 [nio-8980-exec-7] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", dd.id AS "userInfo.id", dd.mobile AS "userInfo.mobile", dd.password AS "userInfo.password", dd.icon AS "userInfo.icon", dd.regtime AS "userInfo.regtime", dd.lastlogin AS "userInfo.lastlogin", dd.islock AS "userInfo.islock", dd.isauthentication AS "userInfo.isauthentication", dd.type AS "userInfo.type", dd.create_by AS "userInfo.createBy", dd.create_date AS "userInfo.createDate", dd.update_by AS "userInfo.updateBy", dd.update_date AS "userInfo.updateDate", dd.remarks AS "userInfo.remarks", dd.del_flag AS "userInfo.delFlag", dd.nike_name AS "userInfo.nikeName", dd.is_invite AS "userInfo.isInvite", dd.third_id AS "userInfo.thirdId", dd.third_type AS "userInfo.thirdType", dd.third_icon AS "userInfo.thirdIcon", dd.member_lv AS "userInfo.memberLv", dd.member_flag AS "userInfo.memberFlag", dd.member_start AS "userInfo.memberStart", dd.member_end AS "userInfo.memberEnd", dd.invite_user_id AS "userInfo.inviteUserId", di.id AS "doctorInfos.id", di.doctorid AS "doctorInfos.doctorid", di.doctornum AS "doctorInfos.doctornum", di.name AS "doctorInfos.name", di.sex AS "doctorInfos.sex", di.age AS "doctorInfos.age", di.telephone AS "doctorInfos.telephone", di.idcard AS "doctorInfos.idcard", di.adress AS "doctorInfos.adress", di.technical AS "doctorInfos.technical", di.classify AS "doctorInfos.classify", di.introduce AS "doctorInfos.introduce", di.create_by AS "doctorInfos.createBy", di.cost AS "doctorInfos.cost", di.create_date AS "doctorInfos.createDate", di.update_by AS "doctorInfos.updateBy", di.update_date AS "doctorInfos.updateDate", di.remarks AS "doctorInfos.remarks", di.del_flag AS "doctorInfos.delFlag", di.cityid AS "doctorInfos.cityid", di.come_flag AS "doctorInfos.comeFlag", di.come_cost AS "doctorInfos.comeCost", di.own_flag AS "doctorInfos.ownFlag", di.first_count AS "doctorInfos.firstCount", di.star_lv AS "doctorInfos.starLv" FROM sys_tiaoli_order a LEFT JOIN sys_user_info dd ON a.userid = dd.id LEFT JOIN sys_doctor_info di ON a.docid = di.doctorid WHERE a.order_no = ? ORDER BY a.create_date DESC 
2019-07-11 09:40:24.048 DEBUG 4420 [nio-8980-exec-7] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - ==> Parameters: 071109402369401(String)
2019-07-11 09:40:24.074 DEBUG 4420 [nio-8980-exec-7] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - <==      Total: 0
2019-07-11 09:40:24.074 DEBUG 4420 [nio-8980-exec-7] [c.j.c.m.m.provider.SelectSqlProvider   ] - 0毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.total_price AS "totalPrice", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag" FROM sys_member_order a WHERE a.order_no = #{sqlMap.where#order_no#EQ1} ORDER BY a.update_date DESC
2019-07-11 09:40:24.075 DEBUG 4420 [nio-8980-exec-7] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@6109d880] will not be managed by Spring
2019-07-11 09:40:24.075 DEBUG 4420 [nio-8980-exec-7] [c.j.m.app.dao.MemberOrderDao.findList  ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.total_price AS "totalPrice", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag" FROM sys_member_order a WHERE a.order_no = ? ORDER BY a.update_date DESC 
2019-07-11 09:40:24.075 DEBUG 4420 [nio-8980-exec-7] [c.j.m.app.dao.MemberOrderDao.findList  ] - ==> Parameters: 071109402369401(String)
2019-07-11 09:40:24.098 DEBUG 4420 [nio-8980-exec-7] [c.j.m.app.dao.MemberOrderDao.findList  ] - <==      Total: 0
2019-07-11 09:40:24.099 DEBUG 4420 [nio-8980-exec-7] [c.j.c.m.m.provider.SelectSqlProvider   ] - 0毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.total_price AS "totalPrice", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", a.doctor_user_id AS "doctorUserId" FROM sys_doctor_register_order a WHERE a.order_no = #{sqlMap.where#order_no#EQ1} ORDER BY a.update_date DESC
2019-07-11 09:40:24.099 DEBUG 4420 [nio-8980-exec-7] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@6109d880] will not be managed by Spring
2019-07-11 09:40:24.100 DEBUG 4420 [nio-8980-exec-7] [c.j.m.a.d.D.findList                   ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.total_price AS "totalPrice", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", a.doctor_user_id AS "doctorUserId" FROM sys_doctor_register_order a WHERE a.order_no = ? ORDER BY a.update_date DESC 
2019-07-11 09:40:24.100 DEBUG 4420 [nio-8980-exec-7] [c.j.m.a.d.D.findList                   ] - ==> Parameters: 071109402369401(String)
2019-07-11 09:40:24.122 DEBUG 4420 [nio-8980-exec-7] [c.j.m.a.d.D.findList                   ] - <==      Total: 0
2019-07-11 09:40:24.123 DEBUG 4420 [nio-8980-exec-7] [c.j.c.m.m.provider.SelectSqlProvider   ] - 1毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag" FROM sys_dashang_order a WHERE a.order_no = #{sqlMap.where#order_no#EQ1} ORDER BY a.update_date DESC
2019-07-11 09:40:24.123 DEBUG 4420 [nio-8980-exec-7] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@6109d880] will not be managed by Spring
2019-07-11 09:40:24.123 DEBUG 4420 [nio-8980-exec-7] [c.j.m.app.dao.DashangOrderDao.findList ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag" FROM sys_dashang_order a WHERE a.order_no = ? ORDER BY a.update_date DESC 
2019-07-11 09:40:24.123 DEBUG 4420 [nio-8980-exec-7] [c.j.m.app.dao.DashangOrderDao.findList ] - ==> Parameters: 071109402369401(String)
2019-07-11 09:40:24.146 DEBUG 4420 [nio-8980-exec-7] [c.j.m.app.dao.DashangOrderDao.findList ] - <==      Total: 0
2019-07-11 09:40:24.170 DEBUG 4420 [nio-8980-exec-7] [c.j.c.m.m.provider.UpdateSqlProvider   ] - 0毫秒: UPDATE sys_order SET `order_no` = #{orderNo}, `order_status` = #{orderStatus}, `product_count` = #{productCount}, `total_price` = #{totalPrice}, `logistics_price` = #{logisticsPrice}, `discount_price` = #{discountPrice}, `really_price` = #{reallyPrice}, `pay_channel` = #{payChannel}, `out_trade_no` = #{outTradeNo}, `update_by` = #{updateBy}, `user_id` = #{userId}, `del_flag` = #{delFlag}, `delivery_name` = #{deliveryName}, `delivery_address` = #{deliveryAddress}, `delivery_phone` = #{deliveryPhone}, `total_count` = #{totalCount} WHERE `id` = #{id}
2019-07-11 09:40:24.170 DEBUG 4420 [nio-8980-exec-7] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@6109d880] will be managed by Spring
2019-07-11 09:40:24.171 DEBUG 4420 [nio-8980-exec-7] [c.j.modules.app.dao.OrderDao.update    ] - ==>  Preparing: UPDATE sys_order SET `order_no` = ?, `order_status` = ?, `product_count` = ?, `total_price` = ?, `logistics_price` = ?, `discount_price` = ?, `really_price` = ?, `pay_channel` = ?, `out_trade_no` = ?, `update_by` = ?, `user_id` = ?, `del_flag` = ?, `delivery_name` = ?, `delivery_address` = ?, `delivery_phone` = ?, `total_count` = ? WHERE `id` = ? 
2019-07-11 09:40:24.171 DEBUG 4420 [nio-8980-exec-7] [c.j.modules.app.dao.OrderDao.update    ] - ==> Parameters: 071109402369401(String), 0(String), 1(String), 3000(String), 0(String), 0(String), 3000(String), null(String), 201907119402300004(String), system(String), 123(String), 0(String), 范耘诚123(String), 辽宁省铁西区铁西广场23(String), 15004001841(String), 6(String), 336(String)
2019-07-11 09:40:24.216 DEBUG 4420 [nio-8980-exec-7] [c.j.modules.app.dao.OrderDao.update    ] - <==    Updates: 1
2019-07-11 09:40:29.883 DEBUG 4420 [nio-8980-exec-8] [c.j.c.m.m.provider.SelectSqlProvider   ] - 1毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.product_count AS "productCount", a.total_price AS "totalPrice", a.logistics_price AS "logisticsPrice", a.discount_price AS "discountPrice", a.really_price AS "reallyPrice", a.pay_channel AS "payChannel", a.out_trade_no AS "outTradeNo", a.create_date AS "createDate", a.update_date AS "updateDate", a.create_by AS "createBy", a.update_by AS "updateBy", a.pay_date AS "payDate", a.user_id AS "userId", a.address_id AS "addressId", a.logistics_id AS "logisticsId", a.delivery_date AS "deliveryDate", a.del_flag AS "delFlag", a.delivery_name AS "deliveryName", a.delivery_address AS "deliveryAddress", a.delivery_phone AS "deliveryPhone", a.total_count AS "totalCount", a.trade_no AS "tradeNo" FROM sys_order a WHERE a.out_trade_no = #{sqlMap.where#out_trade_no#EQ1} ORDER BY a.update_date DESC
2019-07-11 09:40:29.884 DEBUG 4420 [nio-8980-exec-8] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@6109d880] will not be managed by Spring
2019-07-11 09:40:29.885 DEBUG 4420 [nio-8980-exec-8] [c.j.modules.app.dao.OrderDao.findList  ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.product_count AS "productCount", a.total_price AS "totalPrice", a.logistics_price AS "logisticsPrice", a.discount_price AS "discountPrice", a.really_price AS "reallyPrice", a.pay_channel AS "payChannel", a.out_trade_no AS "outTradeNo", a.create_date AS "createDate", a.update_date AS "updateDate", a.create_by AS "createBy", a.update_by AS "updateBy", a.pay_date AS "payDate", a.user_id AS "userId", a.address_id AS "addressId", a.logistics_id AS "logisticsId", a.delivery_date AS "deliveryDate", a.del_flag AS "delFlag", a.delivery_name AS "deliveryName", a.delivery_address AS "deliveryAddress", a.delivery_phone AS "deliveryPhone", a.total_count AS "totalCount", a.trade_no AS "tradeNo" FROM sys_order a WHERE a.out_trade_no = ? ORDER BY a.update_date DESC 
2019-07-11 09:40:29.886 DEBUG 4420 [nio-8980-exec-8] [c.j.modules.app.dao.OrderDao.findList  ] - ==> Parameters: 201907119402300004(String)
2019-07-11 09:40:29.911 DEBUG 4420 [nio-8980-exec-8] [c.j.modules.app.dao.OrderDao.findList  ] - <==      Total: 1
2019-07-11 09:40:29.912 DEBUG 4420 [nio-8980-exec-8] [c.j.c.m.m.provider.SelectSqlProvider   ] - 1毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", dd.id AS "userInfo.id", dd.mobile AS "userInfo.mobile", dd.password AS "userInfo.password", dd.icon AS "userInfo.icon", dd.regtime AS "userInfo.regtime", dd.lastlogin AS "userInfo.lastlogin", dd.islock AS "userInfo.islock", dd.isauthentication AS "userInfo.isauthentication", dd.type AS "userInfo.type", dd.create_by AS "userInfo.createBy", dd.create_date AS "userInfo.createDate", dd.update_by AS "userInfo.updateBy", dd.update_date AS "userInfo.updateDate", dd.remarks AS "userInfo.remarks", dd.del_flag AS "userInfo.delFlag", dd.nike_name AS "userInfo.nikeName", dd.is_invite AS "userInfo.isInvite", dd.third_id AS "userInfo.thirdId", dd.third_type AS "userInfo.thirdType", dd.third_icon AS "userInfo.thirdIcon", dd.member_lv AS "userInfo.memberLv", dd.member_flag AS "userInfo.memberFlag", dd.member_start AS "userInfo.memberStart", dd.member_end AS "userInfo.memberEnd", dd.invite_user_id AS "userInfo.inviteUserId", di.id AS "doctorInfos.id", di.doctorid AS "doctorInfos.doctorid", di.doctornum AS "doctorInfos.doctornum", di.name AS "doctorInfos.name", di.sex AS "doctorInfos.sex", di.age AS "doctorInfos.age", di.telephone AS "doctorInfos.telephone", di.idcard AS "doctorInfos.idcard", di.adress AS "doctorInfos.adress", di.technical AS "doctorInfos.technical", di.classify AS "doctorInfos.classify", di.introduce AS "doctorInfos.introduce", di.create_by AS "doctorInfos.createBy", di.cost AS "doctorInfos.cost", di.create_date AS "doctorInfos.createDate", di.update_by AS "doctorInfos.updateBy", di.update_date AS "doctorInfos.updateDate", di.remarks AS "doctorInfos.remarks", di.del_flag AS "doctorInfos.delFlag", di.cityid AS "doctorInfos.cityid", di.come_flag AS "doctorInfos.comeFlag", di.come_cost AS "doctorInfos.comeCost", di.own_flag AS "doctorInfos.ownFlag", di.first_count AS "doctorInfos.firstCount", di.star_lv AS "doctorInfos.starLv" FROM sys_tiaoli_order a LEFT JOIN sys_user_info dd ON a.userid = dd.id LEFT JOIN sys_doctor_info di ON a.docid = di.doctorid WHERE a.out_trade_no = #{sqlMap.where#out_trade_no#EQ1} ORDER BY a.create_date DESC
2019-07-11 09:40:29.912 DEBUG 4420 [nio-8980-exec-8] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@6109d880] will not be managed by Spring
2019-07-11 09:40:29.912 DEBUG 4420 [nio-8980-exec-8] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", dd.id AS "userInfo.id", dd.mobile AS "userInfo.mobile", dd.password AS "userInfo.password", dd.icon AS "userInfo.icon", dd.regtime AS "userInfo.regtime", dd.lastlogin AS "userInfo.lastlogin", dd.islock AS "userInfo.islock", dd.isauthentication AS "userInfo.isauthentication", dd.type AS "userInfo.type", dd.create_by AS "userInfo.createBy", dd.create_date AS "userInfo.createDate", dd.update_by AS "userInfo.updateBy", dd.update_date AS "userInfo.updateDate", dd.remarks AS "userInfo.remarks", dd.del_flag AS "userInfo.delFlag", dd.nike_name AS "userInfo.nikeName", dd.is_invite AS "userInfo.isInvite", dd.third_id AS "userInfo.thirdId", dd.third_type AS "userInfo.thirdType", dd.third_icon AS "userInfo.thirdIcon", dd.member_lv AS "userInfo.memberLv", dd.member_flag AS "userInfo.memberFlag", dd.member_start AS "userInfo.memberStart", dd.member_end AS "userInfo.memberEnd", dd.invite_user_id AS "userInfo.inviteUserId", di.id AS "doctorInfos.id", di.doctorid AS "doctorInfos.doctorid", di.doctornum AS "doctorInfos.doctornum", di.name AS "doctorInfos.name", di.sex AS "doctorInfos.sex", di.age AS "doctorInfos.age", di.telephone AS "doctorInfos.telephone", di.idcard AS "doctorInfos.idcard", di.adress AS "doctorInfos.adress", di.technical AS "doctorInfos.technical", di.classify AS "doctorInfos.classify", di.introduce AS "doctorInfos.introduce", di.create_by AS "doctorInfos.createBy", di.cost AS "doctorInfos.cost", di.create_date AS "doctorInfos.createDate", di.update_by AS "doctorInfos.updateBy", di.update_date AS "doctorInfos.updateDate", di.remarks AS "doctorInfos.remarks", di.del_flag AS "doctorInfos.delFlag", di.cityid AS "doctorInfos.cityid", di.come_flag AS "doctorInfos.comeFlag", di.come_cost AS "doctorInfos.comeCost", di.own_flag AS "doctorInfos.ownFlag", di.first_count AS "doctorInfos.firstCount", di.star_lv AS "doctorInfos.starLv" FROM sys_tiaoli_order a LEFT JOIN sys_user_info dd ON a.userid = dd.id LEFT JOIN sys_doctor_info di ON a.docid = di.doctorid WHERE a.out_trade_no = ? ORDER BY a.create_date DESC 
2019-07-11 09:40:29.912 DEBUG 4420 [nio-8980-exec-8] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - ==> Parameters: 201907119402300004(String)
2019-07-11 09:40:29.939 DEBUG 4420 [nio-8980-exec-8] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - <==      Total: 0
2019-07-11 09:40:29.939 DEBUG 4420 [nio-8980-exec-8] [c.j.c.m.m.provider.SelectSqlProvider   ] - 0毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", dd.id AS "userInfo.id", dd.mobile AS "userInfo.mobile", dd.password AS "userInfo.password", dd.icon AS "userInfo.icon", dd.regtime AS "userInfo.regtime", dd.lastlogin AS "userInfo.lastlogin", dd.islock AS "userInfo.islock", dd.isauthentication AS "userInfo.isauthentication", dd.type AS "userInfo.type", dd.create_by AS "userInfo.createBy", dd.create_date AS "userInfo.createDate", dd.update_by AS "userInfo.updateBy", dd.update_date AS "userInfo.updateDate", dd.remarks AS "userInfo.remarks", dd.del_flag AS "userInfo.delFlag", dd.nike_name AS "userInfo.nikeName", dd.is_invite AS "userInfo.isInvite", dd.third_id AS "userInfo.thirdId", dd.third_type AS "userInfo.thirdType", dd.third_icon AS "userInfo.thirdIcon", dd.member_lv AS "userInfo.memberLv", dd.member_flag AS "userInfo.memberFlag", dd.member_start AS "userInfo.memberStart", dd.member_end AS "userInfo.memberEnd", dd.invite_user_id AS "userInfo.inviteUserId", di.id AS "doctorInfos.id", di.doctorid AS "doctorInfos.doctorid", di.doctornum AS "doctorInfos.doctornum", di.name AS "doctorInfos.name", di.sex AS "doctorInfos.sex", di.age AS "doctorInfos.age", di.telephone AS "doctorInfos.telephone", di.idcard AS "doctorInfos.idcard", di.adress AS "doctorInfos.adress", di.technical AS "doctorInfos.technical", di.classify AS "doctorInfos.classify", di.introduce AS "doctorInfos.introduce", di.create_by AS "doctorInfos.createBy", di.cost AS "doctorInfos.cost", di.create_date AS "doctorInfos.createDate", di.update_by AS "doctorInfos.updateBy", di.update_date AS "doctorInfos.updateDate", di.remarks AS "doctorInfos.remarks", di.del_flag AS "doctorInfos.delFlag", di.cityid AS "doctorInfos.cityid", di.come_flag AS "doctorInfos.comeFlag", di.come_cost AS "doctorInfos.comeCost", di.own_flag AS "doctorInfos.ownFlag", di.first_count AS "doctorInfos.firstCount", di.star_lv AS "doctorInfos.starLv" FROM sys_tiaoli_order a LEFT JOIN sys_user_info dd ON a.userid = dd.id LEFT JOIN sys_doctor_info di ON a.docid = di.doctorid WHERE a.out_trade_no = #{sqlMap.where#out_trade_no#EQ1} ORDER BY a.create_date DESC
2019-07-11 09:40:29.940 DEBUG 4420 [nio-8980-exec-8] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@6109d880] will not be managed by Spring
2019-07-11 09:40:29.940 DEBUG 4420 [nio-8980-exec-8] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", dd.id AS "userInfo.id", dd.mobile AS "userInfo.mobile", dd.password AS "userInfo.password", dd.icon AS "userInfo.icon", dd.regtime AS "userInfo.regtime", dd.lastlogin AS "userInfo.lastlogin", dd.islock AS "userInfo.islock", dd.isauthentication AS "userInfo.isauthentication", dd.type AS "userInfo.type", dd.create_by AS "userInfo.createBy", dd.create_date AS "userInfo.createDate", dd.update_by AS "userInfo.updateBy", dd.update_date AS "userInfo.updateDate", dd.remarks AS "userInfo.remarks", dd.del_flag AS "userInfo.delFlag", dd.nike_name AS "userInfo.nikeName", dd.is_invite AS "userInfo.isInvite", dd.third_id AS "userInfo.thirdId", dd.third_type AS "userInfo.thirdType", dd.third_icon AS "userInfo.thirdIcon", dd.member_lv AS "userInfo.memberLv", dd.member_flag AS "userInfo.memberFlag", dd.member_start AS "userInfo.memberStart", dd.member_end AS "userInfo.memberEnd", dd.invite_user_id AS "userInfo.inviteUserId", di.id AS "doctorInfos.id", di.doctorid AS "doctorInfos.doctorid", di.doctornum AS "doctorInfos.doctornum", di.name AS "doctorInfos.name", di.sex AS "doctorInfos.sex", di.age AS "doctorInfos.age", di.telephone AS "doctorInfos.telephone", di.idcard AS "doctorInfos.idcard", di.adress AS "doctorInfos.adress", di.technical AS "doctorInfos.technical", di.classify AS "doctorInfos.classify", di.introduce AS "doctorInfos.introduce", di.create_by AS "doctorInfos.createBy", di.cost AS "doctorInfos.cost", di.create_date AS "doctorInfos.createDate", di.update_by AS "doctorInfos.updateBy", di.update_date AS "doctorInfos.updateDate", di.remarks AS "doctorInfos.remarks", di.del_flag AS "doctorInfos.delFlag", di.cityid AS "doctorInfos.cityid", di.come_flag AS "doctorInfos.comeFlag", di.come_cost AS "doctorInfos.comeCost", di.own_flag AS "doctorInfos.ownFlag", di.first_count AS "doctorInfos.firstCount", di.star_lv AS "doctorInfos.starLv" FROM sys_tiaoli_order a LEFT JOIN sys_user_info dd ON a.userid = dd.id LEFT JOIN sys_doctor_info di ON a.docid = di.doctorid WHERE a.out_trade_no = ? ORDER BY a.create_date DESC 
2019-07-11 09:40:29.940 DEBUG 4420 [nio-8980-exec-8] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - ==> Parameters: 201907119402300004(String)
2019-07-11 09:40:29.966 DEBUG 4420 [nio-8980-exec-8] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - <==      Total: 0
2019-07-11 09:40:29.966 DEBUG 4420 [nio-8980-exec-8] [c.j.c.m.m.provider.SelectSqlProvider   ] - 0毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.total_price AS "totalPrice", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag" FROM sys_member_order a WHERE a.out_trade_no = #{sqlMap.where#out_trade_no#EQ1} ORDER BY a.update_date DESC
2019-07-11 09:40:29.967 DEBUG 4420 [nio-8980-exec-8] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@6109d880] will not be managed by Spring
2019-07-11 09:40:29.968 DEBUG 4420 [nio-8980-exec-8] [c.j.m.app.dao.MemberOrderDao.findList  ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.total_price AS "totalPrice", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag" FROM sys_member_order a WHERE a.out_trade_no = ? ORDER BY a.update_date DESC 
2019-07-11 09:40:29.968 DEBUG 4420 [nio-8980-exec-8] [c.j.m.app.dao.MemberOrderDao.findList  ] - ==> Parameters: 201907119402300004(String)
2019-07-11 09:40:29.991 DEBUG 4420 [nio-8980-exec-8] [c.j.m.app.dao.MemberOrderDao.findList  ] - <==      Total: 0
2019-07-11 09:40:29.993 DEBUG 4420 [nio-8980-exec-8] [c.j.c.m.m.provider.SelectSqlProvider   ] - 1毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.total_price AS "totalPrice", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", a.doctor_user_id AS "doctorUserId" FROM sys_doctor_register_order a WHERE a.out_trade_no = #{sqlMap.where#out_trade_no#EQ1} ORDER BY a.update_date DESC
2019-07-11 09:40:29.993 DEBUG 4420 [nio-8980-exec-8] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@6109d880] will not be managed by Spring
2019-07-11 09:40:29.994 DEBUG 4420 [nio-8980-exec-8] [c.j.m.a.d.D.findList                   ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.total_price AS "totalPrice", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", a.doctor_user_id AS "doctorUserId" FROM sys_doctor_register_order a WHERE a.out_trade_no = ? ORDER BY a.update_date DESC 
2019-07-11 09:40:29.994 DEBUG 4420 [nio-8980-exec-8] [c.j.m.a.d.D.findList                   ] - ==> Parameters: 201907119402300004(String)
2019-07-11 09:40:30.018 DEBUG 4420 [nio-8980-exec-8] [c.j.m.a.d.D.findList                   ] - <==      Total: 0
2019-07-11 09:40:30.018 DEBUG 4420 [nio-8980-exec-8] [c.j.c.m.m.provider.SelectSqlProvider   ] - 0毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag" FROM sys_dashang_order a WHERE a.out_trade_no = #{sqlMap.where#out_trade_no#EQ1} ORDER BY a.update_date DESC
2019-07-11 09:40:30.019 DEBUG 4420 [nio-8980-exec-8] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@6109d880] will not be managed by Spring
2019-07-11 09:40:30.019 DEBUG 4420 [nio-8980-exec-8] [c.j.m.app.dao.DashangOrderDao.findList ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag" FROM sys_dashang_order a WHERE a.out_trade_no = ? ORDER BY a.update_date DESC 
2019-07-11 09:40:30.019 DEBUG 4420 [nio-8980-exec-8] [c.j.m.app.dao.DashangOrderDao.findList ] - ==> Parameters: 201907119402300004(String)
2019-07-11 09:40:30.042 DEBUG 4420 [nio-8980-exec-8] [c.j.m.app.dao.DashangOrderDao.findList ] - <==      Total: 0
2019-07-11 09:40:30.066 DEBUG 4420 [nio-8980-exec-8] [c.j.c.m.m.provider.UpdateSqlProvider   ] - 1毫秒: UPDATE sys_order SET `order_no` = #{orderNo}, `order_status` = #{orderStatus}, `product_count` = #{productCount}, `total_price` = #{totalPrice}, `logistics_price` = #{logisticsPrice}, `discount_price` = #{discountPrice}, `really_price` = #{reallyPrice}, `pay_channel` = #{payChannel}, `out_trade_no` = #{outTradeNo}, `update_by` = #{updateBy}, `pay_date` = #{payDate}, `user_id` = #{userId}, `del_flag` = #{delFlag}, `delivery_name` = #{deliveryName}, `delivery_address` = #{deliveryAddress}, `delivery_phone` = #{deliveryPhone}, `total_count` = #{totalCount} WHERE `id` = #{id}
2019-07-11 09:40:30.066 DEBUG 4420 [nio-8980-exec-8] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@6109d880] will be managed by Spring
2019-07-11 09:40:30.066 DEBUG 4420 [nio-8980-exec-8] [c.j.modules.app.dao.OrderDao.update    ] - ==>  Preparing: UPDATE sys_order SET `order_no` = ?, `order_status` = ?, `product_count` = ?, `total_price` = ?, `logistics_price` = ?, `discount_price` = ?, `really_price` = ?, `pay_channel` = ?, `out_trade_no` = ?, `update_by` = ?, `pay_date` = ?, `user_id` = ?, `del_flag` = ?, `delivery_name` = ?, `delivery_address` = ?, `delivery_phone` = ?, `total_count` = ? WHERE `id` = ? 
2019-07-11 09:40:30.067 DEBUG 4420 [nio-8980-exec-8] [c.j.modules.app.dao.OrderDao.update    ] - ==> Parameters: 071109402369401(String), 1(String), 1(String), 3000(String), 0(String), 0(String), 3000(String), 微信(String), 201907119402300004(String), system(String), 2019-07-11 09:40:30.042(Timestamp), 123(String), 0(String), 范耘诚123(String), 辽宁省铁西区铁西广场23(String), 15004001841(String), 6(String), 336(String)
2019-07-11 09:40:30.112 DEBUG 4420 [nio-8980-exec-8] [c.j.modules.app.dao.OrderDao.update    ] - <==    Updates: 1
2019-07-11 09:40:30.205 DEBUG 4420 [nio-8980-exec-8] [c.j.c.m.m.provider.SelectSqlProvider   ] - 1毫秒: SELECT a.id AS "id", a.user_id AS "userId", a.discount_price AS "discountPrice", a.create_date AS "createDate", a.update_date AS "updateDate", a.create_by AS "createBy", a.update_by AS "updateBy", a.remarks AS "remarks", dd.id AS "discountDetail.id", dd.discount_id AS "discountDetail.discountId", dd.remarks AS "discountDetail.remarks", dd.detail_price AS "discountDetail.detailPrice", dd.detail_state AS "discountDetail.detailState", dd.create_date AS "discountDetail.createDate", dd.update_date AS "discountDetail.updateDate", dd.create_by AS "discountDetail.createBy", dd.update_by AS "discountDetail.updateBy", dd.del_flag AS "discountDetail.delFlag" FROM sys_discount a LEFT JOIN sys_discount_detail dd ON a.id = dd.discount_id WHERE a.user_id = #{sqlMap.where#user_id#EQ1} ORDER BY a.update_date DESC
2019-07-11 09:40:30.205 DEBUG 4420 [nio-8980-exec-8] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@6109d880] will be managed by Spring
2019-07-11 09:40:30.205 DEBUG 4420 [nio-8980-exec-8] [c.j.m.app.dao.DiscountDao.findList     ] - ==>  Preparing: SELECT a.id AS "id", a.user_id AS "userId", a.discount_price AS "discountPrice", a.create_date AS "createDate", a.update_date AS "updateDate", a.create_by AS "createBy", a.update_by AS "updateBy", a.remarks AS "remarks", dd.id AS "discountDetail.id", dd.discount_id AS "discountDetail.discountId", dd.remarks AS "discountDetail.remarks", dd.detail_price AS "discountDetail.detailPrice", dd.detail_state AS "discountDetail.detailState", dd.create_date AS "discountDetail.createDate", dd.update_date AS "discountDetail.updateDate", dd.create_by AS "discountDetail.createBy", dd.update_by AS "discountDetail.updateBy", dd.del_flag AS "discountDetail.delFlag" FROM sys_discount a LEFT JOIN sys_discount_detail dd ON a.id = dd.discount_id WHERE a.user_id = ? ORDER BY a.update_date DESC 
2019-07-11 09:40:30.206 DEBUG 4420 [nio-8980-exec-8] [c.j.m.app.dao.DiscountDao.findList     ] - ==> Parameters: 123(String)
2019-07-11 09:40:30.232 DEBUG 4420 [nio-8980-exec-8] [c.j.m.app.dao.DiscountDao.findList     ] - <==      Total: 1
2019-07-11 09:40:30.234 DEBUG 4420 [nio-8980-exec-8] [c.j.c.m.m.provider.UpdateSqlProvider   ] - 1毫秒: UPDATE sys_discount SET `user_id` = #{userId}, `discount_price` = #{discountPrice}, `update_date` = #{updateDate}, `update_by` = #{updateBy}, `remarks` = #{remarks} WHERE `id` = #{id}
2019-07-11 09:40:30.235 DEBUG 4420 [nio-8980-exec-8] [c.j.modules.app.dao.DiscountDao.update ] - ==>  Preparing: UPDATE sys_discount SET `user_id` = ?, `discount_price` = ?, `update_date` = ?, `update_by` = ?, `remarks` = ? WHERE `id` = ? 
2019-07-11 09:40:30.237 DEBUG 4420 [nio-8980-exec-8] [c.j.modules.app.dao.DiscountDao.update ] - ==> Parameters: 123(String), 0(String), 2019-07-11 09:40:30.234(Timestamp), system(String), 备注(String), 1(String)
2019-07-11 09:40:30.282 DEBUG 4420 [nio-8980-exec-8] [c.j.modules.app.dao.DiscountDao.update ] - <==    Updates: 1
2019-07-11 10:20:03.762 INFO  12872 [           main] [com.jeesite.modules.Application        ] - Starting Application on DESKTOP-FVHI4E5 with PID 12872 (E:\gitlabHome\HaoLangZhongProject\HaoLangZhong\src\main\webapp\WEB-INF\classes started by 1111111 in E:\gitlabHome\HaoLangZhongProject\HaoLangZhong)
2019-07-11 10:20:03.767 DEBUG 12872 [           main] [com.jeesite.modules.Application        ] - Running with Spring Boot v2.0.6.RELEASE, Spring v5.0.10.RELEASE
2019-07-11 10:20:03.767 INFO  12872 [           main] [com.jeesite.modules.Application        ] - The following profiles are active: default
2019-07-11 10:20:05.893 INFO  12872 [           main] [com.jeesite.common.config.Global       ] - Config files: [classpath:config/jeesite-core.yml, classpath:config/application.yml]
2019-07-11 10:20:05.894 INFO  12872 [           main] [com.jeesite.common.config.Global       ] - Spring cache cluster mode: false, session manager name: J1CacheSession
2019-07-11 10:20:06.425 INFO  12872 [           main] [com.jeesite.common.config.Global       ] - user.home: C:/Users/15040
2019-07-11 10:20:06.425 INFO  12872 [           main] [com.jeesite.common.config.Global       ] - user.dir: E:/gitlabHome/HaoLangZhongProject/HaoLangZhong
2019-07-11 10:20:06.426 INFO  12872 [           main] [com.jeesite.common.config.Global       ] - logPath: E:/gitlabHome/HaoLangZhongProject/HaoLangZhong/src/main/webapp/WEB-INF/classes

   _____        ___  _   _           ___
  |_   _|      / __'(_)_| |_        /   |
  _ | | __  __ \___ | |_   _| __   / /| |
 ( .| |/__\/__\ ___)| | | |_ /__\ / /_| |_
  \___|\__.\__.|____|_| \___)\__.(____   _|  :: JeeSite V4.1.3 :: 
======================================|_|==========================

    欢迎使用 好郎中 V4.1

    您当前的版本为社区版，官方网站：http://jeesite.com

    机器码是：6c59ab5175477606a72e1628bfd13f1a
    产品名称：好郎中
    公司名称：好郎中

===================================================================

2019-07-11 10:20:07.613 INFO  12872 [           main] [o.s.b.w.embedded.tomcat.TomcatWebServer] - Tomcat initialized with port(s): 8980 (http)
2019-07-11 10:20:08.321 DEBUG 12872 [           main] [com.jeesite.common.config.Global       ] - Update E:\gitlabHome\HaoLangZhongProject\HaoLangZhong\src\main\webapp\WEB-INF\classes\config\application.yml jdbc.password encryption success.
2019-07-11 10:20:08.783 DEBUG 12872 [           main] [c.j.common.datasource.RoutingDataSource] - Set default target data source success.
2019-07-11 10:20:15.234 DEBUG 12872 [           main] [com.jeesite.common.beetl.BeetlUtils    ] - Beetl config files: [classpath:/config/beetl-core.properties, classpath:/config/beetl.properties]
2019-07-11 10:20:15.501 DEBUG 12872 [           main] [c.j.c.m.m.provider.SelectSqlProvider   ] - 4毫秒: SELECT a.status AS "status", a.create_by AS "createBy", a.create_date AS "createDate", a.update_by AS "updateBy", a.update_date AS "updateDate", a.remarks AS "remarks", a.module_code AS "moduleCode", a.module_name AS "moduleName", a.description AS "description", a.main_class_name AS "mainClassName", a.current_version AS "currentVersion", a.upgrade_info AS "upgradeInfo" FROM js_sys_module a WHERE a.status = #{sqlMap.where#status#EQ1} ORDER BY a.update_date DESC
2019-07-11 10:20:15.527 DEBUG 12872 [           main] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@22e650e] will not be managed by Spring
2019-07-11 10:20:15.539 DEBUG 12872 [           main] [c.j.modules.sys.dao.ModuleDao.findList ] - ==>  Preparing: SELECT a.status AS "status", a.create_by AS "createBy", a.create_date AS "createDate", a.update_by AS "updateBy", a.update_date AS "updateDate", a.remarks AS "remarks", a.module_code AS "moduleCode", a.module_name AS "moduleName", a.description AS "description", a.main_class_name AS "mainClassName", a.current_version AS "currentVersion", a.upgrade_info AS "upgradeInfo" FROM js_sys_module a WHERE a.status = ? ORDER BY a.update_date DESC 
2019-07-11 10:20:15.569 DEBUG 12872 [           main] [c.j.modules.sys.dao.ModuleDao.findList ] - ==> Parameters: 0(String)
2019-07-11 10:20:15.616 DEBUG 12872 [           main] [c.j.modules.sys.dao.ModuleDao.findList ] - <==      Total: 2
2019-07-11 10:20:15.753 DEBUG 12872 [           main] [c.j.c.m.m.provider.SelectSqlProvider   ] - 1毫秒: SELECT a.corp_code AS "corpCode", a.corp_name AS "corpName", a.status AS "status", a.create_by AS "createBy", a.create_date AS "createDate", a.update_by AS "updateBy", a.update_date AS "updateDate", a.remarks AS "remarks", a.user_code AS "userCode", a.login_code AS "loginCode", a.user_name AS "userName", a.password AS "password", a.email AS "email", a.mobile AS "mobile", a.phone AS "phone", a.sex AS "sex", a.avatar AS "avatar", a.sign AS "sign", a.wx_openid AS "wxOpenid", a.mobile_imei AS "mobileImei", a.user_type AS "userType", a.ref_code AS "refCode", a.ref_name AS "refName", a.mgr_type AS "mgrType", a.pwd_security_level AS "pwdSecurityLevel", a.pwd_update_date AS "pwdUpdateDate", a.pwd_update_record AS "pwdUpdateRecord", a.pwd_question AS "pwdQuestion", a.pwd_question_answer AS "pwdQuestionAnswer", a.pwd_question_2 AS "pwdQuestion2", a.pwd_question_answer_2 AS "pwdQuestionAnswer2", a.pwd_question_3 AS "pwdQuestion3", a.pwd_question_answer_3 AS "pwdQuestionAnswer3", a.pwd_quest_update_date AS "pwdQuestUpdateDate", a.last_login_ip AS "lastLoginIp", a.last_login_date AS "lastLoginDate", a.freeze_date AS "freezeDate", a.freeze_cause AS "freezeCause", a.user_weight AS "userWeight", a.extend_s1 AS "extend.extendS1", a.extend_s2 AS "extend.extendS2", a.extend_s3 AS "extend.extendS3", a.extend_s4 AS "extend.extendS4", a.extend_s5 AS "extend.extendS5", a.extend_s6 AS "extend.extendS6", a.extend_s7 AS "extend.extendS7", a.extend_s8 AS "extend.extendS8", a.extend_i1 AS "extend.extendI1", a.extend_i2 AS "extend.extendI2", a.extend_i3 AS "extend.extendI3", a.extend_i4 AS "extend.extendI4", a.extend_f1 AS "extend.extendF1", a.extend_f2 AS "extend.extendF2", a.extend_f3 AS "extend.extendF3", a.extend_f4 AS "extend.extendF4", a.extend_d1 AS "extend.extendD1", a.extend_d2 AS "extend.extendD2", a.extend_d3 AS "extend.extendD3", a.extend_d4 AS "extend.extendD4" FROM js_sys_user a WHERE a.`user_code` = #{userCode}
2019-07-11 10:20:15.755 DEBUG 12872 [           main] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@22e650e] will be managed by Spring
2019-07-11 10:20:15.755 DEBUG 12872 [           main] [com.jeesite.modules.sys.dao.UserDao.get] - ==>  Preparing: SELECT a.corp_code AS "corpCode", a.corp_name AS "corpName", a.status AS "status", a.create_by AS "createBy", a.create_date AS "createDate", a.update_by AS "updateBy", a.update_date AS "updateDate", a.remarks AS "remarks", a.user_code AS "userCode", a.login_code AS "loginCode", a.user_name AS "userName", a.password AS "password", a.email AS "email", a.mobile AS "mobile", a.phone AS "phone", a.sex AS "sex", a.avatar AS "avatar", a.sign AS "sign", a.wx_openid AS "wxOpenid", a.mobile_imei AS "mobileImei", a.user_type AS "userType", a.ref_code AS "refCode", a.ref_name AS "refName", a.mgr_type AS "mgrType", a.pwd_security_level AS "pwdSecurityLevel", a.pwd_update_date AS "pwdUpdateDate", a.pwd_update_record AS "pwdUpdateRecord", a.pwd_question AS "pwdQuestion", a.pwd_question_answer AS "pwdQuestionAnswer", a.pwd_question_2 AS "pwdQuestion2", a.pwd_question_answer_2 AS "pwdQuestionAnswer2", a.pwd_question_3 AS "pwdQuestion3", a.pwd_question_answer_3 AS "pwdQuestionAnswer3", a.pwd_quest_update_date AS "pwdQuestUpdateDate", a.last_login_ip AS "lastLoginIp", a.last_login_date AS "lastLoginDate", a.freeze_date AS "freezeDate", a.freeze_cause AS "freezeCause", a.user_weight AS "userWeight", a.extend_s1 AS "extend.extendS1", a.extend_s2 AS "extend.extendS2", a.extend_s3 AS "extend.extendS3", a.extend_s4 AS "extend.extendS4", a.extend_s5 AS "extend.extendS5", a.extend_s6 AS "extend.extendS6", a.extend_s7 AS "extend.extendS7", a.extend_s8 AS "extend.extendS8", a.extend_i1 AS "extend.extendI1", a.extend_i2 AS "extend.extendI2", a.extend_i3 AS "extend.extendI3", a.extend_i4 AS "extend.extendI4", a.extend_f1 AS "extend.extendF1", a.extend_f2 AS "extend.extendF2", a.extend_f3 AS "extend.extendF3", a.extend_f4 AS "extend.extendF4", a.extend_d1 AS "extend.extendD1", a.extend_d2 AS "extend.extendD2", a.extend_d3 AS "extend.extendD3", a.extend_d4 AS "extend.extendD4" FROM js_sys_user a WHERE a.`user_code` = ? 
2019-07-11 10:20:15.756 DEBUG 12872 [           main] [com.jeesite.modules.sys.dao.UserDao.get] - ==> Parameters: system(String)
2019-07-11 10:20:15.784 DEBUG 12872 [           main] [com.jeesite.modules.sys.dao.UserDao.get] - <==      Total: 1
2019-07-11 10:20:15.830 DEBUG 12872 [           main] [c.j.m.s.dao.RoleDao.findListByUserCode ] - ==>  Preparing: SELECT a.corp_code AS "corpCode", a.corp_name AS "corpName", a.status AS "status", a.create_by AS "createBy", a.create_date AS "createDate", a.update_by AS "updateBy", a.update_date AS "updateDate", a.remarks AS "remarks", a.role_code AS "roleCode", a.role_name AS "roleName", a.role_type AS "roleType", a.role_sort AS "roleSort", a.is_sys AS "isSys", a.user_type AS "userType", a.data_scope AS "dataScope" FROM js_sys_role a JOIN js_sys_user_role ur ON a.role_code = ur.role_code WHERE a.status = ? AND ur.user_code = ? ORDER BY a.role_sort ASC 
2019-07-11 10:20:15.831 DEBUG 12872 [           main] [c.j.m.s.dao.RoleDao.findListByUserCode ] - ==> Parameters: 0(String), system(String)
2019-07-11 10:20:15.855 DEBUG 12872 [           main] [c.j.m.s.dao.RoleDao.findListByUserCode ] - <==      Total: 0
2019-07-11 10:20:15.900 DEBUG 12872 [           main] [c.j.c.m.m.provider.UpdateSqlProvider   ] - 206毫秒: UPDATE js_sys_menu SET `status` = #{param1.status}, `update_by` = #{param1.updateBy}, `update_date` = #{param1.updateDate} WHERE status != #{param2.STATUS_DELETE} AND module_codes LIKE #{param2.sqlMap.where#module_codes#LIKE1}
2019-07-11 10:20:15.900 DEBUG 12872 [           main] [c.j.m.s.d.MenuDao.updateStatusByEntity ] - ==>  Preparing: UPDATE js_sys_menu SET `status` = ?, `update_by` = ?, `update_date` = ? WHERE status != ? AND module_codes LIKE ? 
2019-07-11 10:20:15.902 DEBUG 12872 [           main] [c.j.m.s.d.MenuDao.updateStatusByEntity ] - ==> Parameters: 2(String), system(String), 2019-07-11 10:20:15.899(Timestamp), 1(String), %cms%(String)
2019-07-11 10:20:15.950 DEBUG 12872 [           main] [c.j.m.s.d.MenuDao.updateStatusByEntity ] - <==    Updates: 7
2019-07-11 10:20:16.064 DEBUG 12872 [           main] [c.j.c.m.m.provider.UpdateSqlProvider   ] - 2毫秒: UPDATE js_sys_menu SET `status` = #{param1.status}, `update_by` = #{param1.updateBy}, `update_date` = #{param1.updateDate} WHERE status != #{param2.STATUS_DELETE} AND module_codes LIKE #{param2.sqlMap.where#module_codes#LIKE1}
2019-07-11 10:20:16.065 DEBUG 12872 [           main] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@22e650e] will be managed by Spring
2019-07-11 10:20:16.066 DEBUG 12872 [           main] [c.j.m.s.d.MenuDao.updateStatusByEntity ] - ==>  Preparing: UPDATE js_sys_menu SET `status` = ?, `update_by` = ?, `update_date` = ? WHERE status != ? AND module_codes LIKE ? 
2019-07-11 10:20:16.066 DEBUG 12872 [           main] [c.j.m.s.d.MenuDao.updateStatusByEntity ] - ==> Parameters: 0(String), system(String), 2019-07-11 10:20:16.064(Timestamp), 1(String), %core%(String)
2019-07-11 10:20:16.114 DEBUG 12872 [           main] [c.j.m.s.d.MenuDao.updateStatusByEntity ] - <==    Updates: 70
2019-07-11 10:20:18.125 INFO  12872 [           main] [o.s.b.w.embedded.tomcat.TomcatWebServer] - Tomcat started on port(s): 8980 (http) with context path '/js'
2019-07-11 10:20:18.130 INFO  12872 [           main] [com.jeesite.modules.Application        ] - Started Application in 15.078 seconds (JVM running for 15.839)
2019-07-11 10:20:18.519 DEBUG 12872 [nio-8980-exec-2] [c.j.c.m.m.provider.SelectSqlProvider   ] - 0毫秒: SELECT a.id AS "id", a.config_name AS "configName", a.config_key AS "configKey", a.config_value AS "configValue", a.is_sys AS "isSys", a.create_by AS "createBy", a.create_date AS "createDate", a.update_by AS "updateBy", a.update_date AS "updateDate", a.remarks AS "remarks" FROM js_sys_config a ORDER BY a.config_key
2019-07-11 10:20:18.520 DEBUG 12872 [nio-8980-exec-2] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@22e650e] will not be managed by Spring
2019-07-11 10:20:18.521 DEBUG 12872 [nio-8980-exec-2] [c.j.modules.sys.dao.ConfigDao.findList ] - ==>  Preparing: SELECT a.id AS "id", a.config_name AS "configName", a.config_key AS "configKey", a.config_value AS "configValue", a.is_sys AS "isSys", a.create_by AS "createBy", a.create_date AS "createDate", a.update_by AS "updateBy", a.update_date AS "updateDate", a.remarks AS "remarks" FROM js_sys_config a ORDER BY a.config_key 
2019-07-11 10:20:18.521 DEBUG 12872 [nio-8980-exec-2] [c.j.modules.sys.dao.ConfigDao.findList ] - ==> Parameters: 
2019-07-11 10:20:18.556 DEBUG 12872 [nio-8980-exec-2] [c.j.modules.sys.dao.ConfigDao.findList ] - <==      Total: 18
2019-07-11 10:20:28.946 INFO  12872 [nio-8980-exec-8] [com.jeesite.common.cache.CacheUtils    ] - removeCache: userCache_system
2019-07-11 10:20:28.984 DEBUG 12872 [nio-8980-exec-8] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@22e650e] will be managed by Spring
2019-07-11 10:20:28.987 DEBUG 12872 [nio-8980-exec-8] [c.j.m.sys.dao.UserDao.updateLoginInfo  ] - ==>  Preparing: UPDATE js_sys_user SET last_login_ip = ?, last_login_date = ? WHERE user_code = ? 
2019-07-11 10:20:28.987 DEBUG 12872 [nio-8980-exec-8] [c.j.m.sys.dao.UserDao.updateLoginInfo  ] - ==> Parameters: 0:0:0:0:0:0:0:1(String), 2019-07-11 10:20:28.974(Timestamp), system(String)
2019-07-11 10:20:29.035 DEBUG 12872 [nio-8980-exec-8] [c.j.m.sys.dao.UserDao.updateLoginInfo  ] - <==    Updates: 1
2019-07-11 10:20:29.237 DEBUG 12872 [  SaveLogThread] [c.j.c.m.m.provider.InsertSqlProvider   ] - 2毫秒: INSERT INTO js_sys_log (`id`, `log_type`, `log_title`, `create_by`, `create_by_name`, `create_date`, `request_uri`, `request_method`, `request_params`, `remote_addr`, `server_addr`, `is_exception`, `exception_info`, `user_agent`, `device_name`, `browser_name`, `execute_time`) VALUES (#{id}, #{logType}, #{logTitle}, #{createBy}, #{createByName}, #{createDate}, #{requestUri}, #{requestMethod}, #{requestParams}, #{remoteAddr}, #{serverAddr}, #{isException}, #{exceptionInfo}, #{userAgent}, #{deviceName}, #{browserName}, #{executeTime})
2019-07-11 10:20:29.238 DEBUG 12872 [  SaveLogThread] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@22e650e] will be managed by Spring
2019-07-11 10:20:29.239 DEBUG 12872 [  SaveLogThread] [c.jeesite.modules.sys.dao.LogDao.insert] - ==>  Preparing: INSERT INTO js_sys_log (`id`, `log_type`, `log_title`, `create_by`, `create_by_name`, `create_date`, `request_uri`, `request_method`, `request_params`, `remote_addr`, `server_addr`, `is_exception`, `exception_info`, `user_agent`, `device_name`, `browser_name`, `execute_time`) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) 
2019-07-11 10:20:29.243 DEBUG 12872 [  SaveLogThread] [c.jeesite.modules.sys.dao.LogDao.insert] - ==> Parameters: 1149141378147008512(String), loginLogout(String), 系统登录(String), system(String), 超级管理员(String), 2019-07-11 10:20:29.221(Timestamp), /js/a/login(String), POST(String), username=F3EDC7D2C193E0B8DCF554C726719ED2&password=*&validCode=(String), 0:0:0:0:0:0:0:1(String), http://localhost:8980(String), 0(String), (String), Mozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X) AppleWebKit/604.1.38 (KHTML, like Gecko) Version/11.0 Mobile/15A372 Safari/604.1(String), iOS 11 (iPhone)(String), Mobile Safari(String), 0(Long)
2019-07-11 10:20:29.294 DEBUG 12872 [  SaveLogThread] [c.jeesite.modules.sys.dao.LogDao.insert] - <==    Updates: 1
2019-07-11 10:20:29.344 DEBUG 12872 [nio-8980-exec-8] [c.j.c.m.m.provider.SelectSqlProvider   ] - 2毫秒: SELECT a.status AS "status", a.create_by AS "createBy", a.create_date AS "createDate", a.update_by AS "updateBy", a.update_date AS "updateDate", a.remarks AS "remarks", a.parent_code AS "parentCode", a.parent_codes AS "parentCodes", a.tree_sort AS "treeSort", a.tree_sorts AS "treeSorts", a.tree_leaf AS "treeLeaf", a.tree_level AS "treeLevel", a.tree_names AS "treeNames", a.menu_code AS "menuCode", a.menu_name AS "menuNameOrig", a.menu_type AS "menuType", a.menu_href AS "menuHref", a.menu_target AS "menuTarget", a.menu_icon AS "menuIcon", a.menu_color AS "menuColor", a.permission AS "permission", a.weight AS "weight", a.is_show AS "isShow", a.sys_code AS "sysCode", a.module_codes AS "moduleCodes", a.extend_s1 AS "extend.extendS1", a.extend_s2 AS "extend.extendS2", a.extend_s3 AS "extend.extendS3", a.extend_s4 AS "extend.extendS4", a.extend_s5 AS "extend.extendS5", a.extend_s6 AS "extend.extendS6", a.extend_s7 AS "extend.extendS7", a.extend_s8 AS "extend.extendS8", a.extend_i1 AS "extend.extendI1", a.extend_i2 AS "extend.extendI2", a.extend_i3 AS "extend.extendI3", a.extend_i4 AS "extend.extendI4", a.extend_f1 AS "extend.extendF1", a.extend_f2 AS "extend.extendF2", a.extend_f3 AS "extend.extendF3", a.extend_f4 AS "extend.extendF4", a.extend_d1 AS "extend.extendD1", a.extend_d2 AS "extend.extendD2", a.extend_d3 AS "extend.extendD3", a.extend_d4 AS "extend.extendD4" FROM js_sys_menu a WHERE a.status = #{sqlMap.where#status#EQ1} AND a.sys_code = #{sqlMap.where#sys_code#EQ1} AND a.weight >= #{sqlMap.where.weight#GTE1.val} ORDER BY a.sys_code, a.tree_sorts, a.menu_code
2019-07-11 10:20:29.346 DEBUG 12872 [nio-8980-exec-8] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@22e650e] will be managed by Spring
2019-07-11 10:20:29.346 DEBUG 12872 [nio-8980-exec-8] [c.j.modules.sys.dao.MenuDao.findList   ] - ==>  Preparing: SELECT a.status AS "status", a.create_by AS "createBy", a.create_date AS "createDate", a.update_by AS "updateBy", a.update_date AS "updateDate", a.remarks AS "remarks", a.parent_code AS "parentCode", a.parent_codes AS "parentCodes", a.tree_sort AS "treeSort", a.tree_sorts AS "treeSorts", a.tree_leaf AS "treeLeaf", a.tree_level AS "treeLevel", a.tree_names AS "treeNames", a.menu_code AS "menuCode", a.menu_name AS "menuNameOrig", a.menu_type AS "menuType", a.menu_href AS "menuHref", a.menu_target AS "menuTarget", a.menu_icon AS "menuIcon", a.menu_color AS "menuColor", a.permission AS "permission", a.weight AS "weight", a.is_show AS "isShow", a.sys_code AS "sysCode", a.module_codes AS "moduleCodes", a.extend_s1 AS "extend.extendS1", a.extend_s2 AS "extend.extendS2", a.extend_s3 AS "extend.extendS3", a.extend_s4 AS "extend.extendS4", a.extend_s5 AS "extend.extendS5", a.extend_s6 AS "extend.extendS6", a.extend_s7 AS "extend.extendS7", a.extend_s8 AS "extend.extendS8", a.extend_i1 AS "extend.extendI1", a.extend_i2 AS "extend.extendI2", a.extend_i3 AS "extend.extendI3", a.extend_i4 AS "extend.extendI4", a.extend_f1 AS "extend.extendF1", a.extend_f2 AS "extend.extendF2", a.extend_f3 AS "extend.extendF3", a.extend_f4 AS "extend.extendF4", a.extend_d1 AS "extend.extendD1", a.extend_d2 AS "extend.extendD2", a.extend_d3 AS "extend.extendD3", a.extend_d4 AS "extend.extendD4" FROM js_sys_menu a WHERE a.status = ? AND a.sys_code = ? AND a.weight >= ? ORDER BY a.sys_code, a.tree_sorts, a.menu_code 
2019-07-11 10:20:29.348 DEBUG 12872 [nio-8980-exec-8] [c.j.modules.sys.dao.MenuDao.findList   ] - ==> Parameters: 0(String), default(String), 40(Integer)
2019-07-11 10:20:29.422 DEBUG 12872 [nio-8980-exec-8] [c.j.modules.sys.dao.MenuDao.findList   ] - <==      Total: 70
2019-07-11 10:20:29.647 DEBUG 12872 [io-8980-exec-10] [c.j.c.m.m.provider.SelectSqlProvider   ] - 1毫秒: SELECT a.status AS "status", a.create_by AS "createBy", a.create_date AS "createDate", a.update_by AS "updateBy", a.update_date AS "updateDate", a.remarks AS "remarks", a.id AS "id", a.dict_name AS "dictName", a.dict_type AS "dictType", a.is_sys AS "isSys" FROM js_sys_dict_type a WHERE a.status = #{sqlMap.where#status#EQ1} ORDER BY a.dict_type, a.update_date DESC
2019-07-11 10:20:29.650 DEBUG 12872 [io-8980-exec-10] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@22e650e] will not be managed by Spring
2019-07-11 10:20:29.651 DEBUG 12872 [io-8980-exec-10] [c.j.m.sys.dao.DictTypeDao.findList     ] - ==>  Preparing: SELECT a.status AS "status", a.create_by AS "createBy", a.create_date AS "createDate", a.update_by AS "updateBy", a.update_date AS "updateDate", a.remarks AS "remarks", a.id AS "id", a.dict_name AS "dictName", a.dict_type AS "dictType", a.is_sys AS "isSys" FROM js_sys_dict_type a WHERE a.status = ? ORDER BY a.dict_type, a.update_date DESC 
2019-07-11 10:20:29.651 DEBUG 12872 [io-8980-exec-10] [c.j.m.sys.dao.DictTypeDao.findList     ] - ==> Parameters: 0(String)
2019-07-11 10:20:29.682 DEBUG 12872 [io-8980-exec-10] [c.j.m.sys.dao.DictTypeDao.findList     ] - <==      Total: 31
2019-07-11 10:20:29.746 DEBUG 12872 [io-8980-exec-10] [c.j.c.m.m.provider.SelectSqlProvider   ] - 1毫秒: SELECT a.corp_code AS "corpCode", a.corp_name AS "corpName", a.status AS "status", a.create_by AS "createBy", a.create_date AS "createDate", a.update_by AS "updateBy", a.update_date AS "updateDate", a.remarks AS "remarks", a.parent_code AS "parentCode", a.parent_codes AS "parentCodes", a.tree_sort AS "treeSort", a.tree_sorts AS "treeSorts", a.tree_leaf AS "treeLeaf", a.tree_level AS "treeLevel", a.tree_names AS "treeNames", a.dict_code AS "dictCode", a.dict_label AS "dictLabelOrig", a.dict_value AS "dictValue", a.dict_type AS "dictType", a.is_sys AS "isSys", a.description AS "description", a.css_style AS "cssStyle", a.css_class AS "cssClass", a.extend_s1 AS "extend.extendS1", a.extend_s2 AS "extend.extendS2", a.extend_s3 AS "extend.extendS3", a.extend_s4 AS "extend.extendS4", a.extend_s5 AS "extend.extendS5", a.extend_s6 AS "extend.extendS6", a.extend_s7 AS "extend.extendS7", a.extend_s8 AS "extend.extendS8", a.extend_i1 AS "extend.extendI1", a.extend_i2 AS "extend.extendI2", a.extend_i3 AS "extend.extendI3", a.extend_i4 AS "extend.extendI4", a.extend_f1 AS "extend.extendF1", a.extend_f2 AS "extend.extendF2", a.extend_f3 AS "extend.extendF3", a.extend_f4 AS "extend.extendF4", a.extend_d1 AS "extend.extendD1", a.extend_d2 AS "extend.extendD2", a.extend_d3 AS "extend.extendD3", a.extend_d4 AS "extend.extendD4" FROM js_sys_dict_data a WHERE a.status = #{sqlMap.where#status#EQ1} AND ( a.is_sys = #{sqlMap.where.is_sys#EQ1.val} OR a.corp_code = #{sqlMap.where.corp_code#EQ1.val} ) ORDER BY a.tree_sorts, a.dict_code
2019-07-11 10:20:29.748 DEBUG 12872 [io-8980-exec-10] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@22e650e] will be managed by Spring
2019-07-11 10:20:29.750 DEBUG 12872 [io-8980-exec-10] [c.j.m.sys.dao.DictDataDao.findList     ] - ==>  Preparing: SELECT a.corp_code AS "corpCode", a.corp_name AS "corpName", a.status AS "status", a.create_by AS "createBy", a.create_date AS "createDate", a.update_by AS "updateBy", a.update_date AS "updateDate", a.remarks AS "remarks", a.parent_code AS "parentCode", a.parent_codes AS "parentCodes", a.tree_sort AS "treeSort", a.tree_sorts AS "treeSorts", a.tree_leaf AS "treeLeaf", a.tree_level AS "treeLevel", a.tree_names AS "treeNames", a.dict_code AS "dictCode", a.dict_label AS "dictLabelOrig", a.dict_value AS "dictValue", a.dict_type AS "dictType", a.is_sys AS "isSys", a.description AS "description", a.css_style AS "cssStyle", a.css_class AS "cssClass", a.extend_s1 AS "extend.extendS1", a.extend_s2 AS "extend.extendS2", a.extend_s3 AS "extend.extendS3", a.extend_s4 AS "extend.extendS4", a.extend_s5 AS "extend.extendS5", a.extend_s6 AS "extend.extendS6", a.extend_s7 AS "extend.extendS7", a.extend_s8 AS "extend.extendS8", a.extend_i1 AS "extend.extendI1", a.extend_i2 AS "extend.extendI2", a.extend_i3 AS "extend.extendI3", a.extend_i4 AS "extend.extendI4", a.extend_f1 AS "extend.extendF1", a.extend_f2 AS "extend.extendF2", a.extend_f3 AS "extend.extendF3", a.extend_f4 AS "extend.extendF4", a.extend_d1 AS "extend.extendD1", a.extend_d2 AS "extend.extendD2", a.extend_d3 AS "extend.extendD3", a.extend_d4 AS "extend.extendD4" FROM js_sys_dict_data a WHERE a.status = ? AND ( a.is_sys = ? OR a.corp_code = ? ) ORDER BY a.tree_sorts, a.dict_code 
2019-07-11 10:20:29.751 DEBUG 12872 [io-8980-exec-10] [c.j.m.sys.dao.DictDataDao.findList     ] - ==> Parameters: 0(String), 1(String), 0(String)
2019-07-11 10:20:29.824 DEBUG 12872 [io-8980-exec-10] [c.j.m.sys.dao.DictDataDao.findList     ] - <==      Total: 126
2019-07-11 10:20:29.985 DEBUG 12872 [io-8980-exec-10] [c.j.c.m.m.provider.SelectSqlProvider   ] - 1毫秒: SELECT a.status AS "status", a.create_by AS "createBy", a.create_date AS "createDate", a.update_by AS "updateBy", a.update_date AS "updateDate", a.remarks AS "remarks", a.parent_code AS "parentCode", a.parent_codes AS "parentCodes", a.tree_sort AS "treeSort", a.tree_sorts AS "treeSorts", a.tree_leaf AS "treeLeaf", a.tree_level AS "treeLevel", a.tree_names AS "treeNames", a.menu_code AS "menuCode", a.menu_name AS "menuNameOrig", a.menu_type AS "menuType", a.menu_href AS "menuHref", a.menu_target AS "menuTarget", a.menu_icon AS "menuIcon", a.menu_color AS "menuColor", a.permission AS "permission", a.weight AS "weight", a.is_show AS "isShow", a.sys_code AS "sysCode", a.module_codes AS "moduleCodes", a.extend_s1 AS "extend.extendS1", a.extend_s2 AS "extend.extendS2", a.extend_s3 AS "extend.extendS3", a.extend_s4 AS "extend.extendS4", a.extend_s5 AS "extend.extendS5", a.extend_s6 AS "extend.extendS6", a.extend_s7 AS "extend.extendS7", a.extend_s8 AS "extend.extendS8", a.extend_i1 AS "extend.extendI1", a.extend_i2 AS "extend.extendI2", a.extend_i3 AS "extend.extendI3", a.extend_i4 AS "extend.extendI4", a.extend_f1 AS "extend.extendF1", a.extend_f2 AS "extend.extendF2", a.extend_f3 AS "extend.extendF3", a.extend_f4 AS "extend.extendF4", a.extend_d1 AS "extend.extendD1", a.extend_d2 AS "extend.extendD2", a.extend_d3 AS "extend.extendD3", a.extend_d4 AS "extend.extendD4" FROM js_sys_menu a WHERE a.status = #{sqlMap.where#status#EQ1} AND a.parent_code = #{sqlMap.where#parent_code#EQ1} AND a.sys_code = #{sqlMap.where#sys_code#EQ1} AND a.weight >= #{sqlMap.where.weight#GTE1.val} ORDER BY a.sys_code, a.tree_sorts, a.menu_code
2019-07-11 10:20:29.985 DEBUG 12872 [io-8980-exec-10] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@22e650e] will be managed by Spring
2019-07-11 10:20:29.985 DEBUG 12872 [io-8980-exec-10] [c.j.modules.sys.dao.MenuDao.findList   ] - ==>  Preparing: SELECT a.status AS "status", a.create_by AS "createBy", a.create_date AS "createDate", a.update_by AS "updateBy", a.update_date AS "updateDate", a.remarks AS "remarks", a.parent_code AS "parentCode", a.parent_codes AS "parentCodes", a.tree_sort AS "treeSort", a.tree_sorts AS "treeSorts", a.tree_leaf AS "treeLeaf", a.tree_level AS "treeLevel", a.tree_names AS "treeNames", a.menu_code AS "menuCode", a.menu_name AS "menuNameOrig", a.menu_type AS "menuType", a.menu_href AS "menuHref", a.menu_target AS "menuTarget", a.menu_icon AS "menuIcon", a.menu_color AS "menuColor", a.permission AS "permission", a.weight AS "weight", a.is_show AS "isShow", a.sys_code AS "sysCode", a.module_codes AS "moduleCodes", a.extend_s1 AS "extend.extendS1", a.extend_s2 AS "extend.extendS2", a.extend_s3 AS "extend.extendS3", a.extend_s4 AS "extend.extendS4", a.extend_s5 AS "extend.extendS5", a.extend_s6 AS "extend.extendS6", a.extend_s7 AS "extend.extendS7", a.extend_s8 AS "extend.extendS8", a.extend_i1 AS "extend.extendI1", a.extend_i2 AS "extend.extendI2", a.extend_i3 AS "extend.extendI3", a.extend_i4 AS "extend.extendI4", a.extend_f1 AS "extend.extendF1", a.extend_f2 AS "extend.extendF2", a.extend_f3 AS "extend.extendF3", a.extend_f4 AS "extend.extendF4", a.extend_d1 AS "extend.extendD1", a.extend_d2 AS "extend.extendD2", a.extend_d3 AS "extend.extendD3", a.extend_d4 AS "extend.extendD4" FROM js_sys_menu a WHERE a.status = ? AND a.parent_code = ? AND a.sys_code = ? AND a.weight >= ? ORDER BY a.sys_code, a.tree_sorts, a.menu_code 
2019-07-11 10:20:29.986 DEBUG 12872 [io-8980-exec-10] [c.j.modules.sys.dao.MenuDao.findList   ] - ==> Parameters: 0(String), 0(String), default(String), 40(Integer)
2019-07-11 10:20:30.012 DEBUG 12872 [io-8980-exec-10] [c.j.modules.sys.dao.MenuDao.findList   ] - <==      Total: 3
2019-07-11 10:20:30.157 DEBUG 12872 [io-8980-exec-10] [c.j.c.m.m.provider.SelectSqlProvider   ] - 2毫秒: SELECT a.status AS "status", a.create_by AS "createBy", a.create_date AS "createDate", a.update_by AS "updateBy", a.update_date AS "updateDate", a.remarks AS "remarks", a.parent_code AS "parentCode", a.parent_codes AS "parentCodes", a.tree_sort AS "treeSort", a.tree_sorts AS "treeSorts", a.tree_leaf AS "treeLeaf", a.tree_level AS "treeLevel", a.tree_names AS "treeNames", a.menu_code AS "menuCode", a.menu_name AS "menuNameOrig", a.menu_type AS "menuType", a.menu_href AS "menuHref", a.menu_target AS "menuTarget", a.menu_icon AS "menuIcon", a.menu_color AS "menuColor", a.permission AS "permission", a.weight AS "weight", a.is_show AS "isShow", a.sys_code AS "sysCode", a.module_codes AS "moduleCodes", a.extend_s1 AS "extend.extendS1", a.extend_s2 AS "extend.extendS2", a.extend_s3 AS "extend.extendS3", a.extend_s4 AS "extend.extendS4", a.extend_s5 AS "extend.extendS5", a.extend_s6 AS "extend.extendS6", a.extend_s7 AS "extend.extendS7", a.extend_s8 AS "extend.extendS8", a.extend_i1 AS "extend.extendI1", a.extend_i2 AS "extend.extendI2", a.extend_i3 AS "extend.extendI3", a.extend_i4 AS "extend.extendI4", a.extend_f1 AS "extend.extendF1", a.extend_f2 AS "extend.extendF2", a.extend_f3 AS "extend.extendF3", a.extend_f4 AS "extend.extendF4", a.extend_d1 AS "extend.extendD1", a.extend_d2 AS "extend.extendD2", a.extend_d3 AS "extend.extendD3", a.extend_d4 AS "extend.extendD4" FROM js_sys_menu a WHERE a.status = #{sqlMap.where#status#EQ1} AND a.parent_code = #{sqlMap.where#parent_code#EQ1} AND a.sys_code = #{sqlMap.where#sys_code#EQ1} AND a.weight >= #{sqlMap.where.weight#GTE1.val} ORDER BY a.sys_code, a.tree_sorts, a.menu_code
2019-07-11 10:20:30.158 DEBUG 12872 [io-8980-exec-10] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@22e650e] will be managed by Spring
2019-07-11 10:20:30.159 DEBUG 12872 [io-8980-exec-10] [c.j.modules.sys.dao.MenuDao.findList   ] - ==>  Preparing: SELECT a.status AS "status", a.create_by AS "createBy", a.create_date AS "createDate", a.update_by AS "updateBy", a.update_date AS "updateDate", a.remarks AS "remarks", a.parent_code AS "parentCode", a.parent_codes AS "parentCodes", a.tree_sort AS "treeSort", a.tree_sorts AS "treeSorts", a.tree_leaf AS "treeLeaf", a.tree_level AS "treeLevel", a.tree_names AS "treeNames", a.menu_code AS "menuCode", a.menu_name AS "menuNameOrig", a.menu_type AS "menuType", a.menu_href AS "menuHref", a.menu_target AS "menuTarget", a.menu_icon AS "menuIcon", a.menu_color AS "menuColor", a.permission AS "permission", a.weight AS "weight", a.is_show AS "isShow", a.sys_code AS "sysCode", a.module_codes AS "moduleCodes", a.extend_s1 AS "extend.extendS1", a.extend_s2 AS "extend.extendS2", a.extend_s3 AS "extend.extendS3", a.extend_s4 AS "extend.extendS4", a.extend_s5 AS "extend.extendS5", a.extend_s6 AS "extend.extendS6", a.extend_s7 AS "extend.extendS7", a.extend_s8 AS "extend.extendS8", a.extend_i1 AS "extend.extendI1", a.extend_i2 AS "extend.extendI2", a.extend_i3 AS "extend.extendI3", a.extend_i4 AS "extend.extendI4", a.extend_f1 AS "extend.extendF1", a.extend_f2 AS "extend.extendF2", a.extend_f3 AS "extend.extendF3", a.extend_f4 AS "extend.extendF4", a.extend_d1 AS "extend.extendD1", a.extend_d2 AS "extend.extendD2", a.extend_d3 AS "extend.extendD3", a.extend_d4 AS "extend.extendD4" FROM js_sys_menu a WHERE a.status = ? AND a.parent_code = ? AND a.sys_code = ? AND a.weight >= ? ORDER BY a.sys_code, a.tree_sorts, a.menu_code 
2019-07-11 10:20:30.160 DEBUG 12872 [io-8980-exec-10] [c.j.modules.sys.dao.MenuDao.findList   ] - ==> Parameters: 0(String), 1098426039438671872(String), default(String), 40(Integer)
2019-07-11 10:20:30.188 DEBUG 12872 [io-8980-exec-10] [c.j.modules.sys.dao.MenuDao.findList   ] - <==      Total: 7
2019-07-11 10:20:30.335 DEBUG 12872 [io-8980-exec-10] [c.j.c.m.m.provider.SelectSqlProvider   ] - 4毫秒: SELECT a.status AS "status", a.create_by AS "createBy", a.create_date AS "createDate", a.update_by AS "updateBy", a.update_date AS "updateDate", a.remarks AS "remarks", a.parent_code AS "parentCode", a.parent_codes AS "parentCodes", a.tree_sort AS "treeSort", a.tree_sorts AS "treeSorts", a.tree_leaf AS "treeLeaf", a.tree_level AS "treeLevel", a.tree_names AS "treeNames", a.menu_code AS "menuCode", a.menu_name AS "menuNameOrig", a.menu_type AS "menuType", a.menu_href AS "menuHref", a.menu_target AS "menuTarget", a.menu_icon AS "menuIcon", a.menu_color AS "menuColor", a.permission AS "permission", a.weight AS "weight", a.is_show AS "isShow", a.sys_code AS "sysCode", a.module_codes AS "moduleCodes", a.extend_s1 AS "extend.extendS1", a.extend_s2 AS "extend.extendS2", a.extend_s3 AS "extend.extendS3", a.extend_s4 AS "extend.extendS4", a.extend_s5 AS "extend.extendS5", a.extend_s6 AS "extend.extendS6", a.extend_s7 AS "extend.extendS7", a.extend_s8 AS "extend.extendS8", a.extend_i1 AS "extend.extendI1", a.extend_i2 AS "extend.extendI2", a.extend_i3 AS "extend.extendI3", a.extend_i4 AS "extend.extendI4", a.extend_f1 AS "extend.extendF1", a.extend_f2 AS "extend.extendF2", a.extend_f3 AS "extend.extendF3", a.extend_f4 AS "extend.extendF4", a.extend_d1 AS "extend.extendD1", a.extend_d2 AS "extend.extendD2", a.extend_d3 AS "extend.extendD3", a.extend_d4 AS "extend.extendD4" FROM js_sys_menu a WHERE a.status = #{sqlMap.where#status#EQ1} AND a.parent_code = #{sqlMap.where#parent_code#EQ1} AND a.sys_code = #{sqlMap.where#sys_code#EQ1} AND a.weight >= #{sqlMap.where.weight#GTE1.val} ORDER BY a.sys_code, a.tree_sorts, a.menu_code
2019-07-11 10:20:30.336 DEBUG 12872 [io-8980-exec-10] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@22e650e] will be managed by Spring
2019-07-11 10:20:30.338 DEBUG 12872 [io-8980-exec-10] [c.j.modules.sys.dao.MenuDao.findList   ] - ==>  Preparing: SELECT a.status AS "status", a.create_by AS "createBy", a.create_date AS "createDate", a.update_by AS "updateBy", a.update_date AS "updateDate", a.remarks AS "remarks", a.parent_code AS "parentCode", a.parent_codes AS "parentCodes", a.tree_sort AS "treeSort", a.tree_sorts AS "treeSorts", a.tree_leaf AS "treeLeaf", a.tree_level AS "treeLevel", a.tree_names AS "treeNames", a.menu_code AS "menuCode", a.menu_name AS "menuNameOrig", a.menu_type AS "menuType", a.menu_href AS "menuHref", a.menu_target AS "menuTarget", a.menu_icon AS "menuIcon", a.menu_color AS "menuColor", a.permission AS "permission", a.weight AS "weight", a.is_show AS "isShow", a.sys_code AS "sysCode", a.module_codes AS "moduleCodes", a.extend_s1 AS "extend.extendS1", a.extend_s2 AS "extend.extendS2", a.extend_s3 AS "extend.extendS3", a.extend_s4 AS "extend.extendS4", a.extend_s5 AS "extend.extendS5", a.extend_s6 AS "extend.extendS6", a.extend_s7 AS "extend.extendS7", a.extend_s8 AS "extend.extendS8", a.extend_i1 AS "extend.extendI1", a.extend_i2 AS "extend.extendI2", a.extend_i3 AS "extend.extendI3", a.extend_i4 AS "extend.extendI4", a.extend_f1 AS "extend.extendF1", a.extend_f2 AS "extend.extendF2", a.extend_f3 AS "extend.extendF3", a.extend_f4 AS "extend.extendF4", a.extend_d1 AS "extend.extendD1", a.extend_d2 AS "extend.extendD2", a.extend_d3 AS "extend.extendD3", a.extend_d4 AS "extend.extendD4" FROM js_sys_menu a WHERE a.status = ? AND a.parent_code = ? AND a.sys_code = ? AND a.weight >= ? ORDER BY a.sys_code, a.tree_sorts, a.menu_code 
2019-07-11 10:20:30.340 DEBUG 12872 [io-8980-exec-10] [c.j.modules.sys.dao.MenuDao.findList   ] - ==> Parameters: 0(String), 1098426039749050368(String), default(String), 40(Integer)
2019-07-11 10:20:30.368 DEBUG 12872 [io-8980-exec-10] [c.j.modules.sys.dao.MenuDao.findList   ] - <==      Total: 4
2019-07-11 10:20:30.509 DEBUG 12872 [io-8980-exec-10] [c.j.c.m.m.provider.SelectSqlProvider   ] - 1毫秒: SELECT a.status AS "status", a.create_by AS "createBy", a.create_date AS "createDate", a.update_by AS "updateBy", a.update_date AS "updateDate", a.remarks AS "remarks", a.parent_code AS "parentCode", a.parent_codes AS "parentCodes", a.tree_sort AS "treeSort", a.tree_sorts AS "treeSorts", a.tree_leaf AS "treeLeaf", a.tree_level AS "treeLevel", a.tree_names AS "treeNames", a.menu_code AS "menuCode", a.menu_name AS "menuNameOrig", a.menu_type AS "menuType", a.menu_href AS "menuHref", a.menu_target AS "menuTarget", a.menu_icon AS "menuIcon", a.menu_color AS "menuColor", a.permission AS "permission", a.weight AS "weight", a.is_show AS "isShow", a.sys_code AS "sysCode", a.module_codes AS "moduleCodes", a.extend_s1 AS "extend.extendS1", a.extend_s2 AS "extend.extendS2", a.extend_s3 AS "extend.extendS3", a.extend_s4 AS "extend.extendS4", a.extend_s5 AS "extend.extendS5", a.extend_s6 AS "extend.extendS6", a.extend_s7 AS "extend.extendS7", a.extend_s8 AS "extend.extendS8", a.extend_i1 AS "extend.extendI1", a.extend_i2 AS "extend.extendI2", a.extend_i3 AS "extend.extendI3", a.extend_i4 AS "extend.extendI4", a.extend_f1 AS "extend.extendF1", a.extend_f2 AS "extend.extendF2", a.extend_f3 AS "extend.extendF3", a.extend_f4 AS "extend.extendF4", a.extend_d1 AS "extend.extendD1", a.extend_d2 AS "extend.extendD2", a.extend_d3 AS "extend.extendD3", a.extend_d4 AS "extend.extendD4" FROM js_sys_menu a WHERE a.status = #{sqlMap.where#status#EQ1} AND a.parent_code = #{sqlMap.where#parent_code#EQ1} AND a.sys_code = #{sqlMap.where#sys_code#EQ1} AND a.weight >= #{sqlMap.where.weight#GTE1.val} ORDER BY a.sys_code, a.tree_sorts, a.menu_code
2019-07-11 10:20:30.510 DEBUG 12872 [io-8980-exec-10] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@22e650e] will be managed by Spring
2019-07-11 10:20:30.511 DEBUG 12872 [io-8980-exec-10] [c.j.modules.sys.dao.MenuDao.findList   ] - ==>  Preparing: SELECT a.status AS "status", a.create_by AS "createBy", a.create_date AS "createDate", a.update_by AS "updateBy", a.update_date AS "updateDate", a.remarks AS "remarks", a.parent_code AS "parentCode", a.parent_codes AS "parentCodes", a.tree_sort AS "treeSort", a.tree_sorts AS "treeSorts", a.tree_leaf AS "treeLeaf", a.tree_level AS "treeLevel", a.tree_names AS "treeNames", a.menu_code AS "menuCode", a.menu_name AS "menuNameOrig", a.menu_type AS "menuType", a.menu_href AS "menuHref", a.menu_target AS "menuTarget", a.menu_icon AS "menuIcon", a.menu_color AS "menuColor", a.permission AS "permission", a.weight AS "weight", a.is_show AS "isShow", a.sys_code AS "sysCode", a.module_codes AS "moduleCodes", a.extend_s1 AS "extend.extendS1", a.extend_s2 AS "extend.extendS2", a.extend_s3 AS "extend.extendS3", a.extend_s4 AS "extend.extendS4", a.extend_s5 AS "extend.extendS5", a.extend_s6 AS "extend.extendS6", a.extend_s7 AS "extend.extendS7", a.extend_s8 AS "extend.extendS8", a.extend_i1 AS "extend.extendI1", a.extend_i2 AS "extend.extendI2", a.extend_i3 AS "extend.extendI3", a.extend_i4 AS "extend.extendI4", a.extend_f1 AS "extend.extendF1", a.extend_f2 AS "extend.extendF2", a.extend_f3 AS "extend.extendF3", a.extend_f4 AS "extend.extendF4", a.extend_d1 AS "extend.extendD1", a.extend_d2 AS "extend.extendD2", a.extend_d3 AS "extend.extendD3", a.extend_d4 AS "extend.extendD4" FROM js_sys_menu a WHERE a.status = ? AND a.parent_code = ? AND a.sys_code = ? AND a.weight >= ? ORDER BY a.sys_code, a.tree_sorts, a.menu_code 
2019-07-11 10:20:30.511 DEBUG 12872 [io-8980-exec-10] [c.j.modules.sys.dao.MenuDao.findList   ] - ==> Parameters: 0(String), 1098426039933599744(String), default(String), 40(Integer)
2019-07-11 10:20:30.538 DEBUG 12872 [io-8980-exec-10] [c.j.modules.sys.dao.MenuDao.findList   ] - <==      Total: 6
2019-07-11 10:20:30.682 DEBUG 12872 [io-8980-exec-10] [c.j.c.m.m.provider.SelectSqlProvider   ] - 4毫秒: SELECT a.status AS "status", a.create_by AS "createBy", a.create_date AS "createDate", a.update_by AS "updateBy", a.update_date AS "updateDate", a.remarks AS "remarks", a.parent_code AS "parentCode", a.parent_codes AS "parentCodes", a.tree_sort AS "treeSort", a.tree_sorts AS "treeSorts", a.tree_leaf AS "treeLeaf", a.tree_level AS "treeLevel", a.tree_names AS "treeNames", a.menu_code AS "menuCode", a.menu_name AS "menuNameOrig", a.menu_type AS "menuType", a.menu_href AS "menuHref", a.menu_target AS "menuTarget", a.menu_icon AS "menuIcon", a.menu_color AS "menuColor", a.permission AS "permission", a.weight AS "weight", a.is_show AS "isShow", a.sys_code AS "sysCode", a.module_codes AS "moduleCodes", a.extend_s1 AS "extend.extendS1", a.extend_s2 AS "extend.extendS2", a.extend_s3 AS "extend.extendS3", a.extend_s4 AS "extend.extendS4", a.extend_s5 AS "extend.extendS5", a.extend_s6 AS "extend.extendS6", a.extend_s7 AS "extend.extendS7", a.extend_s8 AS "extend.extendS8", a.extend_i1 AS "extend.extendI1", a.extend_i2 AS "extend.extendI2", a.extend_i3 AS "extend.extendI3", a.extend_i4 AS "extend.extendI4", a.extend_f1 AS "extend.extendF1", a.extend_f2 AS "extend.extendF2", a.extend_f3 AS "extend.extendF3", a.extend_f4 AS "extend.extendF4", a.extend_d1 AS "extend.extendD1", a.extend_d2 AS "extend.extendD2", a.extend_d3 AS "extend.extendD3", a.extend_d4 AS "extend.extendD4" FROM js_sys_menu a WHERE a.status = #{sqlMap.where#status#EQ1} AND a.parent_code = #{sqlMap.where#parent_code#EQ1} AND a.sys_code = #{sqlMap.where#sys_code#EQ1} AND a.weight >= #{sqlMap.where.weight#GTE1.val} ORDER BY a.sys_code, a.tree_sorts, a.menu_code
2019-07-11 10:20:30.684 DEBUG 12872 [io-8980-exec-10] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@22e650e] will be managed by Spring
2019-07-11 10:20:30.686 DEBUG 12872 [io-8980-exec-10] [c.j.modules.sys.dao.MenuDao.findList   ] - ==>  Preparing: SELECT a.status AS "status", a.create_by AS "createBy", a.create_date AS "createDate", a.update_by AS "updateBy", a.update_date AS "updateDate", a.remarks AS "remarks", a.parent_code AS "parentCode", a.parent_codes AS "parentCodes", a.tree_sort AS "treeSort", a.tree_sorts AS "treeSorts", a.tree_leaf AS "treeLeaf", a.tree_level AS "treeLevel", a.tree_names AS "treeNames", a.menu_code AS "menuCode", a.menu_name AS "menuNameOrig", a.menu_type AS "menuType", a.menu_href AS "menuHref", a.menu_target AS "menuTarget", a.menu_icon AS "menuIcon", a.menu_color AS "menuColor", a.permission AS "permission", a.weight AS "weight", a.is_show AS "isShow", a.sys_code AS "sysCode", a.module_codes AS "moduleCodes", a.extend_s1 AS "extend.extendS1", a.extend_s2 AS "extend.extendS2", a.extend_s3 AS "extend.extendS3", a.extend_s4 AS "extend.extendS4", a.extend_s5 AS "extend.extendS5", a.extend_s6 AS "extend.extendS6", a.extend_s7 AS "extend.extendS7", a.extend_s8 AS "extend.extendS8", a.extend_i1 AS "extend.extendI1", a.extend_i2 AS "extend.extendI2", a.extend_i3 AS "extend.extendI3", a.extend_i4 AS "extend.extendI4", a.extend_f1 AS "extend.extendF1", a.extend_f2 AS "extend.extendF2", a.extend_f3 AS "extend.extendF3", a.extend_f4 AS "extend.extendF4", a.extend_d1 AS "extend.extendD1", a.extend_d2 AS "extend.extendD2", a.extend_d3 AS "extend.extendD3", a.extend_d4 AS "extend.extendD4" FROM js_sys_menu a WHERE a.status = ? AND a.parent_code = ? AND a.sys_code = ? AND a.weight >= ? ORDER BY a.sys_code, a.tree_sorts, a.menu_code 
2019-07-11 10:20:30.687 DEBUG 12872 [io-8980-exec-10] [c.j.modules.sys.dao.MenuDao.findList   ] - ==> Parameters: 0(String), 1098426041137364992(String), default(String), 40(Integer)
2019-07-11 10:20:30.712 DEBUG 12872 [io-8980-exec-10] [c.j.modules.sys.dao.MenuDao.findList   ] - <==      Total: 2
2019-07-11 10:20:30.863 DEBUG 12872 [io-8980-exec-10] [c.j.c.m.m.provider.SelectSqlProvider   ] - 4毫秒: SELECT a.status AS "status", a.create_by AS "createBy", a.create_date AS "createDate", a.update_by AS "updateBy", a.update_date AS "updateDate", a.remarks AS "remarks", a.parent_code AS "parentCode", a.parent_codes AS "parentCodes", a.tree_sort AS "treeSort", a.tree_sorts AS "treeSorts", a.tree_leaf AS "treeLeaf", a.tree_level AS "treeLevel", a.tree_names AS "treeNames", a.menu_code AS "menuCode", a.menu_name AS "menuNameOrig", a.menu_type AS "menuType", a.menu_href AS "menuHref", a.menu_target AS "menuTarget", a.menu_icon AS "menuIcon", a.menu_color AS "menuColor", a.permission AS "permission", a.weight AS "weight", a.is_show AS "isShow", a.sys_code AS "sysCode", a.module_codes AS "moduleCodes", a.extend_s1 AS "extend.extendS1", a.extend_s2 AS "extend.extendS2", a.extend_s3 AS "extend.extendS3", a.extend_s4 AS "extend.extendS4", a.extend_s5 AS "extend.extendS5", a.extend_s6 AS "extend.extendS6", a.extend_s7 AS "extend.extendS7", a.extend_s8 AS "extend.extendS8", a.extend_i1 AS "extend.extendI1", a.extend_i2 AS "extend.extendI2", a.extend_i3 AS "extend.extendI3", a.extend_i4 AS "extend.extendI4", a.extend_f1 AS "extend.extendF1", a.extend_f2 AS "extend.extendF2", a.extend_f3 AS "extend.extendF3", a.extend_f4 AS "extend.extendF4", a.extend_d1 AS "extend.extendD1", a.extend_d2 AS "extend.extendD2", a.extend_d3 AS "extend.extendD3", a.extend_d4 AS "extend.extendD4" FROM js_sys_menu a WHERE a.status = #{sqlMap.where#status#EQ1} AND a.parent_code = #{sqlMap.where#parent_code#EQ1} AND a.sys_code = #{sqlMap.where#sys_code#EQ1} AND a.weight >= #{sqlMap.where.weight#GTE1.val} ORDER BY a.sys_code, a.tree_sorts, a.menu_code
2019-07-11 10:20:30.864 DEBUG 12872 [io-8980-exec-10] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@22e650e] will be managed by Spring
2019-07-11 10:20:30.866 DEBUG 12872 [io-8980-exec-10] [c.j.modules.sys.dao.MenuDao.findList   ] - ==>  Preparing: SELECT a.status AS "status", a.create_by AS "createBy", a.create_date AS "createDate", a.update_by AS "updateBy", a.update_date AS "updateDate", a.remarks AS "remarks", a.parent_code AS "parentCode", a.parent_codes AS "parentCodes", a.tree_sort AS "treeSort", a.tree_sorts AS "treeSorts", a.tree_leaf AS "treeLeaf", a.tree_level AS "treeLevel", a.tree_names AS "treeNames", a.menu_code AS "menuCode", a.menu_name AS "menuNameOrig", a.menu_type AS "menuType", a.menu_href AS "menuHref", a.menu_target AS "menuTarget", a.menu_icon AS "menuIcon", a.menu_color AS "menuColor", a.permission AS "permission", a.weight AS "weight", a.is_show AS "isShow", a.sys_code AS "sysCode", a.module_codes AS "moduleCodes", a.extend_s1 AS "extend.extendS1", a.extend_s2 AS "extend.extendS2", a.extend_s3 AS "extend.extendS3", a.extend_s4 AS "extend.extendS4", a.extend_s5 AS "extend.extendS5", a.extend_s6 AS "extend.extendS6", a.extend_s7 AS "extend.extendS7", a.extend_s8 AS "extend.extendS8", a.extend_i1 AS "extend.extendI1", a.extend_i2 AS "extend.extendI2", a.extend_i3 AS "extend.extendI3", a.extend_i4 AS "extend.extendI4", a.extend_f1 AS "extend.extendF1", a.extend_f2 AS "extend.extendF2", a.extend_f3 AS "extend.extendF3", a.extend_f4 AS "extend.extendF4", a.extend_d1 AS "extend.extendD1", a.extend_d2 AS "extend.extendD2", a.extend_d3 AS "extend.extendD3", a.extend_d4 AS "extend.extendD4" FROM js_sys_menu a WHERE a.status = ? AND a.parent_code = ? AND a.sys_code = ? AND a.weight >= ? ORDER BY a.sys_code, a.tree_sorts, a.menu_code 
2019-07-11 10:20:30.868 DEBUG 12872 [io-8980-exec-10] [c.j.modules.sys.dao.MenuDao.findList   ] - ==> Parameters: 0(String), 1098426041611321344(String), default(String), 40(Integer)
2019-07-11 10:20:30.907 DEBUG 12872 [io-8980-exec-10] [c.j.modules.sys.dao.MenuDao.findList   ] - <==      Total: 2
2019-07-11 10:20:31.052 DEBUG 12872 [io-8980-exec-10] [c.j.c.m.m.provider.SelectSqlProvider   ] - 2毫秒: SELECT a.status AS "status", a.create_by AS "createBy", a.create_date AS "createDate", a.update_by AS "updateBy", a.update_date AS "updateDate", a.remarks AS "remarks", a.parent_code AS "parentCode", a.parent_codes AS "parentCodes", a.tree_sort AS "treeSort", a.tree_sorts AS "treeSorts", a.tree_leaf AS "treeLeaf", a.tree_level AS "treeLevel", a.tree_names AS "treeNames", a.menu_code AS "menuCode", a.menu_name AS "menuNameOrig", a.menu_type AS "menuType", a.menu_href AS "menuHref", a.menu_target AS "menuTarget", a.menu_icon AS "menuIcon", a.menu_color AS "menuColor", a.permission AS "permission", a.weight AS "weight", a.is_show AS "isShow", a.sys_code AS "sysCode", a.module_codes AS "moduleCodes", a.extend_s1 AS "extend.extendS1", a.extend_s2 AS "extend.extendS2", a.extend_s3 AS "extend.extendS3", a.extend_s4 AS "extend.extendS4", a.extend_s5 AS "extend.extendS5", a.extend_s6 AS "extend.extendS6", a.extend_s7 AS "extend.extendS7", a.extend_s8 AS "extend.extendS8", a.extend_i1 AS "extend.extendI1", a.extend_i2 AS "extend.extendI2", a.extend_i3 AS "extend.extendI3", a.extend_i4 AS "extend.extendI4", a.extend_f1 AS "extend.extendF1", a.extend_f2 AS "extend.extendF2", a.extend_f3 AS "extend.extendF3", a.extend_f4 AS "extend.extendF4", a.extend_d1 AS "extend.extendD1", a.extend_d2 AS "extend.extendD2", a.extend_d3 AS "extend.extendD3", a.extend_d4 AS "extend.extendD4" FROM js_sys_menu a WHERE a.status = #{sqlMap.where#status#EQ1} AND a.parent_code = #{sqlMap.where#parent_code#EQ1} AND a.sys_code = #{sqlMap.where#sys_code#EQ1} AND a.weight >= #{sqlMap.where.weight#GTE1.val} ORDER BY a.sys_code, a.tree_sorts, a.menu_code
2019-07-11 10:20:31.053 DEBUG 12872 [io-8980-exec-10] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@22e650e] will be managed by Spring
2019-07-11 10:20:31.053 DEBUG 12872 [io-8980-exec-10] [c.j.modules.sys.dao.MenuDao.findList   ] - ==>  Preparing: SELECT a.status AS "status", a.create_by AS "createBy", a.create_date AS "createDate", a.update_by AS "updateBy", a.update_date AS "updateDate", a.remarks AS "remarks", a.parent_code AS "parentCode", a.parent_codes AS "parentCodes", a.tree_sort AS "treeSort", a.tree_sorts AS "treeSorts", a.tree_leaf AS "treeLeaf", a.tree_level AS "treeLevel", a.tree_names AS "treeNames", a.menu_code AS "menuCode", a.menu_name AS "menuNameOrig", a.menu_type AS "menuType", a.menu_href AS "menuHref", a.menu_target AS "menuTarget", a.menu_icon AS "menuIcon", a.menu_color AS "menuColor", a.permission AS "permission", a.weight AS "weight", a.is_show AS "isShow", a.sys_code AS "sysCode", a.module_codes AS "moduleCodes", a.extend_s1 AS "extend.extendS1", a.extend_s2 AS "extend.extendS2", a.extend_s3 AS "extend.extendS3", a.extend_s4 AS "extend.extendS4", a.extend_s5 AS "extend.extendS5", a.extend_s6 AS "extend.extendS6", a.extend_s7 AS "extend.extendS7", a.extend_s8 AS "extend.extendS8", a.extend_i1 AS "extend.extendI1", a.extend_i2 AS "extend.extendI2", a.extend_i3 AS "extend.extendI3", a.extend_i4 AS "extend.extendI4", a.extend_f1 AS "extend.extendF1", a.extend_f2 AS "extend.extendF2", a.extend_f3 AS "extend.extendF3", a.extend_f4 AS "extend.extendF4", a.extend_d1 AS "extend.extendD1", a.extend_d2 AS "extend.extendD2", a.extend_d3 AS "extend.extendD3", a.extend_d4 AS "extend.extendD4" FROM js_sys_menu a WHERE a.status = ? AND a.parent_code = ? AND a.sys_code = ? AND a.weight >= ? ORDER BY a.sys_code, a.tree_sorts, a.menu_code 
2019-07-11 10:20:31.054 DEBUG 12872 [io-8980-exec-10] [c.j.modules.sys.dao.MenuDao.findList   ] - ==> Parameters: 0(String), 1098426042123026432(String), default(String), 40(Integer)
2019-07-11 10:20:31.079 DEBUG 12872 [io-8980-exec-10] [c.j.modules.sys.dao.MenuDao.findList   ] - <==      Total: 2
2019-07-11 10:20:31.225 DEBUG 12872 [io-8980-exec-10] [c.j.c.m.m.provider.SelectSqlProvider   ] - 4毫秒: SELECT a.status AS "status", a.create_by AS "createBy", a.create_date AS "createDate", a.update_by AS "updateBy", a.update_date AS "updateDate", a.remarks AS "remarks", a.parent_code AS "parentCode", a.parent_codes AS "parentCodes", a.tree_sort AS "treeSort", a.tree_sorts AS "treeSorts", a.tree_leaf AS "treeLeaf", a.tree_level AS "treeLevel", a.tree_names AS "treeNames", a.menu_code AS "menuCode", a.menu_name AS "menuNameOrig", a.menu_type AS "menuType", a.menu_href AS "menuHref", a.menu_target AS "menuTarget", a.menu_icon AS "menuIcon", a.menu_color AS "menuColor", a.permission AS "permission", a.weight AS "weight", a.is_show AS "isShow", a.sys_code AS "sysCode", a.module_codes AS "moduleCodes", a.extend_s1 AS "extend.extendS1", a.extend_s2 AS "extend.extendS2", a.extend_s3 AS "extend.extendS3", a.extend_s4 AS "extend.extendS4", a.extend_s5 AS "extend.extendS5", a.extend_s6 AS "extend.extendS6", a.extend_s7 AS "extend.extendS7", a.extend_s8 AS "extend.extendS8", a.extend_i1 AS "extend.extendI1", a.extend_i2 AS "extend.extendI2", a.extend_i3 AS "extend.extendI3", a.extend_i4 AS "extend.extendI4", a.extend_f1 AS "extend.extendF1", a.extend_f2 AS "extend.extendF2", a.extend_f3 AS "extend.extendF3", a.extend_f4 AS "extend.extendF4", a.extend_d1 AS "extend.extendD1", a.extend_d2 AS "extend.extendD2", a.extend_d3 AS "extend.extendD3", a.extend_d4 AS "extend.extendD4" FROM js_sys_menu a WHERE a.status = #{sqlMap.where#status#EQ1} AND a.parent_code = #{sqlMap.where#parent_code#EQ1} AND a.sys_code = #{sqlMap.where#sys_code#EQ1} AND a.weight >= #{sqlMap.where.weight#GTE1.val} ORDER BY a.sys_code, a.tree_sorts, a.menu_code
2019-07-11 10:20:31.226 DEBUG 12872 [io-8980-exec-10] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@22e650e] will be managed by Spring
2019-07-11 10:20:31.228 DEBUG 12872 [io-8980-exec-10] [c.j.modules.sys.dao.MenuDao.findList   ] - ==>  Preparing: SELECT a.status AS "status", a.create_by AS "createBy", a.create_date AS "createDate", a.update_by AS "updateBy", a.update_date AS "updateDate", a.remarks AS "remarks", a.parent_code AS "parentCode", a.parent_codes AS "parentCodes", a.tree_sort AS "treeSort", a.tree_sorts AS "treeSorts", a.tree_leaf AS "treeLeaf", a.tree_level AS "treeLevel", a.tree_names AS "treeNames", a.menu_code AS "menuCode", a.menu_name AS "menuNameOrig", a.menu_type AS "menuType", a.menu_href AS "menuHref", a.menu_target AS "menuTarget", a.menu_icon AS "menuIcon", a.menu_color AS "menuColor", a.permission AS "permission", a.weight AS "weight", a.is_show AS "isShow", a.sys_code AS "sysCode", a.module_codes AS "moduleCodes", a.extend_s1 AS "extend.extendS1", a.extend_s2 AS "extend.extendS2", a.extend_s3 AS "extend.extendS3", a.extend_s4 AS "extend.extendS4", a.extend_s5 AS "extend.extendS5", a.extend_s6 AS "extend.extendS6", a.extend_s7 AS "extend.extendS7", a.extend_s8 AS "extend.extendS8", a.extend_i1 AS "extend.extendI1", a.extend_i2 AS "extend.extendI2", a.extend_i3 AS "extend.extendI3", a.extend_i4 AS "extend.extendI4", a.extend_f1 AS "extend.extendF1", a.extend_f2 AS "extend.extendF2", a.extend_f3 AS "extend.extendF3", a.extend_f4 AS "extend.extendF4", a.extend_d1 AS "extend.extendD1", a.extend_d2 AS "extend.extendD2", a.extend_d3 AS "extend.extendD3", a.extend_d4 AS "extend.extendD4" FROM js_sys_menu a WHERE a.status = ? AND a.parent_code = ? AND a.sys_code = ? AND a.weight >= ? ORDER BY a.sys_code, a.tree_sorts, a.menu_code 
2019-07-11 10:20:31.230 DEBUG 12872 [io-8980-exec-10] [c.j.modules.sys.dao.MenuDao.findList   ] - ==> Parameters: 0(String), 1098426042550845440(String), default(String), 40(Integer)
2019-07-11 10:20:31.257 DEBUG 12872 [io-8980-exec-10] [c.j.modules.sys.dao.MenuDao.findList   ] - <==      Total: 3
2019-07-11 10:20:31.403 DEBUG 12872 [io-8980-exec-10] [c.j.c.m.m.provider.SelectSqlProvider   ] - 1毫秒: SELECT a.status AS "status", a.create_by AS "createBy", a.create_date AS "createDate", a.update_by AS "updateBy", a.update_date AS "updateDate", a.remarks AS "remarks", a.parent_code AS "parentCode", a.parent_codes AS "parentCodes", a.tree_sort AS "treeSort", a.tree_sorts AS "treeSorts", a.tree_leaf AS "treeLeaf", a.tree_level AS "treeLevel", a.tree_names AS "treeNames", a.menu_code AS "menuCode", a.menu_name AS "menuNameOrig", a.menu_type AS "menuType", a.menu_href AS "menuHref", a.menu_target AS "menuTarget", a.menu_icon AS "menuIcon", a.menu_color AS "menuColor", a.permission AS "permission", a.weight AS "weight", a.is_show AS "isShow", a.sys_code AS "sysCode", a.module_codes AS "moduleCodes", a.extend_s1 AS "extend.extendS1", a.extend_s2 AS "extend.extendS2", a.extend_s3 AS "extend.extendS3", a.extend_s4 AS "extend.extendS4", a.extend_s5 AS "extend.extendS5", a.extend_s6 AS "extend.extendS6", a.extend_s7 AS "extend.extendS7", a.extend_s8 AS "extend.extendS8", a.extend_i1 AS "extend.extendI1", a.extend_i2 AS "extend.extendI2", a.extend_i3 AS "extend.extendI3", a.extend_i4 AS "extend.extendI4", a.extend_f1 AS "extend.extendF1", a.extend_f2 AS "extend.extendF2", a.extend_f3 AS "extend.extendF3", a.extend_f4 AS "extend.extendF4", a.extend_d1 AS "extend.extendD1", a.extend_d2 AS "extend.extendD2", a.extend_d3 AS "extend.extendD3", a.extend_d4 AS "extend.extendD4" FROM js_sys_menu a WHERE a.status = #{sqlMap.where#status#EQ1} AND a.parent_code = #{sqlMap.where#parent_code#EQ1} AND a.sys_code = #{sqlMap.where#sys_code#EQ1} AND a.weight >= #{sqlMap.where.weight#GTE1.val} ORDER BY a.sys_code, a.tree_sorts, a.menu_code
2019-07-11 10:20:31.403 DEBUG 12872 [io-8980-exec-10] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@22e650e] will be managed by Spring
2019-07-11 10:20:31.404 DEBUG 12872 [io-8980-exec-10] [c.j.modules.sys.dao.MenuDao.findList   ] - ==>  Preparing: SELECT a.status AS "status", a.create_by AS "createBy", a.create_date AS "createDate", a.update_by AS "updateBy", a.update_date AS "updateDate", a.remarks AS "remarks", a.parent_code AS "parentCode", a.parent_codes AS "parentCodes", a.tree_sort AS "treeSort", a.tree_sorts AS "treeSorts", a.tree_leaf AS "treeLeaf", a.tree_level AS "treeLevel", a.tree_names AS "treeNames", a.menu_code AS "menuCode", a.menu_name AS "menuNameOrig", a.menu_type AS "menuType", a.menu_href AS "menuHref", a.menu_target AS "menuTarget", a.menu_icon AS "menuIcon", a.menu_color AS "menuColor", a.permission AS "permission", a.weight AS "weight", a.is_show AS "isShow", a.sys_code AS "sysCode", a.module_codes AS "moduleCodes", a.extend_s1 AS "extend.extendS1", a.extend_s2 AS "extend.extendS2", a.extend_s3 AS "extend.extendS3", a.extend_s4 AS "extend.extendS4", a.extend_s5 AS "extend.extendS5", a.extend_s6 AS "extend.extendS6", a.extend_s7 AS "extend.extendS7", a.extend_s8 AS "extend.extendS8", a.extend_i1 AS "extend.extendI1", a.extend_i2 AS "extend.extendI2", a.extend_i3 AS "extend.extendI3", a.extend_i4 AS "extend.extendI4", a.extend_f1 AS "extend.extendF1", a.extend_f2 AS "extend.extendF2", a.extend_f3 AS "extend.extendF3", a.extend_f4 AS "extend.extendF4", a.extend_d1 AS "extend.extendD1", a.extend_d2 AS "extend.extendD2", a.extend_d3 AS "extend.extendD3", a.extend_d4 AS "extend.extendD4" FROM js_sys_menu a WHERE a.status = ? AND a.parent_code = ? AND a.sys_code = ? AND a.weight >= ? ORDER BY a.sys_code, a.tree_sorts, a.menu_code 
2019-07-11 10:20:31.404 DEBUG 12872 [io-8980-exec-10] [c.j.modules.sys.dao.MenuDao.findList   ] - ==> Parameters: 0(String), 1098426043184185344(String), default(String), 40(Integer)
2019-07-11 10:20:31.432 DEBUG 12872 [io-8980-exec-10] [c.j.modules.sys.dao.MenuDao.findList   ] - <==      Total: 7
2019-07-11 10:20:31.577 DEBUG 12872 [io-8980-exec-10] [c.j.c.m.m.provider.SelectSqlProvider   ] - 1毫秒: SELECT a.status AS "status", a.create_by AS "createBy", a.create_date AS "createDate", a.update_by AS "updateBy", a.update_date AS "updateDate", a.remarks AS "remarks", a.parent_code AS "parentCode", a.parent_codes AS "parentCodes", a.tree_sort AS "treeSort", a.tree_sorts AS "treeSorts", a.tree_leaf AS "treeLeaf", a.tree_level AS "treeLevel", a.tree_names AS "treeNames", a.menu_code AS "menuCode", a.menu_name AS "menuNameOrig", a.menu_type AS "menuType", a.menu_href AS "menuHref", a.menu_target AS "menuTarget", a.menu_icon AS "menuIcon", a.menu_color AS "menuColor", a.permission AS "permission", a.weight AS "weight", a.is_show AS "isShow", a.sys_code AS "sysCode", a.module_codes AS "moduleCodes", a.extend_s1 AS "extend.extendS1", a.extend_s2 AS "extend.extendS2", a.extend_s3 AS "extend.extendS3", a.extend_s4 AS "extend.extendS4", a.extend_s5 AS "extend.extendS5", a.extend_s6 AS "extend.extendS6", a.extend_s7 AS "extend.extendS7", a.extend_s8 AS "extend.extendS8", a.extend_i1 AS "extend.extendI1", a.extend_i2 AS "extend.extendI2", a.extend_i3 AS "extend.extendI3", a.extend_i4 AS "extend.extendI4", a.extend_f1 AS "extend.extendF1", a.extend_f2 AS "extend.extendF2", a.extend_f3 AS "extend.extendF3", a.extend_f4 AS "extend.extendF4", a.extend_d1 AS "extend.extendD1", a.extend_d2 AS "extend.extendD2", a.extend_d3 AS "extend.extendD3", a.extend_d4 AS "extend.extendD4" FROM js_sys_menu a WHERE a.status = #{sqlMap.where#status#EQ1} AND a.parent_code = #{sqlMap.where#parent_code#EQ1} AND a.sys_code = #{sqlMap.where#sys_code#EQ1} AND a.weight >= #{sqlMap.where.weight#GTE1.val} ORDER BY a.sys_code, a.tree_sorts, a.menu_code
2019-07-11 10:20:31.578 DEBUG 12872 [io-8980-exec-10] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@22e650e] will be managed by Spring
2019-07-11 10:20:31.579 DEBUG 12872 [io-8980-exec-10] [c.j.modules.sys.dao.MenuDao.findList   ] - ==>  Preparing: SELECT a.status AS "status", a.create_by AS "createBy", a.create_date AS "createDate", a.update_by AS "updateBy", a.update_date AS "updateDate", a.remarks AS "remarks", a.parent_code AS "parentCode", a.parent_codes AS "parentCodes", a.tree_sort AS "treeSort", a.tree_sorts AS "treeSorts", a.tree_leaf AS "treeLeaf", a.tree_level AS "treeLevel", a.tree_names AS "treeNames", a.menu_code AS "menuCode", a.menu_name AS "menuNameOrig", a.menu_type AS "menuType", a.menu_href AS "menuHref", a.menu_target AS "menuTarget", a.menu_icon AS "menuIcon", a.menu_color AS "menuColor", a.permission AS "permission", a.weight AS "weight", a.is_show AS "isShow", a.sys_code AS "sysCode", a.module_codes AS "moduleCodes", a.extend_s1 AS "extend.extendS1", a.extend_s2 AS "extend.extendS2", a.extend_s3 AS "extend.extendS3", a.extend_s4 AS "extend.extendS4", a.extend_s5 AS "extend.extendS5", a.extend_s6 AS "extend.extendS6", a.extend_s7 AS "extend.extendS7", a.extend_s8 AS "extend.extendS8", a.extend_i1 AS "extend.extendI1", a.extend_i2 AS "extend.extendI2", a.extend_i3 AS "extend.extendI3", a.extend_i4 AS "extend.extendI4", a.extend_f1 AS "extend.extendF1", a.extend_f2 AS "extend.extendF2", a.extend_f3 AS "extend.extendF3", a.extend_f4 AS "extend.extendF4", a.extend_d1 AS "extend.extendD1", a.extend_d2 AS "extend.extendD2", a.extend_d3 AS "extend.extendD3", a.extend_d4 AS "extend.extendD4" FROM js_sys_menu a WHERE a.status = ? AND a.parent_code = ? AND a.sys_code = ? AND a.weight >= ? ORDER BY a.sys_code, a.tree_sorts, a.menu_code 
2019-07-11 10:20:31.580 DEBUG 12872 [io-8980-exec-10] [c.j.modules.sys.dao.MenuDao.findList   ] - ==> Parameters: 0(String), 1098426043947548672(String), default(String), 40(Integer)
2019-07-11 10:20:31.606 DEBUG 12872 [io-8980-exec-10] [c.j.modules.sys.dao.MenuDao.findList   ] - <==      Total: 4
2019-07-11 10:20:31.756 DEBUG 12872 [io-8980-exec-10] [c.j.c.m.m.provider.SelectSqlProvider   ] - 4毫秒: SELECT a.status AS "status", a.create_by AS "createBy", a.create_date AS "createDate", a.update_by AS "updateBy", a.update_date AS "updateDate", a.remarks AS "remarks", a.parent_code AS "parentCode", a.parent_codes AS "parentCodes", a.tree_sort AS "treeSort", a.tree_sorts AS "treeSorts", a.tree_leaf AS "treeLeaf", a.tree_level AS "treeLevel", a.tree_names AS "treeNames", a.menu_code AS "menuCode", a.menu_name AS "menuNameOrig", a.menu_type AS "menuType", a.menu_href AS "menuHref", a.menu_target AS "menuTarget", a.menu_icon AS "menuIcon", a.menu_color AS "menuColor", a.permission AS "permission", a.weight AS "weight", a.is_show AS "isShow", a.sys_code AS "sysCode", a.module_codes AS "moduleCodes", a.extend_s1 AS "extend.extendS1", a.extend_s2 AS "extend.extendS2", a.extend_s3 AS "extend.extendS3", a.extend_s4 AS "extend.extendS4", a.extend_s5 AS "extend.extendS5", a.extend_s6 AS "extend.extendS6", a.extend_s7 AS "extend.extendS7", a.extend_s8 AS "extend.extendS8", a.extend_i1 AS "extend.extendI1", a.extend_i2 AS "extend.extendI2", a.extend_i3 AS "extend.extendI3", a.extend_i4 AS "extend.extendI4", a.extend_f1 AS "extend.extendF1", a.extend_f2 AS "extend.extendF2", a.extend_f3 AS "extend.extendF3", a.extend_f4 AS "extend.extendF4", a.extend_d1 AS "extend.extendD1", a.extend_d2 AS "extend.extendD2", a.extend_d3 AS "extend.extendD3", a.extend_d4 AS "extend.extendD4" FROM js_sys_menu a WHERE a.status = #{sqlMap.where#status#EQ1} AND a.parent_code = #{sqlMap.where#parent_code#EQ1} AND a.sys_code = #{sqlMap.where#sys_code#EQ1} AND a.weight >= #{sqlMap.where.weight#GTE1.val} ORDER BY a.sys_code, a.tree_sorts, a.menu_code
2019-07-11 10:20:31.756 DEBUG 12872 [io-8980-exec-10] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@22e650e] will be managed by Spring
2019-07-11 10:20:31.757 DEBUG 12872 [io-8980-exec-10] [c.j.modules.sys.dao.MenuDao.findList   ] - ==>  Preparing: SELECT a.status AS "status", a.create_by AS "createBy", a.create_date AS "createDate", a.update_by AS "updateBy", a.update_date AS "updateDate", a.remarks AS "remarks", a.parent_code AS "parentCode", a.parent_codes AS "parentCodes", a.tree_sort AS "treeSort", a.tree_sorts AS "treeSorts", a.tree_leaf AS "treeLeaf", a.tree_level AS "treeLevel", a.tree_names AS "treeNames", a.menu_code AS "menuCode", a.menu_name AS "menuNameOrig", a.menu_type AS "menuType", a.menu_href AS "menuHref", a.menu_target AS "menuTarget", a.menu_icon AS "menuIcon", a.menu_color AS "menuColor", a.permission AS "permission", a.weight AS "weight", a.is_show AS "isShow", a.sys_code AS "sysCode", a.module_codes AS "moduleCodes", a.extend_s1 AS "extend.extendS1", a.extend_s2 AS "extend.extendS2", a.extend_s3 AS "extend.extendS3", a.extend_s4 AS "extend.extendS4", a.extend_s5 AS "extend.extendS5", a.extend_s6 AS "extend.extendS6", a.extend_s7 AS "extend.extendS7", a.extend_s8 AS "extend.extendS8", a.extend_i1 AS "extend.extendI1", a.extend_i2 AS "extend.extendI2", a.extend_i3 AS "extend.extendI3", a.extend_i4 AS "extend.extendI4", a.extend_f1 AS "extend.extendF1", a.extend_f2 AS "extend.extendF2", a.extend_f3 AS "extend.extendF3", a.extend_f4 AS "extend.extendF4", a.extend_d1 AS "extend.extendD1", a.extend_d2 AS "extend.extendD2", a.extend_d3 AS "extend.extendD3", a.extend_d4 AS "extend.extendD4" FROM js_sys_menu a WHERE a.status = ? AND a.parent_code = ? AND a.sys_code = ? AND a.weight >= ? ORDER BY a.sys_code, a.tree_sorts, a.menu_code 
2019-07-11 10:20:31.757 DEBUG 12872 [io-8980-exec-10] [c.j.modules.sys.dao.MenuDao.findList   ] - ==> Parameters: 0(String), 1098426046589960192(String), default(String), 40(Integer)
2019-07-11 10:20:31.784 DEBUG 12872 [io-8980-exec-10] [c.j.modules.sys.dao.MenuDao.findList   ] - <==      Total: 7
2019-07-11 10:20:31.934 DEBUG 12872 [io-8980-exec-10] [c.j.c.m.m.provider.SelectSqlProvider   ] - 3毫秒: SELECT a.status AS "status", a.create_by AS "createBy", a.create_date AS "createDate", a.update_by AS "updateBy", a.update_date AS "updateDate", a.remarks AS "remarks", a.parent_code AS "parentCode", a.parent_codes AS "parentCodes", a.tree_sort AS "treeSort", a.tree_sorts AS "treeSorts", a.tree_leaf AS "treeLeaf", a.tree_level AS "treeLevel", a.tree_names AS "treeNames", a.menu_code AS "menuCode", a.menu_name AS "menuNameOrig", a.menu_type AS "menuType", a.menu_href AS "menuHref", a.menu_target AS "menuTarget", a.menu_icon AS "menuIcon", a.menu_color AS "menuColor", a.permission AS "permission", a.weight AS "weight", a.is_show AS "isShow", a.sys_code AS "sysCode", a.module_codes AS "moduleCodes", a.extend_s1 AS "extend.extendS1", a.extend_s2 AS "extend.extendS2", a.extend_s3 AS "extend.extendS3", a.extend_s4 AS "extend.extendS4", a.extend_s5 AS "extend.extendS5", a.extend_s6 AS "extend.extendS6", a.extend_s7 AS "extend.extendS7", a.extend_s8 AS "extend.extendS8", a.extend_i1 AS "extend.extendI1", a.extend_i2 AS "extend.extendI2", a.extend_i3 AS "extend.extendI3", a.extend_i4 AS "extend.extendI4", a.extend_f1 AS "extend.extendF1", a.extend_f2 AS "extend.extendF2", a.extend_f3 AS "extend.extendF3", a.extend_f4 AS "extend.extendF4", a.extend_d1 AS "extend.extendD1", a.extend_d2 AS "extend.extendD2", a.extend_d3 AS "extend.extendD3", a.extend_d4 AS "extend.extendD4" FROM js_sys_menu a WHERE a.status = #{sqlMap.where#status#EQ1} AND a.parent_code = #{sqlMap.where#parent_code#EQ1} AND a.sys_code = #{sqlMap.where#sys_code#EQ1} AND a.weight >= #{sqlMap.where.weight#GTE1.val} ORDER BY a.sys_code, a.tree_sorts, a.menu_code
2019-07-11 10:20:31.934 DEBUG 12872 [io-8980-exec-10] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@22e650e] will be managed by Spring
2019-07-11 10:20:31.935 DEBUG 12872 [io-8980-exec-10] [c.j.modules.sys.dao.MenuDao.findList   ] - ==>  Preparing: SELECT a.status AS "status", a.create_by AS "createBy", a.create_date AS "createDate", a.update_by AS "updateBy", a.update_date AS "updateDate", a.remarks AS "remarks", a.parent_code AS "parentCode", a.parent_codes AS "parentCodes", a.tree_sort AS "treeSort", a.tree_sorts AS "treeSorts", a.tree_leaf AS "treeLeaf", a.tree_level AS "treeLevel", a.tree_names AS "treeNames", a.menu_code AS "menuCode", a.menu_name AS "menuNameOrig", a.menu_type AS "menuType", a.menu_href AS "menuHref", a.menu_target AS "menuTarget", a.menu_icon AS "menuIcon", a.menu_color AS "menuColor", a.permission AS "permission", a.weight AS "weight", a.is_show AS "isShow", a.sys_code AS "sysCode", a.module_codes AS "moduleCodes", a.extend_s1 AS "extend.extendS1", a.extend_s2 AS "extend.extendS2", a.extend_s3 AS "extend.extendS3", a.extend_s4 AS "extend.extendS4", a.extend_s5 AS "extend.extendS5", a.extend_s6 AS "extend.extendS6", a.extend_s7 AS "extend.extendS7", a.extend_s8 AS "extend.extendS8", a.extend_i1 AS "extend.extendI1", a.extend_i2 AS "extend.extendI2", a.extend_i3 AS "extend.extendI3", a.extend_i4 AS "extend.extendI4", a.extend_f1 AS "extend.extendF1", a.extend_f2 AS "extend.extendF2", a.extend_f3 AS "extend.extendF3", a.extend_f4 AS "extend.extendF4", a.extend_d1 AS "extend.extendD1", a.extend_d2 AS "extend.extendD2", a.extend_d3 AS "extend.extendD3", a.extend_d4 AS "extend.extendD4" FROM js_sys_menu a WHERE a.status = ? AND a.parent_code = ? AND a.sys_code = ? AND a.weight >= ? ORDER BY a.sys_code, a.tree_sorts, a.menu_code 
2019-07-11 10:20:31.936 DEBUG 12872 [io-8980-exec-10] [c.j.modules.sys.dao.MenuDao.findList   ] - ==> Parameters: 0(String), 1098426135861526528(String), default(String), 40(Integer)
2019-07-11 10:20:31.962 DEBUG 12872 [io-8980-exec-10] [c.j.modules.sys.dao.MenuDao.findList   ] - <==      Total: 3
2019-07-11 10:20:32.109 DEBUG 12872 [io-8980-exec-10] [c.j.c.m.m.provider.SelectSqlProvider   ] - 3毫秒: SELECT a.status AS "status", a.create_by AS "createBy", a.create_date AS "createDate", a.update_by AS "updateBy", a.update_date AS "updateDate", a.remarks AS "remarks", a.parent_code AS "parentCode", a.parent_codes AS "parentCodes", a.tree_sort AS "treeSort", a.tree_sorts AS "treeSorts", a.tree_leaf AS "treeLeaf", a.tree_level AS "treeLevel", a.tree_names AS "treeNames", a.menu_code AS "menuCode", a.menu_name AS "menuNameOrig", a.menu_type AS "menuType", a.menu_href AS "menuHref", a.menu_target AS "menuTarget", a.menu_icon AS "menuIcon", a.menu_color AS "menuColor", a.permission AS "permission", a.weight AS "weight", a.is_show AS "isShow", a.sys_code AS "sysCode", a.module_codes AS "moduleCodes", a.extend_s1 AS "extend.extendS1", a.extend_s2 AS "extend.extendS2", a.extend_s3 AS "extend.extendS3", a.extend_s4 AS "extend.extendS4", a.extend_s5 AS "extend.extendS5", a.extend_s6 AS "extend.extendS6", a.extend_s7 AS "extend.extendS7", a.extend_s8 AS "extend.extendS8", a.extend_i1 AS "extend.extendI1", a.extend_i2 AS "extend.extendI2", a.extend_i3 AS "extend.extendI3", a.extend_i4 AS "extend.extendI4", a.extend_f1 AS "extend.extendF1", a.extend_f2 AS "extend.extendF2", a.extend_f3 AS "extend.extendF3", a.extend_f4 AS "extend.extendF4", a.extend_d1 AS "extend.extendD1", a.extend_d2 AS "extend.extendD2", a.extend_d3 AS "extend.extendD3", a.extend_d4 AS "extend.extendD4" FROM js_sys_menu a WHERE a.status = #{sqlMap.where#status#EQ1} AND a.parent_code = #{sqlMap.where#parent_code#EQ1} AND a.sys_code = #{sqlMap.where#sys_code#EQ1} AND a.weight >= #{sqlMap.where.weight#GTE1.val} ORDER BY a.sys_code, a.tree_sorts, a.menu_code
2019-07-11 10:20:32.110 DEBUG 12872 [io-8980-exec-10] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@22e650e] will be managed by Spring
2019-07-11 10:20:32.111 DEBUG 12872 [io-8980-exec-10] [c.j.modules.sys.dao.MenuDao.findList   ] - ==>  Preparing: SELECT a.status AS "status", a.create_by AS "createBy", a.create_date AS "createDate", a.update_by AS "updateBy", a.update_date AS "updateDate", a.remarks AS "remarks", a.parent_code AS "parentCode", a.parent_codes AS "parentCodes", a.tree_sort AS "treeSort", a.tree_sorts AS "treeSorts", a.tree_leaf AS "treeLeaf", a.tree_level AS "treeLevel", a.tree_names AS "treeNames", a.menu_code AS "menuCode", a.menu_name AS "menuNameOrig", a.menu_type AS "menuType", a.menu_href AS "menuHref", a.menu_target AS "menuTarget", a.menu_icon AS "menuIcon", a.menu_color AS "menuColor", a.permission AS "permission", a.weight AS "weight", a.is_show AS "isShow", a.sys_code AS "sysCode", a.module_codes AS "moduleCodes", a.extend_s1 AS "extend.extendS1", a.extend_s2 AS "extend.extendS2", a.extend_s3 AS "extend.extendS3", a.extend_s4 AS "extend.extendS4", a.extend_s5 AS "extend.extendS5", a.extend_s6 AS "extend.extendS6", a.extend_s7 AS "extend.extendS7", a.extend_s8 AS "extend.extendS8", a.extend_i1 AS "extend.extendI1", a.extend_i2 AS "extend.extendI2", a.extend_i3 AS "extend.extendI3", a.extend_i4 AS "extend.extendI4", a.extend_f1 AS "extend.extendF1", a.extend_f2 AS "extend.extendF2", a.extend_f3 AS "extend.extendF3", a.extend_f4 AS "extend.extendF4", a.extend_d1 AS "extend.extendD1", a.extend_d2 AS "extend.extendD2", a.extend_d3 AS "extend.extendD3", a.extend_d4 AS "extend.extendD4" FROM js_sys_menu a WHERE a.status = ? AND a.parent_code = ? AND a.sys_code = ? AND a.weight >= ? ORDER BY a.sys_code, a.tree_sorts, a.menu_code 
2019-07-11 10:20:32.112 DEBUG 12872 [io-8980-exec-10] [c.j.modules.sys.dao.MenuDao.findList   ] - ==> Parameters: 0(String), 1098426182074368000(String), default(String), 40(Integer)
2019-07-11 10:20:32.138 DEBUG 12872 [io-8980-exec-10] [c.j.modules.sys.dao.MenuDao.findList   ] - <==      Total: 5
2019-07-11 10:20:32.284 DEBUG 12872 [io-8980-exec-10] [c.j.c.m.m.provider.SelectSqlProvider   ] - 2毫秒: SELECT a.status AS "status", a.create_by AS "createBy", a.create_date AS "createDate", a.update_by AS "updateBy", a.update_date AS "updateDate", a.remarks AS "remarks", a.parent_code AS "parentCode", a.parent_codes AS "parentCodes", a.tree_sort AS "treeSort", a.tree_sorts AS "treeSorts", a.tree_leaf AS "treeLeaf", a.tree_level AS "treeLevel", a.tree_names AS "treeNames", a.menu_code AS "menuCode", a.menu_name AS "menuNameOrig", a.menu_type AS "menuType", a.menu_href AS "menuHref", a.menu_target AS "menuTarget", a.menu_icon AS "menuIcon", a.menu_color AS "menuColor", a.permission AS "permission", a.weight AS "weight", a.is_show AS "isShow", a.sys_code AS "sysCode", a.module_codes AS "moduleCodes", a.extend_s1 AS "extend.extendS1", a.extend_s2 AS "extend.extendS2", a.extend_s3 AS "extend.extendS3", a.extend_s4 AS "extend.extendS4", a.extend_s5 AS "extend.extendS5", a.extend_s6 AS "extend.extendS6", a.extend_s7 AS "extend.extendS7", a.extend_s8 AS "extend.extendS8", a.extend_i1 AS "extend.extendI1", a.extend_i2 AS "extend.extendI2", a.extend_i3 AS "extend.extendI3", a.extend_i4 AS "extend.extendI4", a.extend_f1 AS "extend.extendF1", a.extend_f2 AS "extend.extendF2", a.extend_f3 AS "extend.extendF3", a.extend_f4 AS "extend.extendF4", a.extend_d1 AS "extend.extendD1", a.extend_d2 AS "extend.extendD2", a.extend_d3 AS "extend.extendD3", a.extend_d4 AS "extend.extendD4" FROM js_sys_menu a WHERE a.status = #{sqlMap.where#status#EQ1} AND a.parent_code = #{sqlMap.where#parent_code#EQ1} AND a.sys_code = #{sqlMap.where#sys_code#EQ1} AND a.weight >= #{sqlMap.where.weight#GTE1.val} ORDER BY a.sys_code, a.tree_sorts, a.menu_code
2019-07-11 10:20:32.285 DEBUG 12872 [io-8980-exec-10] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@22e650e] will be managed by Spring
2019-07-11 10:20:32.285 DEBUG 12872 [io-8980-exec-10] [c.j.modules.sys.dao.MenuDao.findList   ] - ==>  Preparing: SELECT a.status AS "status", a.create_by AS "createBy", a.create_date AS "createDate", a.update_by AS "updateBy", a.update_date AS "updateDate", a.remarks AS "remarks", a.parent_code AS "parentCode", a.parent_codes AS "parentCodes", a.tree_sort AS "treeSort", a.tree_sorts AS "treeSorts", a.tree_leaf AS "treeLeaf", a.tree_level AS "treeLevel", a.tree_names AS "treeNames", a.menu_code AS "menuCode", a.menu_name AS "menuNameOrig", a.menu_type AS "menuType", a.menu_href AS "menuHref", a.menu_target AS "menuTarget", a.menu_icon AS "menuIcon", a.menu_color AS "menuColor", a.permission AS "permission", a.weight AS "weight", a.is_show AS "isShow", a.sys_code AS "sysCode", a.module_codes AS "moduleCodes", a.extend_s1 AS "extend.extendS1", a.extend_s2 AS "extend.extendS2", a.extend_s3 AS "extend.extendS3", a.extend_s4 AS "extend.extendS4", a.extend_s5 AS "extend.extendS5", a.extend_s6 AS "extend.extendS6", a.extend_s7 AS "extend.extendS7", a.extend_s8 AS "extend.extendS8", a.extend_i1 AS "extend.extendI1", a.extend_i2 AS "extend.extendI2", a.extend_i3 AS "extend.extendI3", a.extend_i4 AS "extend.extendI4", a.extend_f1 AS "extend.extendF1", a.extend_f2 AS "extend.extendF2", a.extend_f3 AS "extend.extendF3", a.extend_f4 AS "extend.extendF4", a.extend_d1 AS "extend.extendD1", a.extend_d2 AS "extend.extendD2", a.extend_d3 AS "extend.extendD3", a.extend_d4 AS "extend.extendD4" FROM js_sys_menu a WHERE a.status = ? AND a.parent_code = ? AND a.sys_code = ? AND a.weight >= ? ORDER BY a.sys_code, a.tree_sorts, a.menu_code 
2019-07-11 10:20:32.286 DEBUG 12872 [io-8980-exec-10] [c.j.modules.sys.dao.MenuDao.findList   ] - ==> Parameters: 0(String), 1098426205860265984(String), default(String), 40(Integer)
2019-07-11 10:20:32.313 DEBUG 12872 [io-8980-exec-10] [c.j.modules.sys.dao.MenuDao.findList   ] - <==      Total: 2
2019-07-11 10:20:32.455 DEBUG 12872 [io-8980-exec-10] [c.j.c.m.m.provider.SelectSqlProvider   ] - 2毫秒: SELECT a.status AS "status", a.create_by AS "createBy", a.create_date AS "createDate", a.update_by AS "updateBy", a.update_date AS "updateDate", a.remarks AS "remarks", a.parent_code AS "parentCode", a.parent_codes AS "parentCodes", a.tree_sort AS "treeSort", a.tree_sorts AS "treeSorts", a.tree_leaf AS "treeLeaf", a.tree_level AS "treeLevel", a.tree_names AS "treeNames", a.menu_code AS "menuCode", a.menu_name AS "menuNameOrig", a.menu_type AS "menuType", a.menu_href AS "menuHref", a.menu_target AS "menuTarget", a.menu_icon AS "menuIcon", a.menu_color AS "menuColor", a.permission AS "permission", a.weight AS "weight", a.is_show AS "isShow", a.sys_code AS "sysCode", a.module_codes AS "moduleCodes", a.extend_s1 AS "extend.extendS1", a.extend_s2 AS "extend.extendS2", a.extend_s3 AS "extend.extendS3", a.extend_s4 AS "extend.extendS4", a.extend_s5 AS "extend.extendS5", a.extend_s6 AS "extend.extendS6", a.extend_s7 AS "extend.extendS7", a.extend_s8 AS "extend.extendS8", a.extend_i1 AS "extend.extendI1", a.extend_i2 AS "extend.extendI2", a.extend_i3 AS "extend.extendI3", a.extend_i4 AS "extend.extendI4", a.extend_f1 AS "extend.extendF1", a.extend_f2 AS "extend.extendF2", a.extend_f3 AS "extend.extendF3", a.extend_f4 AS "extend.extendF4", a.extend_d1 AS "extend.extendD1", a.extend_d2 AS "extend.extendD2", a.extend_d3 AS "extend.extendD3", a.extend_d4 AS "extend.extendD4" FROM js_sys_menu a WHERE a.status = #{sqlMap.where#status#EQ1} AND a.parent_code = #{sqlMap.where#parent_code#EQ1} AND a.sys_code = #{sqlMap.where#sys_code#EQ1} AND a.weight >= #{sqlMap.where.weight#GTE1.val} ORDER BY a.sys_code, a.tree_sorts, a.menu_code
2019-07-11 10:20:32.456 DEBUG 12872 [io-8980-exec-10] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@22e650e] will be managed by Spring
2019-07-11 10:20:32.456 DEBUG 12872 [io-8980-exec-10] [c.j.modules.sys.dao.MenuDao.findList   ] - ==>  Preparing: SELECT a.status AS "status", a.create_by AS "createBy", a.create_date AS "createDate", a.update_by AS "updateBy", a.update_date AS "updateDate", a.remarks AS "remarks", a.parent_code AS "parentCode", a.parent_codes AS "parentCodes", a.tree_sort AS "treeSort", a.tree_sorts AS "treeSorts", a.tree_leaf AS "treeLeaf", a.tree_level AS "treeLevel", a.tree_names AS "treeNames", a.menu_code AS "menuCode", a.menu_name AS "menuNameOrig", a.menu_type AS "menuType", a.menu_href AS "menuHref", a.menu_target AS "menuTarget", a.menu_icon AS "menuIcon", a.menu_color AS "menuColor", a.permission AS "permission", a.weight AS "weight", a.is_show AS "isShow", a.sys_code AS "sysCode", a.module_codes AS "moduleCodes", a.extend_s1 AS "extend.extendS1", a.extend_s2 AS "extend.extendS2", a.extend_s3 AS "extend.extendS3", a.extend_s4 AS "extend.extendS4", a.extend_s5 AS "extend.extendS5", a.extend_s6 AS "extend.extendS6", a.extend_s7 AS "extend.extendS7", a.extend_s8 AS "extend.extendS8", a.extend_i1 AS "extend.extendI1", a.extend_i2 AS "extend.extendI2", a.extend_i3 AS "extend.extendI3", a.extend_i4 AS "extend.extendI4", a.extend_f1 AS "extend.extendF1", a.extend_f2 AS "extend.extendF2", a.extend_f3 AS "extend.extendF3", a.extend_f4 AS "extend.extendF4", a.extend_d1 AS "extend.extendD1", a.extend_d2 AS "extend.extendD2", a.extend_d3 AS "extend.extendD3", a.extend_d4 AS "extend.extendD4" FROM js_sys_menu a WHERE a.status = ? AND a.parent_code = ? AND a.sys_code = ? AND a.weight >= ? ORDER BY a.sys_code, a.tree_sorts, a.menu_code 
2019-07-11 10:20:32.458 DEBUG 12872 [io-8980-exec-10] [c.j.modules.sys.dao.MenuDao.findList   ] - ==> Parameters: 0(String), 1098426241822228480(String), default(String), 40(Integer)
2019-07-11 10:20:32.485 DEBUG 12872 [io-8980-exec-10] [c.j.modules.sys.dao.MenuDao.findList   ] - <==      Total: 2
2019-07-11 10:20:32.631 DEBUG 12872 [io-8980-exec-10] [c.j.c.m.m.provider.SelectSqlProvider   ] - 2毫秒: SELECT a.status AS "status", a.create_by AS "createBy", a.create_date AS "createDate", a.update_by AS "updateBy", a.update_date AS "updateDate", a.remarks AS "remarks", a.parent_code AS "parentCode", a.parent_codes AS "parentCodes", a.tree_sort AS "treeSort", a.tree_sorts AS "treeSorts", a.tree_leaf AS "treeLeaf", a.tree_level AS "treeLevel", a.tree_names AS "treeNames", a.menu_code AS "menuCode", a.menu_name AS "menuNameOrig", a.menu_type AS "menuType", a.menu_href AS "menuHref", a.menu_target AS "menuTarget", a.menu_icon AS "menuIcon", a.menu_color AS "menuColor", a.permission AS "permission", a.weight AS "weight", a.is_show AS "isShow", a.sys_code AS "sysCode", a.module_codes AS "moduleCodes", a.extend_s1 AS "extend.extendS1", a.extend_s2 AS "extend.extendS2", a.extend_s3 AS "extend.extendS3", a.extend_s4 AS "extend.extendS4", a.extend_s5 AS "extend.extendS5", a.extend_s6 AS "extend.extendS6", a.extend_s7 AS "extend.extendS7", a.extend_s8 AS "extend.extendS8", a.extend_i1 AS "extend.extendI1", a.extend_i2 AS "extend.extendI2", a.extend_i3 AS "extend.extendI3", a.extend_i4 AS "extend.extendI4", a.extend_f1 AS "extend.extendF1", a.extend_f2 AS "extend.extendF2", a.extend_f3 AS "extend.extendF3", a.extend_f4 AS "extend.extendF4", a.extend_d1 AS "extend.extendD1", a.extend_d2 AS "extend.extendD2", a.extend_d3 AS "extend.extendD3", a.extend_d4 AS "extend.extendD4" FROM js_sys_menu a WHERE a.status = #{sqlMap.where#status#EQ1} AND a.parent_code = #{sqlMap.where#parent_code#EQ1} AND a.sys_code = #{sqlMap.where#sys_code#EQ1} AND a.weight >= #{sqlMap.where.weight#GTE1.val} ORDER BY a.sys_code, a.tree_sorts, a.menu_code
2019-07-11 10:20:32.632 DEBUG 12872 [io-8980-exec-10] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@22e650e] will be managed by Spring
2019-07-11 10:20:32.634 DEBUG 12872 [io-8980-exec-10] [c.j.modules.sys.dao.MenuDao.findList   ] - ==>  Preparing: SELECT a.status AS "status", a.create_by AS "createBy", a.create_date AS "createDate", a.update_by AS "updateBy", a.update_date AS "updateDate", a.remarks AS "remarks", a.parent_code AS "parentCode", a.parent_codes AS "parentCodes", a.tree_sort AS "treeSort", a.tree_sorts AS "treeSorts", a.tree_leaf AS "treeLeaf", a.tree_level AS "treeLevel", a.tree_names AS "treeNames", a.menu_code AS "menuCode", a.menu_name AS "menuNameOrig", a.menu_type AS "menuType", a.menu_href AS "menuHref", a.menu_target AS "menuTarget", a.menu_icon AS "menuIcon", a.menu_color AS "menuColor", a.permission AS "permission", a.weight AS "weight", a.is_show AS "isShow", a.sys_code AS "sysCode", a.module_codes AS "moduleCodes", a.extend_s1 AS "extend.extendS1", a.extend_s2 AS "extend.extendS2", a.extend_s3 AS "extend.extendS3", a.extend_s4 AS "extend.extendS4", a.extend_s5 AS "extend.extendS5", a.extend_s6 AS "extend.extendS6", a.extend_s7 AS "extend.extendS7", a.extend_s8 AS "extend.extendS8", a.extend_i1 AS "extend.extendI1", a.extend_i2 AS "extend.extendI2", a.extend_i3 AS "extend.extendI3", a.extend_i4 AS "extend.extendI4", a.extend_f1 AS "extend.extendF1", a.extend_f2 AS "extend.extendF2", a.extend_f3 AS "extend.extendF3", a.extend_f4 AS "extend.extendF4", a.extend_d1 AS "extend.extendD1", a.extend_d2 AS "extend.extendD2", a.extend_d3 AS "extend.extendD3", a.extend_d4 AS "extend.extendD4" FROM js_sys_menu a WHERE a.status = ? AND a.parent_code = ? AND a.sys_code = ? AND a.weight >= ? ORDER BY a.sys_code, a.tree_sorts, a.menu_code 
2019-07-11 10:20:32.635 DEBUG 12872 [io-8980-exec-10] [c.j.modules.sys.dao.MenuDao.findList   ] - ==> Parameters: 0(String), 1098426277415092224(String), default(String), 40(Integer)
2019-07-11 10:20:32.661 DEBUG 12872 [io-8980-exec-10] [c.j.modules.sys.dao.MenuDao.findList   ] - <==      Total: 3
2019-07-11 10:20:32.805 DEBUG 12872 [io-8980-exec-10] [c.j.c.m.m.provider.SelectSqlProvider   ] - 2毫秒: SELECT a.status AS "status", a.create_by AS "createBy", a.create_date AS "createDate", a.update_by AS "updateBy", a.update_date AS "updateDate", a.remarks AS "remarks", a.parent_code AS "parentCode", a.parent_codes AS "parentCodes", a.tree_sort AS "treeSort", a.tree_sorts AS "treeSorts", a.tree_leaf AS "treeLeaf", a.tree_level AS "treeLevel", a.tree_names AS "treeNames", a.menu_code AS "menuCode", a.menu_name AS "menuNameOrig", a.menu_type AS "menuType", a.menu_href AS "menuHref", a.menu_target AS "menuTarget", a.menu_icon AS "menuIcon", a.menu_color AS "menuColor", a.permission AS "permission", a.weight AS "weight", a.is_show AS "isShow", a.sys_code AS "sysCode", a.module_codes AS "moduleCodes", a.extend_s1 AS "extend.extendS1", a.extend_s2 AS "extend.extendS2", a.extend_s3 AS "extend.extendS3", a.extend_s4 AS "extend.extendS4", a.extend_s5 AS "extend.extendS5", a.extend_s6 AS "extend.extendS6", a.extend_s7 AS "extend.extendS7", a.extend_s8 AS "extend.extendS8", a.extend_i1 AS "extend.extendI1", a.extend_i2 AS "extend.extendI2", a.extend_i3 AS "extend.extendI3", a.extend_i4 AS "extend.extendI4", a.extend_f1 AS "extend.extendF1", a.extend_f2 AS "extend.extendF2", a.extend_f3 AS "extend.extendF3", a.extend_f4 AS "extend.extendF4", a.extend_d1 AS "extend.extendD1", a.extend_d2 AS "extend.extendD2", a.extend_d3 AS "extend.extendD3", a.extend_d4 AS "extend.extendD4" FROM js_sys_menu a WHERE a.status = #{sqlMap.where#status#EQ1} AND a.parent_code = #{sqlMap.where#parent_code#EQ1} AND a.sys_code = #{sqlMap.where#sys_code#EQ1} AND a.weight >= #{sqlMap.where.weight#GTE1.val} ORDER BY a.sys_code, a.tree_sorts, a.menu_code
2019-07-11 10:20:32.806 DEBUG 12872 [io-8980-exec-10] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@22e650e] will be managed by Spring
2019-07-11 10:20:32.807 DEBUG 12872 [io-8980-exec-10] [c.j.modules.sys.dao.MenuDao.findList   ] - ==>  Preparing: SELECT a.status AS "status", a.create_by AS "createBy", a.create_date AS "createDate", a.update_by AS "updateBy", a.update_date AS "updateDate", a.remarks AS "remarks", a.parent_code AS "parentCode", a.parent_codes AS "parentCodes", a.tree_sort AS "treeSort", a.tree_sorts AS "treeSorts", a.tree_leaf AS "treeLeaf", a.tree_level AS "treeLevel", a.tree_names AS "treeNames", a.menu_code AS "menuCode", a.menu_name AS "menuNameOrig", a.menu_type AS "menuType", a.menu_href AS "menuHref", a.menu_target AS "menuTarget", a.menu_icon AS "menuIcon", a.menu_color AS "menuColor", a.permission AS "permission", a.weight AS "weight", a.is_show AS "isShow", a.sys_code AS "sysCode", a.module_codes AS "moduleCodes", a.extend_s1 AS "extend.extendS1", a.extend_s2 AS "extend.extendS2", a.extend_s3 AS "extend.extendS3", a.extend_s4 AS "extend.extendS4", a.extend_s5 AS "extend.extendS5", a.extend_s6 AS "extend.extendS6", a.extend_s7 AS "extend.extendS7", a.extend_s8 AS "extend.extendS8", a.extend_i1 AS "extend.extendI1", a.extend_i2 AS "extend.extendI2", a.extend_i3 AS "extend.extendI3", a.extend_i4 AS "extend.extendI4", a.extend_f1 AS "extend.extendF1", a.extend_f2 AS "extend.extendF2", a.extend_f3 AS "extend.extendF3", a.extend_f4 AS "extend.extendF4", a.extend_d1 AS "extend.extendD1", a.extend_d2 AS "extend.extendD2", a.extend_d3 AS "extend.extendD3", a.extend_d4 AS "extend.extendD4" FROM js_sys_menu a WHERE a.status = ? AND a.parent_code = ? AND a.sys_code = ? AND a.weight >= ? ORDER BY a.sys_code, a.tree_sorts, a.menu_code 
2019-07-11 10:20:32.808 DEBUG 12872 [io-8980-exec-10] [c.j.modules.sys.dao.MenuDao.findList   ] - ==> Parameters: 0(String), 1098426337687240704(String), default(String), 40(Integer)
2019-07-11 10:20:32.834 DEBUG 12872 [io-8980-exec-10] [c.j.modules.sys.dao.MenuDao.findList   ] - <==      Total: 1
2019-07-11 10:20:32.979 DEBUG 12872 [io-8980-exec-10] [c.j.c.m.m.provider.SelectSqlProvider   ] - 1毫秒: SELECT a.status AS "status", a.create_by AS "createBy", a.create_date AS "createDate", a.update_by AS "updateBy", a.update_date AS "updateDate", a.remarks AS "remarks", a.parent_code AS "parentCode", a.parent_codes AS "parentCodes", a.tree_sort AS "treeSort", a.tree_sorts AS "treeSorts", a.tree_leaf AS "treeLeaf", a.tree_level AS "treeLevel", a.tree_names AS "treeNames", a.menu_code AS "menuCode", a.menu_name AS "menuNameOrig", a.menu_type AS "menuType", a.menu_href AS "menuHref", a.menu_target AS "menuTarget", a.menu_icon AS "menuIcon", a.menu_color AS "menuColor", a.permission AS "permission", a.weight AS "weight", a.is_show AS "isShow", a.sys_code AS "sysCode", a.module_codes AS "moduleCodes", a.extend_s1 AS "extend.extendS1", a.extend_s2 AS "extend.extendS2", a.extend_s3 AS "extend.extendS3", a.extend_s4 AS "extend.extendS4", a.extend_s5 AS "extend.extendS5", a.extend_s6 AS "extend.extendS6", a.extend_s7 AS "extend.extendS7", a.extend_s8 AS "extend.extendS8", a.extend_i1 AS "extend.extendI1", a.extend_i2 AS "extend.extendI2", a.extend_i3 AS "extend.extendI3", a.extend_i4 AS "extend.extendI4", a.extend_f1 AS "extend.extendF1", a.extend_f2 AS "extend.extendF2", a.extend_f3 AS "extend.extendF3", a.extend_f4 AS "extend.extendF4", a.extend_d1 AS "extend.extendD1", a.extend_d2 AS "extend.extendD2", a.extend_d3 AS "extend.extendD3", a.extend_d4 AS "extend.extendD4" FROM js_sys_menu a WHERE a.status = #{sqlMap.where#status#EQ1} AND a.parent_code = #{sqlMap.where#parent_code#EQ1} AND a.sys_code = #{sqlMap.where#sys_code#EQ1} AND a.weight >= #{sqlMap.where.weight#GTE1.val} ORDER BY a.sys_code, a.tree_sorts, a.menu_code
2019-07-11 10:20:32.980 DEBUG 12872 [io-8980-exec-10] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@22e650e] will be managed by Spring
2019-07-11 10:20:32.980 DEBUG 12872 [io-8980-exec-10] [c.j.modules.sys.dao.MenuDao.findList   ] - ==>  Preparing: SELECT a.status AS "status", a.create_by AS "createBy", a.create_date AS "createDate", a.update_by AS "updateBy", a.update_date AS "updateDate", a.remarks AS "remarks", a.parent_code AS "parentCode", a.parent_codes AS "parentCodes", a.tree_sort AS "treeSort", a.tree_sorts AS "treeSorts", a.tree_leaf AS "treeLeaf", a.tree_level AS "treeLevel", a.tree_names AS "treeNames", a.menu_code AS "menuCode", a.menu_name AS "menuNameOrig", a.menu_type AS "menuType", a.menu_href AS "menuHref", a.menu_target AS "menuTarget", a.menu_icon AS "menuIcon", a.menu_color AS "menuColor", a.permission AS "permission", a.weight AS "weight", a.is_show AS "isShow", a.sys_code AS "sysCode", a.module_codes AS "moduleCodes", a.extend_s1 AS "extend.extendS1", a.extend_s2 AS "extend.extendS2", a.extend_s3 AS "extend.extendS3", a.extend_s4 AS "extend.extendS4", a.extend_s5 AS "extend.extendS5", a.extend_s6 AS "extend.extendS6", a.extend_s7 AS "extend.extendS7", a.extend_s8 AS "extend.extendS8", a.extend_i1 AS "extend.extendI1", a.extend_i2 AS "extend.extendI2", a.extend_i3 AS "extend.extendI3", a.extend_i4 AS "extend.extendI4", a.extend_f1 AS "extend.extendF1", a.extend_f2 AS "extend.extendF2", a.extend_f3 AS "extend.extendF3", a.extend_f4 AS "extend.extendF4", a.extend_d1 AS "extend.extendD1", a.extend_d2 AS "extend.extendD2", a.extend_d3 AS "extend.extendD3", a.extend_d4 AS "extend.extendD4" FROM js_sys_menu a WHERE a.status = ? AND a.parent_code = ? AND a.sys_code = ? AND a.weight >= ? ORDER BY a.sys_code, a.tree_sorts, a.menu_code 
2019-07-11 10:20:32.981 DEBUG 12872 [io-8980-exec-10] [c.j.modules.sys.dao.MenuDao.findList   ] - ==> Parameters: 0(String), 1098426366493720576(String), default(String), 40(Integer)
2019-07-11 10:20:33.007 DEBUG 12872 [io-8980-exec-10] [c.j.modules.sys.dao.MenuDao.findList   ] - <==      Total: 4
2019-07-11 10:20:33.154 DEBUG 12872 [io-8980-exec-10] [c.j.c.m.m.provider.SelectSqlProvider   ] - 4毫秒: SELECT a.status AS "status", a.create_by AS "createBy", a.create_date AS "createDate", a.update_by AS "updateBy", a.update_date AS "updateDate", a.remarks AS "remarks", a.parent_code AS "parentCode", a.parent_codes AS "parentCodes", a.tree_sort AS "treeSort", a.tree_sorts AS "treeSorts", a.tree_leaf AS "treeLeaf", a.tree_level AS "treeLevel", a.tree_names AS "treeNames", a.menu_code AS "menuCode", a.menu_name AS "menuNameOrig", a.menu_type AS "menuType", a.menu_href AS "menuHref", a.menu_target AS "menuTarget", a.menu_icon AS "menuIcon", a.menu_color AS "menuColor", a.permission AS "permission", a.weight AS "weight", a.is_show AS "isShow", a.sys_code AS "sysCode", a.module_codes AS "moduleCodes", a.extend_s1 AS "extend.extendS1", a.extend_s2 AS "extend.extendS2", a.extend_s3 AS "extend.extendS3", a.extend_s4 AS "extend.extendS4", a.extend_s5 AS "extend.extendS5", a.extend_s6 AS "extend.extendS6", a.extend_s7 AS "extend.extendS7", a.extend_s8 AS "extend.extendS8", a.extend_i1 AS "extend.extendI1", a.extend_i2 AS "extend.extendI2", a.extend_i3 AS "extend.extendI3", a.extend_i4 AS "extend.extendI4", a.extend_f1 AS "extend.extendF1", a.extend_f2 AS "extend.extendF2", a.extend_f3 AS "extend.extendF3", a.extend_f4 AS "extend.extendF4", a.extend_d1 AS "extend.extendD1", a.extend_d2 AS "extend.extendD2", a.extend_d3 AS "extend.extendD3", a.extend_d4 AS "extend.extendD4" FROM js_sys_menu a WHERE a.status = #{sqlMap.where#status#EQ1} AND a.parent_code = #{sqlMap.where#parent_code#EQ1} AND a.sys_code = #{sqlMap.where#sys_code#EQ1} AND a.weight >= #{sqlMap.where.weight#GTE1.val} ORDER BY a.sys_code, a.tree_sorts, a.menu_code
2019-07-11 10:20:33.155 DEBUG 12872 [io-8980-exec-10] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@22e650e] will be managed by Spring
2019-07-11 10:20:33.157 DEBUG 12872 [io-8980-exec-10] [c.j.modules.sys.dao.MenuDao.findList   ] - ==>  Preparing: SELECT a.status AS "status", a.create_by AS "createBy", a.create_date AS "createDate", a.update_by AS "updateBy", a.update_date AS "updateDate", a.remarks AS "remarks", a.parent_code AS "parentCode", a.parent_codes AS "parentCodes", a.tree_sort AS "treeSort", a.tree_sorts AS "treeSorts", a.tree_leaf AS "treeLeaf", a.tree_level AS "treeLevel", a.tree_names AS "treeNames", a.menu_code AS "menuCode", a.menu_name AS "menuNameOrig", a.menu_type AS "menuType", a.menu_href AS "menuHref", a.menu_target AS "menuTarget", a.menu_icon AS "menuIcon", a.menu_color AS "menuColor", a.permission AS "permission", a.weight AS "weight", a.is_show AS "isShow", a.sys_code AS "sysCode", a.module_codes AS "moduleCodes", a.extend_s1 AS "extend.extendS1", a.extend_s2 AS "extend.extendS2", a.extend_s3 AS "extend.extendS3", a.extend_s4 AS "extend.extendS4", a.extend_s5 AS "extend.extendS5", a.extend_s6 AS "extend.extendS6", a.extend_s7 AS "extend.extendS7", a.extend_s8 AS "extend.extendS8", a.extend_i1 AS "extend.extendI1", a.extend_i2 AS "extend.extendI2", a.extend_i3 AS "extend.extendI3", a.extend_i4 AS "extend.extendI4", a.extend_f1 AS "extend.extendF1", a.extend_f2 AS "extend.extendF2", a.extend_f3 AS "extend.extendF3", a.extend_f4 AS "extend.extendF4", a.extend_d1 AS "extend.extendD1", a.extend_d2 AS "extend.extendD2", a.extend_d3 AS "extend.extendD3", a.extend_d4 AS "extend.extendD4" FROM js_sys_menu a WHERE a.status = ? AND a.parent_code = ? AND a.sys_code = ? AND a.weight >= ? ORDER BY a.sys_code, a.tree_sorts, a.menu_code 
2019-07-11 10:20:33.158 DEBUG 12872 [io-8980-exec-10] [c.j.modules.sys.dao.MenuDao.findList   ] - ==> Parameters: 0(String), 1105274968404209664(String), default(String), 40(Integer)
2019-07-11 10:20:33.184 DEBUG 12872 [io-8980-exec-10] [c.j.modules.sys.dao.MenuDao.findList   ] - <==      Total: 2
2019-07-11 10:20:33.328 DEBUG 12872 [io-8980-exec-10] [c.j.c.m.m.provider.SelectSqlProvider   ] - 2毫秒: SELECT a.status AS "status", a.create_by AS "createBy", a.create_date AS "createDate", a.update_by AS "updateBy", a.update_date AS "updateDate", a.remarks AS "remarks", a.parent_code AS "parentCode", a.parent_codes AS "parentCodes", a.tree_sort AS "treeSort", a.tree_sorts AS "treeSorts", a.tree_leaf AS "treeLeaf", a.tree_level AS "treeLevel", a.tree_names AS "treeNames", a.menu_code AS "menuCode", a.menu_name AS "menuNameOrig", a.menu_type AS "menuType", a.menu_href AS "menuHref", a.menu_target AS "menuTarget", a.menu_icon AS "menuIcon", a.menu_color AS "menuColor", a.permission AS "permission", a.weight AS "weight", a.is_show AS "isShow", a.sys_code AS "sysCode", a.module_codes AS "moduleCodes", a.extend_s1 AS "extend.extendS1", a.extend_s2 AS "extend.extendS2", a.extend_s3 AS "extend.extendS3", a.extend_s4 AS "extend.extendS4", a.extend_s5 AS "extend.extendS5", a.extend_s6 AS "extend.extendS6", a.extend_s7 AS "extend.extendS7", a.extend_s8 AS "extend.extendS8", a.extend_i1 AS "extend.extendI1", a.extend_i2 AS "extend.extendI2", a.extend_i3 AS "extend.extendI3", a.extend_i4 AS "extend.extendI4", a.extend_f1 AS "extend.extendF1", a.extend_f2 AS "extend.extendF2", a.extend_f3 AS "extend.extendF3", a.extend_f4 AS "extend.extendF4", a.extend_d1 AS "extend.extendD1", a.extend_d2 AS "extend.extendD2", a.extend_d3 AS "extend.extendD3", a.extend_d4 AS "extend.extendD4" FROM js_sys_menu a WHERE a.status = #{sqlMap.where#status#EQ1} AND a.parent_code = #{sqlMap.where#parent_code#EQ1} AND a.sys_code = #{sqlMap.where#sys_code#EQ1} AND a.weight >= #{sqlMap.where.weight#GTE1.val} ORDER BY a.sys_code, a.tree_sorts, a.menu_code
2019-07-11 10:20:33.328 DEBUG 12872 [io-8980-exec-10] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@22e650e] will be managed by Spring
2019-07-11 10:20:33.330 DEBUG 12872 [io-8980-exec-10] [c.j.modules.sys.dao.MenuDao.findList   ] - ==>  Preparing: SELECT a.status AS "status", a.create_by AS "createBy", a.create_date AS "createDate", a.update_by AS "updateBy", a.update_date AS "updateDate", a.remarks AS "remarks", a.parent_code AS "parentCode", a.parent_codes AS "parentCodes", a.tree_sort AS "treeSort", a.tree_sorts AS "treeSorts", a.tree_leaf AS "treeLeaf", a.tree_level AS "treeLevel", a.tree_names AS "treeNames", a.menu_code AS "menuCode", a.menu_name AS "menuNameOrig", a.menu_type AS "menuType", a.menu_href AS "menuHref", a.menu_target AS "menuTarget", a.menu_icon AS "menuIcon", a.menu_color AS "menuColor", a.permission AS "permission", a.weight AS "weight", a.is_show AS "isShow", a.sys_code AS "sysCode", a.module_codes AS "moduleCodes", a.extend_s1 AS "extend.extendS1", a.extend_s2 AS "extend.extendS2", a.extend_s3 AS "extend.extendS3", a.extend_s4 AS "extend.extendS4", a.extend_s5 AS "extend.extendS5", a.extend_s6 AS "extend.extendS6", a.extend_s7 AS "extend.extendS7", a.extend_s8 AS "extend.extendS8", a.extend_i1 AS "extend.extendI1", a.extend_i2 AS "extend.extendI2", a.extend_i3 AS "extend.extendI3", a.extend_i4 AS "extend.extendI4", a.extend_f1 AS "extend.extendF1", a.extend_f2 AS "extend.extendF2", a.extend_f3 AS "extend.extendF3", a.extend_f4 AS "extend.extendF4", a.extend_d1 AS "extend.extendD1", a.extend_d2 AS "extend.extendD2", a.extend_d3 AS "extend.extendD3", a.extend_d4 AS "extend.extendD4" FROM js_sys_menu a WHERE a.status = ? AND a.parent_code = ? AND a.sys_code = ? AND a.weight >= ? ORDER BY a.sys_code, a.tree_sorts, a.menu_code 
2019-07-11 10:20:33.330 DEBUG 12872 [io-8980-exec-10] [c.j.modules.sys.dao.MenuDao.findList   ] - ==> Parameters: 0(String), 1115425480122118144(String), default(String), 40(Integer)
2019-07-11 10:20:33.356 DEBUG 12872 [io-8980-exec-10] [c.j.modules.sys.dao.MenuDao.findList   ] - <==      Total: 1
2019-07-11 10:20:33.963 DEBUG 12872 [nio-8980-exec-2] [c.j.c.m.m.provider.SelectSqlProvider   ] - 1毫秒: SELECT a.id AS "id", a.msg_type AS "msgType", a.msg_title AS "msgTitle", a.msg_content AS "msgContent", a.biz_key AS "bizKey", a.biz_type AS "bizType", a.receive_code AS "receiveCode", a.receive_user_code AS "receiveUserCode", a.receive_user_name AS "receiveUserName", a.send_user_code AS "sendUserCode", a.send_user_name AS "sendUserName", a.send_date AS "sendDate", a.is_merge_push AS "isMergePush", a.plan_push_date AS "planPushDate", a.push_number AS "pushNumber", a.push_return_code AS "pushReturnCode", a.push_return_msg_id AS "pushReturnMsgId", a.push_return_content AS "pushReturnContent", a.push_status AS "pushStatus", a.push_date AS "pushDate", a.read_status AS "readStatus", a.read_date AS "readDate" FROM js_sys_msg_push a WHERE a.msg_type = #{sqlMap.where#msg_type#EQ1} AND a.receive_user_code = #{sqlMap.where#receive_user_code#EQ1} AND a.read_status = #{sqlMap.where#read_status#EQ1} ORDER BY a.id DESC
2019-07-11 10:20:33.965 DEBUG 12872 [nio-8980-exec-2] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@22e650e] will be managed by Spring
2019-07-11 10:20:34.082 DEBUG 12872 [nio-8980-exec-2] [c.j.modules.msg.dao.MsgPushDao.findList] - ==>  Preparing: SELECT count(0) FROM js_sys_msg_push a WHERE a.msg_type = ? AND a.receive_user_code = ? AND a.read_status = ? 
2019-07-11 10:20:34.084 DEBUG 12872 [nio-8980-exec-2] [c.j.modules.msg.dao.MsgPushDao.findList] - ==> Parameters: pc(String), system(String), 2(String)
2019-07-11 10:20:34.119 DEBUG 12872 [nio-8980-exec-2] [c.j.modules.msg.dao.MsgPushDao.findList] - ==>  Preparing: SELECT a.id AS "id", a.msg_type AS "msgType", a.msg_title AS "msgTitle", a.msg_content AS "msgContent", a.biz_key AS "bizKey", a.biz_type AS "bizType", a.receive_code AS "receiveCode", a.receive_user_code AS "receiveUserCode", a.receive_user_name AS "receiveUserName", a.send_user_code AS "sendUserCode", a.send_user_name AS "sendUserName", a.send_date AS "sendDate", a.is_merge_push AS "isMergePush", a.plan_push_date AS "planPushDate", a.push_number AS "pushNumber", a.push_return_code AS "pushReturnCode", a.push_return_msg_id AS "pushReturnMsgId", a.push_return_content AS "pushReturnContent", a.push_status AS "pushStatus", a.push_date AS "pushDate", a.read_status AS "readStatus", a.read_date AS "readDate" FROM js_sys_msg_push a WHERE a.msg_type = ? AND a.receive_user_code = ? AND a.read_status = ? ORDER BY a.id DESC LIMIT 5 
2019-07-11 10:20:34.119 DEBUG 12872 [nio-8980-exec-2] [c.j.modules.msg.dao.MsgPushDao.findList] - ==> Parameters: pc(String), system(String), 2(String)
2019-07-11 10:20:34.144 DEBUG 12872 [nio-8980-exec-2] [c.j.modules.msg.dao.MsgPushDao.findList] - <==      Total: 0
2019-07-11 10:20:34.242 DEBUG 12872 [nio-8980-exec-2] [c.j.c.m.m.provider.SelectSqlProvider   ] - 1毫秒: SELECT a.id AS "id", a.msg_type AS "msgType", a.msg_title AS "msgTitle", a.msg_content AS "msgContent", a.biz_key AS "bizKey", a.biz_type AS "bizType", a.receive_code AS "receiveCode", a.receive_user_code AS "receiveUserCode", a.receive_user_name AS "receiveUserName", a.send_user_code AS "sendUserCode", a.send_user_name AS "sendUserName", a.send_date AS "sendDate", a.is_merge_push AS "isMergePush", a.plan_push_date AS "planPushDate", a.push_number AS "pushNumber", a.push_return_code AS "pushReturnCode", a.push_return_msg_id AS "pushReturnMsgId", a.push_return_content AS "pushReturnContent", a.push_status AS "pushStatus", a.push_date AS "pushDate", a.read_status AS "readStatus", a.read_date AS "readDate" FROM js_sys_msg_push a WHERE a.msg_type = #{sqlMap.where#msg_type#EQ1} AND a.receive_user_code = #{sqlMap.where#receive_user_code#EQ1} AND a.read_status = #{sqlMap.where#read_status#EQ1} ORDER BY a.id DESC
2019-07-11 10:20:34.242 DEBUG 12872 [nio-8980-exec-2] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@22e650e] will not be managed by Spring
2019-07-11 10:20:34.243 DEBUG 12872 [nio-8980-exec-2] [c.j.modules.msg.dao.MsgPushDao.findList] - ==>  Preparing: SELECT a.id AS "id", a.msg_type AS "msgType", a.msg_title AS "msgTitle", a.msg_content AS "msgContent", a.biz_key AS "bizKey", a.biz_type AS "bizType", a.receive_code AS "receiveCode", a.receive_user_code AS "receiveUserCode", a.receive_user_name AS "receiveUserName", a.send_user_code AS "sendUserCode", a.send_user_name AS "sendUserName", a.send_date AS "sendDate", a.is_merge_push AS "isMergePush", a.plan_push_date AS "planPushDate", a.push_number AS "pushNumber", a.push_return_code AS "pushReturnCode", a.push_return_msg_id AS "pushReturnMsgId", a.push_return_content AS "pushReturnContent", a.push_status AS "pushStatus", a.push_date AS "pushDate", a.read_status AS "readStatus", a.read_date AS "readDate" FROM js_sys_msg_push a WHERE a.msg_type = ? AND a.receive_user_code = ? AND a.read_status = ? ORDER BY a.id DESC 
2019-07-11 10:20:34.243 DEBUG 12872 [nio-8980-exec-2] [c.j.modules.msg.dao.MsgPushDao.findList] - ==> Parameters: pc(String), system(String), 0(String)
2019-07-11 10:20:34.267 DEBUG 12872 [nio-8980-exec-2] [c.j.modules.msg.dao.MsgPushDao.findList] - <==      Total: 0
2019-07-11 10:40:21.997 DEBUG 12872 [io-8980-exec-10] [c.j.c.m.m.provider.SelectSqlProvider   ] - 2毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.product_count AS "productCount", a.total_price AS "totalPrice", a.logistics_price AS "logisticsPrice", a.discount_price AS "discountPrice", a.really_price AS "reallyPrice", a.pay_channel AS "payChannel", a.out_trade_no AS "outTradeNo", a.create_date AS "createDate", a.update_date AS "updateDate", a.create_by AS "createBy", a.update_by AS "updateBy", a.pay_date AS "payDate", a.user_id AS "userId", a.address_id AS "addressId", a.logistics_id AS "logisticsId", a.delivery_date AS "deliveryDate", a.del_flag AS "delFlag", a.delivery_name AS "deliveryName", a.delivery_address AS "deliveryAddress", a.delivery_phone AS "deliveryPhone", a.total_count AS "totalCount", a.trade_no AS "tradeNo" FROM sys_order a WHERE a.order_no = #{sqlMap.where#order_no#EQ1} ORDER BY a.update_date DESC
2019-07-11 10:40:22.115 DEBUG 12872 [io-8980-exec-10] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@22e650e] will not be managed by Spring
2019-07-11 10:40:22.116 DEBUG 12872 [io-8980-exec-10] [c.j.modules.app.dao.OrderDao.findList  ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.product_count AS "productCount", a.total_price AS "totalPrice", a.logistics_price AS "logisticsPrice", a.discount_price AS "discountPrice", a.really_price AS "reallyPrice", a.pay_channel AS "payChannel", a.out_trade_no AS "outTradeNo", a.create_date AS "createDate", a.update_date AS "updateDate", a.create_by AS "createBy", a.update_by AS "updateBy", a.pay_date AS "payDate", a.user_id AS "userId", a.address_id AS "addressId", a.logistics_id AS "logisticsId", a.delivery_date AS "deliveryDate", a.del_flag AS "delFlag", a.delivery_name AS "deliveryName", a.delivery_address AS "deliveryAddress", a.delivery_phone AS "deliveryPhone", a.total_count AS "totalCount", a.trade_no AS "tradeNo" FROM sys_order a WHERE a.order_no = ? ORDER BY a.update_date DESC 
2019-07-11 10:40:22.127 DEBUG 12872 [io-8980-exec-10] [c.j.modules.app.dao.OrderDao.findList  ] - ==> Parameters: 071110401857301(String)
2019-07-11 10:40:22.153 DEBUG 12872 [io-8980-exec-10] [c.j.modules.app.dao.OrderDao.findList  ] - <==      Total: 0
2019-07-11 10:40:22.219 DEBUG 12872 [io-8980-exec-10] [c.j.c.m.m.provider.SelectSqlProvider   ] - 7毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", dd.id AS "userInfo.id", dd.mobile AS "userInfo.mobile", dd.password AS "userInfo.password", dd.icon AS "userInfo.icon", dd.regtime AS "userInfo.regtime", dd.lastlogin AS "userInfo.lastlogin", dd.islock AS "userInfo.islock", dd.isauthentication AS "userInfo.isauthentication", dd.type AS "userInfo.type", dd.create_by AS "userInfo.createBy", dd.create_date AS "userInfo.createDate", dd.update_by AS "userInfo.updateBy", dd.update_date AS "userInfo.updateDate", dd.remarks AS "userInfo.remarks", dd.del_flag AS "userInfo.delFlag", dd.nike_name AS "userInfo.nikeName", dd.is_invite AS "userInfo.isInvite", dd.third_id AS "userInfo.thirdId", dd.third_type AS "userInfo.thirdType", dd.third_icon AS "userInfo.thirdIcon", dd.member_lv AS "userInfo.memberLv", dd.member_flag AS "userInfo.memberFlag", dd.member_start AS "userInfo.memberStart", dd.member_end AS "userInfo.memberEnd", dd.invite_user_id AS "userInfo.inviteUserId", di.id AS "doctorInfos.id", di.doctorid AS "doctorInfos.doctorid", di.doctornum AS "doctorInfos.doctornum", di.name AS "doctorInfos.name", di.sex AS "doctorInfos.sex", di.age AS "doctorInfos.age", di.telephone AS "doctorInfos.telephone", di.idcard AS "doctorInfos.idcard", di.adress AS "doctorInfos.adress", di.technical AS "doctorInfos.technical", di.classify AS "doctorInfos.classify", di.introduce AS "doctorInfos.introduce", di.create_by AS "doctorInfos.createBy", di.cost AS "doctorInfos.cost", di.create_date AS "doctorInfos.createDate", di.update_by AS "doctorInfos.updateBy", di.update_date AS "doctorInfos.updateDate", di.remarks AS "doctorInfos.remarks", di.del_flag AS "doctorInfos.delFlag", di.cityid AS "doctorInfos.cityid", di.come_flag AS "doctorInfos.comeFlag", di.come_cost AS "doctorInfos.comeCost", di.own_flag AS "doctorInfos.ownFlag", di.first_count AS "doctorInfos.firstCount", di.star_lv AS "doctorInfos.starLv" FROM sys_tiaoli_order a LEFT JOIN sys_user_info dd ON a.userid = dd.id LEFT JOIN sys_doctor_info di ON a.docid = di.doctorid WHERE a.order_no = #{sqlMap.where#order_no#EQ1} ORDER BY a.create_date DESC
2019-07-11 10:40:22.220 DEBUG 12872 [io-8980-exec-10] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@22e650e] will not be managed by Spring
2019-07-11 10:40:22.221 DEBUG 12872 [io-8980-exec-10] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", dd.id AS "userInfo.id", dd.mobile AS "userInfo.mobile", dd.password AS "userInfo.password", dd.icon AS "userInfo.icon", dd.regtime AS "userInfo.regtime", dd.lastlogin AS "userInfo.lastlogin", dd.islock AS "userInfo.islock", dd.isauthentication AS "userInfo.isauthentication", dd.type AS "userInfo.type", dd.create_by AS "userInfo.createBy", dd.create_date AS "userInfo.createDate", dd.update_by AS "userInfo.updateBy", dd.update_date AS "userInfo.updateDate", dd.remarks AS "userInfo.remarks", dd.del_flag AS "userInfo.delFlag", dd.nike_name AS "userInfo.nikeName", dd.is_invite AS "userInfo.isInvite", dd.third_id AS "userInfo.thirdId", dd.third_type AS "userInfo.thirdType", dd.third_icon AS "userInfo.thirdIcon", dd.member_lv AS "userInfo.memberLv", dd.member_flag AS "userInfo.memberFlag", dd.member_start AS "userInfo.memberStart", dd.member_end AS "userInfo.memberEnd", dd.invite_user_id AS "userInfo.inviteUserId", di.id AS "doctorInfos.id", di.doctorid AS "doctorInfos.doctorid", di.doctornum AS "doctorInfos.doctornum", di.name AS "doctorInfos.name", di.sex AS "doctorInfos.sex", di.age AS "doctorInfos.age", di.telephone AS "doctorInfos.telephone", di.idcard AS "doctorInfos.idcard", di.adress AS "doctorInfos.adress", di.technical AS "doctorInfos.technical", di.classify AS "doctorInfos.classify", di.introduce AS "doctorInfos.introduce", di.create_by AS "doctorInfos.createBy", di.cost AS "doctorInfos.cost", di.create_date AS "doctorInfos.createDate", di.update_by AS "doctorInfos.updateBy", di.update_date AS "doctorInfos.updateDate", di.remarks AS "doctorInfos.remarks", di.del_flag AS "doctorInfos.delFlag", di.cityid AS "doctorInfos.cityid", di.come_flag AS "doctorInfos.comeFlag", di.come_cost AS "doctorInfos.comeCost", di.own_flag AS "doctorInfos.ownFlag", di.first_count AS "doctorInfos.firstCount", di.star_lv AS "doctorInfos.starLv" FROM sys_tiaoli_order a LEFT JOIN sys_user_info dd ON a.userid = dd.id LEFT JOIN sys_doctor_info di ON a.docid = di.doctorid WHERE a.order_no = ? ORDER BY a.create_date DESC 
2019-07-11 10:40:22.221 DEBUG 12872 [io-8980-exec-10] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - ==> Parameters: 071110401857301(String)
2019-07-11 10:40:22.284 DEBUG 12872 [io-8980-exec-10] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - <==      Total: 1
2019-07-11 10:40:22.285 DEBUG 12872 [io-8980-exec-10] [c.j.c.m.m.provider.SelectSqlProvider   ] - 1毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", dd.id AS "userInfo.id", dd.mobile AS "userInfo.mobile", dd.password AS "userInfo.password", dd.icon AS "userInfo.icon", dd.regtime AS "userInfo.regtime", dd.lastlogin AS "userInfo.lastlogin", dd.islock AS "userInfo.islock", dd.isauthentication AS "userInfo.isauthentication", dd.type AS "userInfo.type", dd.create_by AS "userInfo.createBy", dd.create_date AS "userInfo.createDate", dd.update_by AS "userInfo.updateBy", dd.update_date AS "userInfo.updateDate", dd.remarks AS "userInfo.remarks", dd.del_flag AS "userInfo.delFlag", dd.nike_name AS "userInfo.nikeName", dd.is_invite AS "userInfo.isInvite", dd.third_id AS "userInfo.thirdId", dd.third_type AS "userInfo.thirdType", dd.third_icon AS "userInfo.thirdIcon", dd.member_lv AS "userInfo.memberLv", dd.member_flag AS "userInfo.memberFlag", dd.member_start AS "userInfo.memberStart", dd.member_end AS "userInfo.memberEnd", dd.invite_user_id AS "userInfo.inviteUserId", di.id AS "doctorInfos.id", di.doctorid AS "doctorInfos.doctorid", di.doctornum AS "doctorInfos.doctornum", di.name AS "doctorInfos.name", di.sex AS "doctorInfos.sex", di.age AS "doctorInfos.age", di.telephone AS "doctorInfos.telephone", di.idcard AS "doctorInfos.idcard", di.adress AS "doctorInfos.adress", di.technical AS "doctorInfos.technical", di.classify AS "doctorInfos.classify", di.introduce AS "doctorInfos.introduce", di.create_by AS "doctorInfos.createBy", di.cost AS "doctorInfos.cost", di.create_date AS "doctorInfos.createDate", di.update_by AS "doctorInfos.updateBy", di.update_date AS "doctorInfos.updateDate", di.remarks AS "doctorInfos.remarks", di.del_flag AS "doctorInfos.delFlag", di.cityid AS "doctorInfos.cityid", di.come_flag AS "doctorInfos.comeFlag", di.come_cost AS "doctorInfos.comeCost", di.own_flag AS "doctorInfos.ownFlag", di.first_count AS "doctorInfos.firstCount", di.star_lv AS "doctorInfos.starLv" FROM sys_tiaoli_order a LEFT JOIN sys_user_info dd ON a.userid = dd.id LEFT JOIN sys_doctor_info di ON a.docid = di.doctorid WHERE a.order_no = #{sqlMap.where#order_no#EQ1} ORDER BY a.create_date DESC
2019-07-11 10:40:22.286 DEBUG 12872 [io-8980-exec-10] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@22e650e] will not be managed by Spring
2019-07-11 10:40:22.286 DEBUG 12872 [io-8980-exec-10] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", dd.id AS "userInfo.id", dd.mobile AS "userInfo.mobile", dd.password AS "userInfo.password", dd.icon AS "userInfo.icon", dd.regtime AS "userInfo.regtime", dd.lastlogin AS "userInfo.lastlogin", dd.islock AS "userInfo.islock", dd.isauthentication AS "userInfo.isauthentication", dd.type AS "userInfo.type", dd.create_by AS "userInfo.createBy", dd.create_date AS "userInfo.createDate", dd.update_by AS "userInfo.updateBy", dd.update_date AS "userInfo.updateDate", dd.remarks AS "userInfo.remarks", dd.del_flag AS "userInfo.delFlag", dd.nike_name AS "userInfo.nikeName", dd.is_invite AS "userInfo.isInvite", dd.third_id AS "userInfo.thirdId", dd.third_type AS "userInfo.thirdType", dd.third_icon AS "userInfo.thirdIcon", dd.member_lv AS "userInfo.memberLv", dd.member_flag AS "userInfo.memberFlag", dd.member_start AS "userInfo.memberStart", dd.member_end AS "userInfo.memberEnd", dd.invite_user_id AS "userInfo.inviteUserId", di.id AS "doctorInfos.id", di.doctorid AS "doctorInfos.doctorid", di.doctornum AS "doctorInfos.doctornum", di.name AS "doctorInfos.name", di.sex AS "doctorInfos.sex", di.age AS "doctorInfos.age", di.telephone AS "doctorInfos.telephone", di.idcard AS "doctorInfos.idcard", di.adress AS "doctorInfos.adress", di.technical AS "doctorInfos.technical", di.classify AS "doctorInfos.classify", di.introduce AS "doctorInfos.introduce", di.create_by AS "doctorInfos.createBy", di.cost AS "doctorInfos.cost", di.create_date AS "doctorInfos.createDate", di.update_by AS "doctorInfos.updateBy", di.update_date AS "doctorInfos.updateDate", di.remarks AS "doctorInfos.remarks", di.del_flag AS "doctorInfos.delFlag", di.cityid AS "doctorInfos.cityid", di.come_flag AS "doctorInfos.comeFlag", di.come_cost AS "doctorInfos.comeCost", di.own_flag AS "doctorInfos.ownFlag", di.first_count AS "doctorInfos.firstCount", di.star_lv AS "doctorInfos.starLv" FROM sys_tiaoli_order a LEFT JOIN sys_user_info dd ON a.userid = dd.id LEFT JOIN sys_doctor_info di ON a.docid = di.doctorid WHERE a.order_no = ? ORDER BY a.create_date DESC 
2019-07-11 10:40:22.287 DEBUG 12872 [io-8980-exec-10] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - ==> Parameters: 071110401857301(String)
2019-07-11 10:40:22.314 DEBUG 12872 [io-8980-exec-10] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - <==      Total: 1
2019-07-11 10:40:22.400 DEBUG 12872 [io-8980-exec-10] [c.j.c.m.m.provider.SelectSqlProvider   ] - 1毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.total_price AS "totalPrice", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag" FROM sys_member_order a WHERE a.order_no = #{sqlMap.where#order_no#EQ1} ORDER BY a.update_date DESC
2019-07-11 10:40:22.402 DEBUG 12872 [io-8980-exec-10] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@22e650e] will not be managed by Spring
2019-07-11 10:40:22.402 DEBUG 12872 [io-8980-exec-10] [c.j.m.app.dao.MemberOrderDao.findList  ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.total_price AS "totalPrice", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag" FROM sys_member_order a WHERE a.order_no = ? ORDER BY a.update_date DESC 
2019-07-11 10:40:22.402 DEBUG 12872 [io-8980-exec-10] [c.j.m.app.dao.MemberOrderDao.findList  ] - ==> Parameters: 071110401857301(String)
2019-07-11 10:40:22.425 DEBUG 12872 [io-8980-exec-10] [c.j.m.app.dao.MemberOrderDao.findList  ] - <==      Total: 0
2019-07-11 10:40:22.462 DEBUG 12872 [io-8980-exec-10] [c.j.c.m.m.provider.SelectSqlProvider   ] - 0毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.total_price AS "totalPrice", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", a.doctor_user_id AS "doctorUserId" FROM sys_doctor_register_order a WHERE a.order_no = #{sqlMap.where#order_no#EQ1} ORDER BY a.update_date DESC
2019-07-11 10:40:22.464 DEBUG 12872 [io-8980-exec-10] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@22e650e] will not be managed by Spring
2019-07-11 10:40:22.465 DEBUG 12872 [io-8980-exec-10] [c.j.m.a.d.D.findList                   ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.total_price AS "totalPrice", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", a.doctor_user_id AS "doctorUserId" FROM sys_doctor_register_order a WHERE a.order_no = ? ORDER BY a.update_date DESC 
2019-07-11 10:40:22.465 DEBUG 12872 [io-8980-exec-10] [c.j.m.a.d.D.findList                   ] - ==> Parameters: 071110401857301(String)
2019-07-11 10:40:22.489 DEBUG 12872 [io-8980-exec-10] [c.j.m.a.d.D.findList                   ] - <==      Total: 0
2019-07-11 10:40:22.519 DEBUG 12872 [io-8980-exec-10] [c.j.c.m.m.provider.SelectSqlProvider   ] - 2毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag" FROM sys_dashang_order a WHERE a.order_no = #{sqlMap.where#order_no#EQ1} ORDER BY a.update_date DESC
2019-07-11 10:40:22.521 DEBUG 12872 [io-8980-exec-10] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@22e650e] will not be managed by Spring
2019-07-11 10:40:22.521 DEBUG 12872 [io-8980-exec-10] [c.j.m.app.dao.DashangOrderDao.findList ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag" FROM sys_dashang_order a WHERE a.order_no = ? ORDER BY a.update_date DESC 
2019-07-11 10:40:22.522 DEBUG 12872 [io-8980-exec-10] [c.j.m.app.dao.DashangOrderDao.findList ] - ==> Parameters: 071110401857301(String)
2019-07-11 10:40:22.545 DEBUG 12872 [io-8980-exec-10] [c.j.m.app.dao.DashangOrderDao.findList ] - <==      Total: 0
2019-07-11 10:40:22.590 DEBUG 12872 [io-8980-exec-10] [c.j.c.m.m.provider.UpdateSqlProvider   ] - 0毫秒: UPDATE sys_tiaoli_order SET `order_no` = #{orderNo}, `order_status` = #{orderStatus}, `count` = #{count}, `total_price` = #{totalPrice}, `come_cost` = #{comeCost}, `docid` = #{docid}, `userid` = #{userid}, `update_date` = #{updateDate}, `out_trade_no` = #{outTradeNo}, `del_flag` = #{delFlag} WHERE `id` = #{id}
2019-07-11 10:40:22.590 DEBUG 12872 [io-8980-exec-10] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@22e650e] will be managed by Spring
2019-07-11 10:40:22.591 DEBUG 12872 [io-8980-exec-10] [c.j.m.app.dao.TiaoliOrderDao.update    ] - ==>  Preparing: UPDATE sys_tiaoli_order SET `order_no` = ?, `order_status` = ?, `count` = ?, `total_price` = ?, `come_cost` = ?, `docid` = ?, `userid` = ?, `update_date` = ?, `out_trade_no` = ?, `del_flag` = ? WHERE `id` = ? 
2019-07-11 10:40:22.600 DEBUG 12872 [io-8980-exec-10] [c.j.m.app.dao.TiaoliOrderDao.update    ] - ==> Parameters: 071110401857301(String), 0(String), 1(String), 1000(String), 1000(String), 0f2067603f1111e99752bcaec5595fa3(String), fb4efe6aa22311e9b780fa163e609e56(String), 2019-07-11 10:40:19.0(Timestamp), 2019071110402000000(String), 0(String), 1149146366661935104(String)
2019-07-11 10:40:22.648 DEBUG 12872 [io-8980-exec-10] [c.j.m.app.dao.TiaoliOrderDao.update    ] - <==    Updates: 1
2019-07-11 10:40:28.981 DEBUG 12872 [nio-8980-exec-1] [c.j.c.m.m.provider.SelectSqlProvider   ] - 0毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.product_count AS "productCount", a.total_price AS "totalPrice", a.logistics_price AS "logisticsPrice", a.discount_price AS "discountPrice", a.really_price AS "reallyPrice", a.pay_channel AS "payChannel", a.out_trade_no AS "outTradeNo", a.create_date AS "createDate", a.update_date AS "updateDate", a.create_by AS "createBy", a.update_by AS "updateBy", a.pay_date AS "payDate", a.user_id AS "userId", a.address_id AS "addressId", a.logistics_id AS "logisticsId", a.delivery_date AS "deliveryDate", a.del_flag AS "delFlag", a.delivery_name AS "deliveryName", a.delivery_address AS "deliveryAddress", a.delivery_phone AS "deliveryPhone", a.total_count AS "totalCount", a.trade_no AS "tradeNo" FROM sys_order a WHERE a.out_trade_no = #{sqlMap.where#out_trade_no#EQ1} ORDER BY a.update_date DESC
2019-07-11 10:40:28.982 DEBUG 12872 [nio-8980-exec-1] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@22e650e] will not be managed by Spring
2019-07-11 10:40:28.982 DEBUG 12872 [nio-8980-exec-1] [c.j.modules.app.dao.OrderDao.findList  ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.product_count AS "productCount", a.total_price AS "totalPrice", a.logistics_price AS "logisticsPrice", a.discount_price AS "discountPrice", a.really_price AS "reallyPrice", a.pay_channel AS "payChannel", a.out_trade_no AS "outTradeNo", a.create_date AS "createDate", a.update_date AS "updateDate", a.create_by AS "createBy", a.update_by AS "updateBy", a.pay_date AS "payDate", a.user_id AS "userId", a.address_id AS "addressId", a.logistics_id AS "logisticsId", a.delivery_date AS "deliveryDate", a.del_flag AS "delFlag", a.delivery_name AS "deliveryName", a.delivery_address AS "deliveryAddress", a.delivery_phone AS "deliveryPhone", a.total_count AS "totalCount", a.trade_no AS "tradeNo" FROM sys_order a WHERE a.out_trade_no = ? ORDER BY a.update_date DESC 
2019-07-11 10:40:28.982 DEBUG 12872 [nio-8980-exec-1] [c.j.modules.app.dao.OrderDao.findList  ] - ==> Parameters: 2019071110402000000(String)
2019-07-11 10:40:29.008 DEBUG 12872 [nio-8980-exec-1] [c.j.modules.app.dao.OrderDao.findList  ] - <==      Total: 0
2019-07-11 10:40:29.009 DEBUG 12872 [nio-8980-exec-1] [c.j.c.m.m.provider.SelectSqlProvider   ] - 1毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", dd.id AS "userInfo.id", dd.mobile AS "userInfo.mobile", dd.password AS "userInfo.password", dd.icon AS "userInfo.icon", dd.regtime AS "userInfo.regtime", dd.lastlogin AS "userInfo.lastlogin", dd.islock AS "userInfo.islock", dd.isauthentication AS "userInfo.isauthentication", dd.type AS "userInfo.type", dd.create_by AS "userInfo.createBy", dd.create_date AS "userInfo.createDate", dd.update_by AS "userInfo.updateBy", dd.update_date AS "userInfo.updateDate", dd.remarks AS "userInfo.remarks", dd.del_flag AS "userInfo.delFlag", dd.nike_name AS "userInfo.nikeName", dd.is_invite AS "userInfo.isInvite", dd.third_id AS "userInfo.thirdId", dd.third_type AS "userInfo.thirdType", dd.third_icon AS "userInfo.thirdIcon", dd.member_lv AS "userInfo.memberLv", dd.member_flag AS "userInfo.memberFlag", dd.member_start AS "userInfo.memberStart", dd.member_end AS "userInfo.memberEnd", dd.invite_user_id AS "userInfo.inviteUserId", di.id AS "doctorInfos.id", di.doctorid AS "doctorInfos.doctorid", di.doctornum AS "doctorInfos.doctornum", di.name AS "doctorInfos.name", di.sex AS "doctorInfos.sex", di.age AS "doctorInfos.age", di.telephone AS "doctorInfos.telephone", di.idcard AS "doctorInfos.idcard", di.adress AS "doctorInfos.adress", di.technical AS "doctorInfos.technical", di.classify AS "doctorInfos.classify", di.introduce AS "doctorInfos.introduce", di.create_by AS "doctorInfos.createBy", di.cost AS "doctorInfos.cost", di.create_date AS "doctorInfos.createDate", di.update_by AS "doctorInfos.updateBy", di.update_date AS "doctorInfos.updateDate", di.remarks AS "doctorInfos.remarks", di.del_flag AS "doctorInfos.delFlag", di.cityid AS "doctorInfos.cityid", di.come_flag AS "doctorInfos.comeFlag", di.come_cost AS "doctorInfos.comeCost", di.own_flag AS "doctorInfos.ownFlag", di.first_count AS "doctorInfos.firstCount", di.star_lv AS "doctorInfos.starLv" FROM sys_tiaoli_order a LEFT JOIN sys_user_info dd ON a.userid = dd.id LEFT JOIN sys_doctor_info di ON a.docid = di.doctorid WHERE a.out_trade_no = #{sqlMap.where#out_trade_no#EQ1} ORDER BY a.create_date DESC
2019-07-11 10:40:29.010 DEBUG 12872 [nio-8980-exec-1] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@22e650e] will not be managed by Spring
2019-07-11 10:40:29.010 DEBUG 12872 [nio-8980-exec-1] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", dd.id AS "userInfo.id", dd.mobile AS "userInfo.mobile", dd.password AS "userInfo.password", dd.icon AS "userInfo.icon", dd.regtime AS "userInfo.regtime", dd.lastlogin AS "userInfo.lastlogin", dd.islock AS "userInfo.islock", dd.isauthentication AS "userInfo.isauthentication", dd.type AS "userInfo.type", dd.create_by AS "userInfo.createBy", dd.create_date AS "userInfo.createDate", dd.update_by AS "userInfo.updateBy", dd.update_date AS "userInfo.updateDate", dd.remarks AS "userInfo.remarks", dd.del_flag AS "userInfo.delFlag", dd.nike_name AS "userInfo.nikeName", dd.is_invite AS "userInfo.isInvite", dd.third_id AS "userInfo.thirdId", dd.third_type AS "userInfo.thirdType", dd.third_icon AS "userInfo.thirdIcon", dd.member_lv AS "userInfo.memberLv", dd.member_flag AS "userInfo.memberFlag", dd.member_start AS "userInfo.memberStart", dd.member_end AS "userInfo.memberEnd", dd.invite_user_id AS "userInfo.inviteUserId", di.id AS "doctorInfos.id", di.doctorid AS "doctorInfos.doctorid", di.doctornum AS "doctorInfos.doctornum", di.name AS "doctorInfos.name", di.sex AS "doctorInfos.sex", di.age AS "doctorInfos.age", di.telephone AS "doctorInfos.telephone", di.idcard AS "doctorInfos.idcard", di.adress AS "doctorInfos.adress", di.technical AS "doctorInfos.technical", di.classify AS "doctorInfos.classify", di.introduce AS "doctorInfos.introduce", di.create_by AS "doctorInfos.createBy", di.cost AS "doctorInfos.cost", di.create_date AS "doctorInfos.createDate", di.update_by AS "doctorInfos.updateBy", di.update_date AS "doctorInfos.updateDate", di.remarks AS "doctorInfos.remarks", di.del_flag AS "doctorInfos.delFlag", di.cityid AS "doctorInfos.cityid", di.come_flag AS "doctorInfos.comeFlag", di.come_cost AS "doctorInfos.comeCost", di.own_flag AS "doctorInfos.ownFlag", di.first_count AS "doctorInfos.firstCount", di.star_lv AS "doctorInfos.starLv" FROM sys_tiaoli_order a LEFT JOIN sys_user_info dd ON a.userid = dd.id LEFT JOIN sys_doctor_info di ON a.docid = di.doctorid WHERE a.out_trade_no = ? ORDER BY a.create_date DESC 
2019-07-11 10:40:29.011 DEBUG 12872 [nio-8980-exec-1] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - ==> Parameters: 2019071110402000000(String)
2019-07-11 10:40:29.038 DEBUG 12872 [nio-8980-exec-1] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - <==      Total: 1
2019-07-11 10:40:29.039 DEBUG 12872 [nio-8980-exec-1] [c.j.c.m.m.provider.SelectSqlProvider   ] - 1毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", dd.id AS "userInfo.id", dd.mobile AS "userInfo.mobile", dd.password AS "userInfo.password", dd.icon AS "userInfo.icon", dd.regtime AS "userInfo.regtime", dd.lastlogin AS "userInfo.lastlogin", dd.islock AS "userInfo.islock", dd.isauthentication AS "userInfo.isauthentication", dd.type AS "userInfo.type", dd.create_by AS "userInfo.createBy", dd.create_date AS "userInfo.createDate", dd.update_by AS "userInfo.updateBy", dd.update_date AS "userInfo.updateDate", dd.remarks AS "userInfo.remarks", dd.del_flag AS "userInfo.delFlag", dd.nike_name AS "userInfo.nikeName", dd.is_invite AS "userInfo.isInvite", dd.third_id AS "userInfo.thirdId", dd.third_type AS "userInfo.thirdType", dd.third_icon AS "userInfo.thirdIcon", dd.member_lv AS "userInfo.memberLv", dd.member_flag AS "userInfo.memberFlag", dd.member_start AS "userInfo.memberStart", dd.member_end AS "userInfo.memberEnd", dd.invite_user_id AS "userInfo.inviteUserId", di.id AS "doctorInfos.id", di.doctorid AS "doctorInfos.doctorid", di.doctornum AS "doctorInfos.doctornum", di.name AS "doctorInfos.name", di.sex AS "doctorInfos.sex", di.age AS "doctorInfos.age", di.telephone AS "doctorInfos.telephone", di.idcard AS "doctorInfos.idcard", di.adress AS "doctorInfos.adress", di.technical AS "doctorInfos.technical", di.classify AS "doctorInfos.classify", di.introduce AS "doctorInfos.introduce", di.create_by AS "doctorInfos.createBy", di.cost AS "doctorInfos.cost", di.create_date AS "doctorInfos.createDate", di.update_by AS "doctorInfos.updateBy", di.update_date AS "doctorInfos.updateDate", di.remarks AS "doctorInfos.remarks", di.del_flag AS "doctorInfos.delFlag", di.cityid AS "doctorInfos.cityid", di.come_flag AS "doctorInfos.comeFlag", di.come_cost AS "doctorInfos.comeCost", di.own_flag AS "doctorInfos.ownFlag", di.first_count AS "doctorInfos.firstCount", di.star_lv AS "doctorInfos.starLv" FROM sys_tiaoli_order a LEFT JOIN sys_user_info dd ON a.userid = dd.id LEFT JOIN sys_doctor_info di ON a.docid = di.doctorid WHERE a.out_trade_no = #{sqlMap.where#out_trade_no#EQ1} ORDER BY a.create_date DESC
2019-07-11 10:40:29.040 DEBUG 12872 [nio-8980-exec-1] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@22e650e] will not be managed by Spring
2019-07-11 10:40:29.040 DEBUG 12872 [nio-8980-exec-1] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", dd.id AS "userInfo.id", dd.mobile AS "userInfo.mobile", dd.password AS "userInfo.password", dd.icon AS "userInfo.icon", dd.regtime AS "userInfo.regtime", dd.lastlogin AS "userInfo.lastlogin", dd.islock AS "userInfo.islock", dd.isauthentication AS "userInfo.isauthentication", dd.type AS "userInfo.type", dd.create_by AS "userInfo.createBy", dd.create_date AS "userInfo.createDate", dd.update_by AS "userInfo.updateBy", dd.update_date AS "userInfo.updateDate", dd.remarks AS "userInfo.remarks", dd.del_flag AS "userInfo.delFlag", dd.nike_name AS "userInfo.nikeName", dd.is_invite AS "userInfo.isInvite", dd.third_id AS "userInfo.thirdId", dd.third_type AS "userInfo.thirdType", dd.third_icon AS "userInfo.thirdIcon", dd.member_lv AS "userInfo.memberLv", dd.member_flag AS "userInfo.memberFlag", dd.member_start AS "userInfo.memberStart", dd.member_end AS "userInfo.memberEnd", dd.invite_user_id AS "userInfo.inviteUserId", di.id AS "doctorInfos.id", di.doctorid AS "doctorInfos.doctorid", di.doctornum AS "doctorInfos.doctornum", di.name AS "doctorInfos.name", di.sex AS "doctorInfos.sex", di.age AS "doctorInfos.age", di.telephone AS "doctorInfos.telephone", di.idcard AS "doctorInfos.idcard", di.adress AS "doctorInfos.adress", di.technical AS "doctorInfos.technical", di.classify AS "doctorInfos.classify", di.introduce AS "doctorInfos.introduce", di.create_by AS "doctorInfos.createBy", di.cost AS "doctorInfos.cost", di.create_date AS "doctorInfos.createDate", di.update_by AS "doctorInfos.updateBy", di.update_date AS "doctorInfos.updateDate", di.remarks AS "doctorInfos.remarks", di.del_flag AS "doctorInfos.delFlag", di.cityid AS "doctorInfos.cityid", di.come_flag AS "doctorInfos.comeFlag", di.come_cost AS "doctorInfos.comeCost", di.own_flag AS "doctorInfos.ownFlag", di.first_count AS "doctorInfos.firstCount", di.star_lv AS "doctorInfos.starLv" FROM sys_tiaoli_order a LEFT JOIN sys_user_info dd ON a.userid = dd.id LEFT JOIN sys_doctor_info di ON a.docid = di.doctorid WHERE a.out_trade_no = ? ORDER BY a.create_date DESC 
2019-07-11 10:40:29.041 DEBUG 12872 [nio-8980-exec-1] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - ==> Parameters: 2019071110402000000(String)
2019-07-11 10:40:29.068 DEBUG 12872 [nio-8980-exec-1] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - <==      Total: 1
2019-07-11 10:40:29.069 DEBUG 12872 [nio-8980-exec-1] [c.j.c.m.m.provider.SelectSqlProvider   ] - 0毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.total_price AS "totalPrice", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag" FROM sys_member_order a WHERE a.out_trade_no = #{sqlMap.where#out_trade_no#EQ1} ORDER BY a.update_date DESC
2019-07-11 10:40:29.070 DEBUG 12872 [nio-8980-exec-1] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@22e650e] will not be managed by Spring
2019-07-11 10:40:29.070 DEBUG 12872 [nio-8980-exec-1] [c.j.m.app.dao.MemberOrderDao.findList  ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.total_price AS "totalPrice", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag" FROM sys_member_order a WHERE a.out_trade_no = ? ORDER BY a.update_date DESC 
2019-07-11 10:40:29.070 DEBUG 12872 [nio-8980-exec-1] [c.j.m.app.dao.MemberOrderDao.findList  ] - ==> Parameters: 2019071110402000000(String)
2019-07-11 10:40:29.095 DEBUG 12872 [nio-8980-exec-1] [c.j.m.app.dao.MemberOrderDao.findList  ] - <==      Total: 0
2019-07-11 10:40:29.096 DEBUG 12872 [nio-8980-exec-1] [c.j.c.m.m.provider.SelectSqlProvider   ] - 1毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.total_price AS "totalPrice", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", a.doctor_user_id AS "doctorUserId" FROM sys_doctor_register_order a WHERE a.out_trade_no = #{sqlMap.where#out_trade_no#EQ1} ORDER BY a.update_date DESC
2019-07-11 10:40:29.096 DEBUG 12872 [nio-8980-exec-1] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@22e650e] will not be managed by Spring
2019-07-11 10:40:29.097 DEBUG 12872 [nio-8980-exec-1] [c.j.m.a.d.D.findList                   ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.total_price AS "totalPrice", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", a.doctor_user_id AS "doctorUserId" FROM sys_doctor_register_order a WHERE a.out_trade_no = ? ORDER BY a.update_date DESC 
2019-07-11 10:40:29.097 DEBUG 12872 [nio-8980-exec-1] [c.j.m.a.d.D.findList                   ] - ==> Parameters: 2019071110402000000(String)
2019-07-11 10:40:29.121 DEBUG 12872 [nio-8980-exec-1] [c.j.m.a.d.D.findList                   ] - <==      Total: 0
2019-07-11 10:40:29.122 DEBUG 12872 [nio-8980-exec-1] [c.j.c.m.m.provider.SelectSqlProvider   ] - 0毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag" FROM sys_dashang_order a WHERE a.out_trade_no = #{sqlMap.where#out_trade_no#EQ1} ORDER BY a.update_date DESC
2019-07-11 10:40:29.123 DEBUG 12872 [nio-8980-exec-1] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@22e650e] will not be managed by Spring
2019-07-11 10:40:29.123 DEBUG 12872 [nio-8980-exec-1] [c.j.m.app.dao.DashangOrderDao.findList ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag" FROM sys_dashang_order a WHERE a.out_trade_no = ? ORDER BY a.update_date DESC 
2019-07-11 10:40:29.124 DEBUG 12872 [nio-8980-exec-1] [c.j.m.app.dao.DashangOrderDao.findList ] - ==> Parameters: 2019071110402000000(String)
2019-07-11 10:40:29.147 DEBUG 12872 [nio-8980-exec-1] [c.j.m.app.dao.DashangOrderDao.findList ] - <==      Total: 0
2019-07-11 10:40:29.171 DEBUG 12872 [nio-8980-exec-1] [c.j.c.m.m.provider.UpdateSqlProvider   ] - 0毫秒: UPDATE sys_tiaoli_order SET `order_no` = #{orderNo}, `order_status` = #{orderStatus}, `count` = #{count}, `total_price` = #{totalPrice}, `come_cost` = #{comeCost}, `docid` = #{docid}, `userid` = #{userid}, `update_date` = #{updateDate}, `out_trade_no` = #{outTradeNo}, `pay_date` = #{payDate}, `pay_channel` = #{payChannel}, `del_flag` = #{delFlag} WHERE `id` = #{id}
2019-07-11 10:40:29.172 DEBUG 12872 [nio-8980-exec-1] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@22e650e] will be managed by Spring
2019-07-11 10:40:29.172 DEBUG 12872 [nio-8980-exec-1] [c.j.m.app.dao.TiaoliOrderDao.update    ] - ==>  Preparing: UPDATE sys_tiaoli_order SET `order_no` = ?, `order_status` = ?, `count` = ?, `total_price` = ?, `come_cost` = ?, `docid` = ?, `userid` = ?, `update_date` = ?, `out_trade_no` = ?, `pay_date` = ?, `pay_channel` = ?, `del_flag` = ? WHERE `id` = ? 
2019-07-11 10:40:29.173 DEBUG 12872 [nio-8980-exec-1] [c.j.m.app.dao.TiaoliOrderDao.update    ] - ==> Parameters: 071110401857301(String), 1(String), 1(String), 1000(String), 1000(String), 0f2067603f1111e99752bcaec5595fa3(String), fb4efe6aa22311e9b780fa163e609e56(String), 2019-07-11 10:40:19.0(Timestamp), 2019071110402000000(String), 2019-07-11 10:40:29.147(Timestamp), 微信(String), 0(String), 1149146366661935104(String)
2019-07-11 10:40:29.220 DEBUG 12872 [nio-8980-exec-1] [c.j.m.app.dao.TiaoliOrderDao.update    ] - <==    Updates: 1
2019-07-11 10:43:22.980 DEBUG 12872 [nio-8980-exec-6] [c.j.c.m.m.provider.SelectSqlProvider   ] - 40毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.product_count AS "productCount", a.total_price AS "totalPrice", a.logistics_price AS "logisticsPrice", a.discount_price AS "discountPrice", a.really_price AS "reallyPrice", a.pay_channel AS "payChannel", a.out_trade_no AS "outTradeNo", a.create_date AS "createDate", a.update_date AS "updateDate", a.create_by AS "createBy", a.update_by AS "updateBy", a.pay_date AS "payDate", a.user_id AS "userId", a.address_id AS "addressId", a.logistics_id AS "logisticsId", a.delivery_date AS "deliveryDate", a.del_flag AS "delFlag", a.delivery_name AS "deliveryName", a.delivery_address AS "deliveryAddress", a.delivery_phone AS "deliveryPhone", a.total_count AS "totalCount", a.trade_no AS "tradeNo" FROM sys_order a WHERE a.order_no = #{sqlMap.where#order_no#EQ1} ORDER BY a.update_date DESC
2019-07-11 10:43:23.011 DEBUG 12872 [nio-8980-exec-6] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@22e650e] will not be managed by Spring
2019-07-11 10:43:23.019 DEBUG 12872 [nio-8980-exec-6] [c.j.modules.app.dao.OrderDao.findList  ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.product_count AS "productCount", a.total_price AS "totalPrice", a.logistics_price AS "logisticsPrice", a.discount_price AS "discountPrice", a.really_price AS "reallyPrice", a.pay_channel AS "payChannel", a.out_trade_no AS "outTradeNo", a.create_date AS "createDate", a.update_date AS "updateDate", a.create_by AS "createBy", a.update_by AS "updateBy", a.pay_date AS "payDate", a.user_id AS "userId", a.address_id AS "addressId", a.logistics_id AS "logisticsId", a.delivery_date AS "deliveryDate", a.del_flag AS "delFlag", a.delivery_name AS "deliveryName", a.delivery_address AS "deliveryAddress", a.delivery_phone AS "deliveryPhone", a.total_count AS "totalCount", a.trade_no AS "tradeNo" FROM sys_order a WHERE a.order_no = ? ORDER BY a.update_date DESC 
2019-07-11 10:43:23.020 DEBUG 12872 [nio-8980-exec-6] [c.j.modules.app.dao.OrderDao.findList  ] - ==> Parameters: 071110432244001(String)
2019-07-11 10:43:23.048 DEBUG 12872 [nio-8980-exec-6] [c.j.modules.app.dao.OrderDao.findList  ] - <==      Total: 1
2019-07-11 10:43:23.052 DEBUG 12872 [nio-8980-exec-6] [c.j.c.m.m.provider.SelectSqlProvider   ] - 3毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", dd.id AS "userInfo.id", dd.mobile AS "userInfo.mobile", dd.password AS "userInfo.password", dd.icon AS "userInfo.icon", dd.regtime AS "userInfo.regtime", dd.lastlogin AS "userInfo.lastlogin", dd.islock AS "userInfo.islock", dd.isauthentication AS "userInfo.isauthentication", dd.type AS "userInfo.type", dd.create_by AS "userInfo.createBy", dd.create_date AS "userInfo.createDate", dd.update_by AS "userInfo.updateBy", dd.update_date AS "userInfo.updateDate", dd.remarks AS "userInfo.remarks", dd.del_flag AS "userInfo.delFlag", dd.nike_name AS "userInfo.nikeName", dd.is_invite AS "userInfo.isInvite", dd.third_id AS "userInfo.thirdId", dd.third_type AS "userInfo.thirdType", dd.third_icon AS "userInfo.thirdIcon", dd.member_lv AS "userInfo.memberLv", dd.member_flag AS "userInfo.memberFlag", dd.member_start AS "userInfo.memberStart", dd.member_end AS "userInfo.memberEnd", dd.invite_user_id AS "userInfo.inviteUserId", di.id AS "doctorInfos.id", di.doctorid AS "doctorInfos.doctorid", di.doctornum AS "doctorInfos.doctornum", di.name AS "doctorInfos.name", di.sex AS "doctorInfos.sex", di.age AS "doctorInfos.age", di.telephone AS "doctorInfos.telephone", di.idcard AS "doctorInfos.idcard", di.adress AS "doctorInfos.adress", di.technical AS "doctorInfos.technical", di.classify AS "doctorInfos.classify", di.introduce AS "doctorInfos.introduce", di.create_by AS "doctorInfos.createBy", di.cost AS "doctorInfos.cost", di.create_date AS "doctorInfos.createDate", di.update_by AS "doctorInfos.updateBy", di.update_date AS "doctorInfos.updateDate", di.remarks AS "doctorInfos.remarks", di.del_flag AS "doctorInfos.delFlag", di.cityid AS "doctorInfos.cityid", di.come_flag AS "doctorInfos.comeFlag", di.come_cost AS "doctorInfos.comeCost", di.own_flag AS "doctorInfos.ownFlag", di.first_count AS "doctorInfos.firstCount", di.star_lv AS "doctorInfos.starLv" FROM sys_tiaoli_order a LEFT JOIN sys_user_info dd ON a.userid = dd.id LEFT JOIN sys_doctor_info di ON a.docid = di.doctorid WHERE a.order_no = #{sqlMap.where#order_no#EQ1} ORDER BY a.create_date DESC
2019-07-11 10:43:23.054 DEBUG 12872 [nio-8980-exec-6] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@22e650e] will not be managed by Spring
2019-07-11 10:43:23.056 DEBUG 12872 [nio-8980-exec-6] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", dd.id AS "userInfo.id", dd.mobile AS "userInfo.mobile", dd.password AS "userInfo.password", dd.icon AS "userInfo.icon", dd.regtime AS "userInfo.regtime", dd.lastlogin AS "userInfo.lastlogin", dd.islock AS "userInfo.islock", dd.isauthentication AS "userInfo.isauthentication", dd.type AS "userInfo.type", dd.create_by AS "userInfo.createBy", dd.create_date AS "userInfo.createDate", dd.update_by AS "userInfo.updateBy", dd.update_date AS "userInfo.updateDate", dd.remarks AS "userInfo.remarks", dd.del_flag AS "userInfo.delFlag", dd.nike_name AS "userInfo.nikeName", dd.is_invite AS "userInfo.isInvite", dd.third_id AS "userInfo.thirdId", dd.third_type AS "userInfo.thirdType", dd.third_icon AS "userInfo.thirdIcon", dd.member_lv AS "userInfo.memberLv", dd.member_flag AS "userInfo.memberFlag", dd.member_start AS "userInfo.memberStart", dd.member_end AS "userInfo.memberEnd", dd.invite_user_id AS "userInfo.inviteUserId", di.id AS "doctorInfos.id", di.doctorid AS "doctorInfos.doctorid", di.doctornum AS "doctorInfos.doctornum", di.name AS "doctorInfos.name", di.sex AS "doctorInfos.sex", di.age AS "doctorInfos.age", di.telephone AS "doctorInfos.telephone", di.idcard AS "doctorInfos.idcard", di.adress AS "doctorInfos.adress", di.technical AS "doctorInfos.technical", di.classify AS "doctorInfos.classify", di.introduce AS "doctorInfos.introduce", di.create_by AS "doctorInfos.createBy", di.cost AS "doctorInfos.cost", di.create_date AS "doctorInfos.createDate", di.update_by AS "doctorInfos.updateBy", di.update_date AS "doctorInfos.updateDate", di.remarks AS "doctorInfos.remarks", di.del_flag AS "doctorInfos.delFlag", di.cityid AS "doctorInfos.cityid", di.come_flag AS "doctorInfos.comeFlag", di.come_cost AS "doctorInfos.comeCost", di.own_flag AS "doctorInfos.ownFlag", di.first_count AS "doctorInfos.firstCount", di.star_lv AS "doctorInfos.starLv" FROM sys_tiaoli_order a LEFT JOIN sys_user_info dd ON a.userid = dd.id LEFT JOIN sys_doctor_info di ON a.docid = di.doctorid WHERE a.order_no = ? ORDER BY a.create_date DESC 
2019-07-11 10:43:23.058 DEBUG 12872 [nio-8980-exec-6] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - ==> Parameters: 071110432244001(String)
2019-07-11 10:43:23.085 DEBUG 12872 [nio-8980-exec-6] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - <==      Total: 0
2019-07-11 10:43:23.098 DEBUG 12872 [nio-8980-exec-6] [c.j.c.m.m.provider.SelectSqlProvider   ] - 13毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", dd.id AS "userInfo.id", dd.mobile AS "userInfo.mobile", dd.password AS "userInfo.password", dd.icon AS "userInfo.icon", dd.regtime AS "userInfo.regtime", dd.lastlogin AS "userInfo.lastlogin", dd.islock AS "userInfo.islock", dd.isauthentication AS "userInfo.isauthentication", dd.type AS "userInfo.type", dd.create_by AS "userInfo.createBy", dd.create_date AS "userInfo.createDate", dd.update_by AS "userInfo.updateBy", dd.update_date AS "userInfo.updateDate", dd.remarks AS "userInfo.remarks", dd.del_flag AS "userInfo.delFlag", dd.nike_name AS "userInfo.nikeName", dd.is_invite AS "userInfo.isInvite", dd.third_id AS "userInfo.thirdId", dd.third_type AS "userInfo.thirdType", dd.third_icon AS "userInfo.thirdIcon", dd.member_lv AS "userInfo.memberLv", dd.member_flag AS "userInfo.memberFlag", dd.member_start AS "userInfo.memberStart", dd.member_end AS "userInfo.memberEnd", dd.invite_user_id AS "userInfo.inviteUserId", di.id AS "doctorInfos.id", di.doctorid AS "doctorInfos.doctorid", di.doctornum AS "doctorInfos.doctornum", di.name AS "doctorInfos.name", di.sex AS "doctorInfos.sex", di.age AS "doctorInfos.age", di.telephone AS "doctorInfos.telephone", di.idcard AS "doctorInfos.idcard", di.adress AS "doctorInfos.adress", di.technical AS "doctorInfos.technical", di.classify AS "doctorInfos.classify", di.introduce AS "doctorInfos.introduce", di.create_by AS "doctorInfos.createBy", di.cost AS "doctorInfos.cost", di.create_date AS "doctorInfos.createDate", di.update_by AS "doctorInfos.updateBy", di.update_date AS "doctorInfos.updateDate", di.remarks AS "doctorInfos.remarks", di.del_flag AS "doctorInfos.delFlag", di.cityid AS "doctorInfos.cityid", di.come_flag AS "doctorInfos.comeFlag", di.come_cost AS "doctorInfos.comeCost", di.own_flag AS "doctorInfos.ownFlag", di.first_count AS "doctorInfos.firstCount", di.star_lv AS "doctorInfos.starLv" FROM sys_tiaoli_order a LEFT JOIN sys_user_info dd ON a.userid = dd.id LEFT JOIN sys_doctor_info di ON a.docid = di.doctorid WHERE a.order_no = #{sqlMap.where#order_no#EQ1} ORDER BY a.create_date DESC
2019-07-11 10:43:23.098 DEBUG 12872 [nio-8980-exec-6] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@22e650e] will not be managed by Spring
2019-07-11 10:43:23.099 DEBUG 12872 [nio-8980-exec-6] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", dd.id AS "userInfo.id", dd.mobile AS "userInfo.mobile", dd.password AS "userInfo.password", dd.icon AS "userInfo.icon", dd.regtime AS "userInfo.regtime", dd.lastlogin AS "userInfo.lastlogin", dd.islock AS "userInfo.islock", dd.isauthentication AS "userInfo.isauthentication", dd.type AS "userInfo.type", dd.create_by AS "userInfo.createBy", dd.create_date AS "userInfo.createDate", dd.update_by AS "userInfo.updateBy", dd.update_date AS "userInfo.updateDate", dd.remarks AS "userInfo.remarks", dd.del_flag AS "userInfo.delFlag", dd.nike_name AS "userInfo.nikeName", dd.is_invite AS "userInfo.isInvite", dd.third_id AS "userInfo.thirdId", dd.third_type AS "userInfo.thirdType", dd.third_icon AS "userInfo.thirdIcon", dd.member_lv AS "userInfo.memberLv", dd.member_flag AS "userInfo.memberFlag", dd.member_start AS "userInfo.memberStart", dd.member_end AS "userInfo.memberEnd", dd.invite_user_id AS "userInfo.inviteUserId", di.id AS "doctorInfos.id", di.doctorid AS "doctorInfos.doctorid", di.doctornum AS "doctorInfos.doctornum", di.name AS "doctorInfos.name", di.sex AS "doctorInfos.sex", di.age AS "doctorInfos.age", di.telephone AS "doctorInfos.telephone", di.idcard AS "doctorInfos.idcard", di.adress AS "doctorInfos.adress", di.technical AS "doctorInfos.technical", di.classify AS "doctorInfos.classify", di.introduce AS "doctorInfos.introduce", di.create_by AS "doctorInfos.createBy", di.cost AS "doctorInfos.cost", di.create_date AS "doctorInfos.createDate", di.update_by AS "doctorInfos.updateBy", di.update_date AS "doctorInfos.updateDate", di.remarks AS "doctorInfos.remarks", di.del_flag AS "doctorInfos.delFlag", di.cityid AS "doctorInfos.cityid", di.come_flag AS "doctorInfos.comeFlag", di.come_cost AS "doctorInfos.comeCost", di.own_flag AS "doctorInfos.ownFlag", di.first_count AS "doctorInfos.firstCount", di.star_lv AS "doctorInfos.starLv" FROM sys_tiaoli_order a LEFT JOIN sys_user_info dd ON a.userid = dd.id LEFT JOIN sys_doctor_info di ON a.docid = di.doctorid WHERE a.order_no = ? ORDER BY a.create_date DESC 
2019-07-11 10:43:23.117 DEBUG 12872 [nio-8980-exec-6] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - ==> Parameters: 071110432244001(String)
2019-07-11 10:43:23.143 DEBUG 12872 [nio-8980-exec-6] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - <==      Total: 0
2019-07-11 10:43:23.188 DEBUG 12872 [nio-8980-exec-6] [c.j.c.m.m.provider.SelectSqlProvider   ] - 1毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.total_price AS "totalPrice", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag" FROM sys_member_order a WHERE a.order_no = #{sqlMap.where#order_no#EQ1} ORDER BY a.update_date DESC
2019-07-11 10:43:23.189 DEBUG 12872 [nio-8980-exec-6] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@22e650e] will not be managed by Spring
2019-07-11 10:43:23.197 DEBUG 12872 [nio-8980-exec-6] [c.j.m.app.dao.MemberOrderDao.findList  ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.total_price AS "totalPrice", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag" FROM sys_member_order a WHERE a.order_no = ? ORDER BY a.update_date DESC 
2019-07-11 10:43:23.198 DEBUG 12872 [nio-8980-exec-6] [c.j.m.app.dao.MemberOrderDao.findList  ] - ==> Parameters: 071110432244001(String)
2019-07-11 10:43:23.222 DEBUG 12872 [nio-8980-exec-6] [c.j.m.app.dao.MemberOrderDao.findList  ] - <==      Total: 0
2019-07-11 10:43:23.226 DEBUG 12872 [nio-8980-exec-6] [c.j.c.m.m.provider.SelectSqlProvider   ] - 4毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.total_price AS "totalPrice", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", a.doctor_user_id AS "doctorUserId" FROM sys_doctor_register_order a WHERE a.order_no = #{sqlMap.where#order_no#EQ1} ORDER BY a.update_date DESC
2019-07-11 10:43:23.226 DEBUG 12872 [nio-8980-exec-6] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@22e650e] will not be managed by Spring
2019-07-11 10:43:23.227 DEBUG 12872 [nio-8980-exec-6] [c.j.m.a.d.D.findList                   ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.total_price AS "totalPrice", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", a.doctor_user_id AS "doctorUserId" FROM sys_doctor_register_order a WHERE a.order_no = ? ORDER BY a.update_date DESC 
2019-07-11 10:43:23.234 DEBUG 12872 [nio-8980-exec-6] [c.j.m.a.d.D.findList                   ] - ==> Parameters: 071110432244001(String)
2019-07-11 10:43:23.258 DEBUG 12872 [nio-8980-exec-6] [c.j.m.a.d.D.findList                   ] - <==      Total: 0
2019-07-11 10:43:23.258 DEBUG 12872 [nio-8980-exec-6] [c.j.c.m.m.provider.SelectSqlProvider   ] - 0毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag" FROM sys_dashang_order a WHERE a.order_no = #{sqlMap.where#order_no#EQ1} ORDER BY a.update_date DESC
2019-07-11 10:43:23.259 DEBUG 12872 [nio-8980-exec-6] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@22e650e] will not be managed by Spring
2019-07-11 10:43:23.263 DEBUG 12872 [nio-8980-exec-6] [c.j.m.app.dao.DashangOrderDao.findList ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag" FROM sys_dashang_order a WHERE a.order_no = ? ORDER BY a.update_date DESC 
2019-07-11 10:43:23.264 DEBUG 12872 [nio-8980-exec-6] [c.j.m.app.dao.DashangOrderDao.findList ] - ==> Parameters: 071110432244001(String)
2019-07-11 10:43:23.288 DEBUG 12872 [nio-8980-exec-6] [c.j.m.app.dao.DashangOrderDao.findList ] - <==      Total: 0
2019-07-11 10:43:23.382 DEBUG 12872 [nio-8980-exec-6] [c.j.c.m.m.provider.UpdateSqlProvider   ] - 32毫秒: UPDATE sys_order SET `order_no` = #{orderNo}, `order_status` = #{orderStatus}, `product_count` = #{productCount}, `total_price` = #{totalPrice}, `logistics_price` = #{logisticsPrice}, `discount_price` = #{discountPrice}, `really_price` = #{reallyPrice}, `pay_channel` = #{payChannel}, `out_trade_no` = #{outTradeNo}, `update_by` = #{updateBy}, `user_id` = #{userId}, `del_flag` = #{delFlag}, `delivery_name` = #{deliveryName}, `delivery_address` = #{deliveryAddress}, `delivery_phone` = #{deliveryPhone}, `total_count` = #{totalCount} WHERE `id` = #{id}
2019-07-11 10:43:23.392 DEBUG 12872 [nio-8980-exec-6] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@22e650e] will be managed by Spring
2019-07-11 10:43:23.393 DEBUG 12872 [nio-8980-exec-6] [c.j.modules.app.dao.OrderDao.update    ] - ==>  Preparing: UPDATE sys_order SET `order_no` = ?, `order_status` = ?, `product_count` = ?, `total_price` = ?, `logistics_price` = ?, `discount_price` = ?, `really_price` = ?, `pay_channel` = ?, `out_trade_no` = ?, `update_by` = ?, `user_id` = ?, `del_flag` = ?, `delivery_name` = ?, `delivery_address` = ?, `delivery_phone` = ?, `total_count` = ? WHERE `id` = ? 
2019-07-11 10:43:23.393 DEBUG 12872 [nio-8980-exec-6] [c.j.modules.app.dao.OrderDao.update    ] - ==> Parameters: 071110432244001(String), 0(String), 1(String), 500(String), 0(String), 500(String), 0(String), null(String), 2019071110432200001(String), system(String), fb4efe6aa22311e9b780fa163e609e56(String), 0(String), 哈哈啊(String), 北京市东坝路哈哈哈(String), 13313368366(String), 1(String), 338(String)
2019-07-11 10:43:23.441 DEBUG 12872 [nio-8980-exec-6] [c.j.modules.app.dao.OrderDao.update    ] - <==    Updates: 1
2019-07-11 10:43:29.721 DEBUG 12872 [nio-8980-exec-7] [c.j.c.m.m.provider.SelectSqlProvider   ] - 2毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.product_count AS "productCount", a.total_price AS "totalPrice", a.logistics_price AS "logisticsPrice", a.discount_price AS "discountPrice", a.really_price AS "reallyPrice", a.pay_channel AS "payChannel", a.out_trade_no AS "outTradeNo", a.create_date AS "createDate", a.update_date AS "updateDate", a.create_by AS "createBy", a.update_by AS "updateBy", a.pay_date AS "payDate", a.user_id AS "userId", a.address_id AS "addressId", a.logistics_id AS "logisticsId", a.delivery_date AS "deliveryDate", a.del_flag AS "delFlag", a.delivery_name AS "deliveryName", a.delivery_address AS "deliveryAddress", a.delivery_phone AS "deliveryPhone", a.total_count AS "totalCount", a.trade_no AS "tradeNo" FROM sys_order a WHERE a.out_trade_no = #{sqlMap.where#out_trade_no#EQ1} ORDER BY a.update_date DESC
2019-07-11 10:43:29.721 DEBUG 12872 [nio-8980-exec-7] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@22e650e] will not be managed by Spring
2019-07-11 10:43:29.722 DEBUG 12872 [nio-8980-exec-7] [c.j.modules.app.dao.OrderDao.findList  ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.product_count AS "productCount", a.total_price AS "totalPrice", a.logistics_price AS "logisticsPrice", a.discount_price AS "discountPrice", a.really_price AS "reallyPrice", a.pay_channel AS "payChannel", a.out_trade_no AS "outTradeNo", a.create_date AS "createDate", a.update_date AS "updateDate", a.create_by AS "createBy", a.update_by AS "updateBy", a.pay_date AS "payDate", a.user_id AS "userId", a.address_id AS "addressId", a.logistics_id AS "logisticsId", a.delivery_date AS "deliveryDate", a.del_flag AS "delFlag", a.delivery_name AS "deliveryName", a.delivery_address AS "deliveryAddress", a.delivery_phone AS "deliveryPhone", a.total_count AS "totalCount", a.trade_no AS "tradeNo" FROM sys_order a WHERE a.out_trade_no = ? ORDER BY a.update_date DESC 
2019-07-11 10:43:29.722 DEBUG 12872 [nio-8980-exec-7] [c.j.modules.app.dao.OrderDao.findList  ] - ==> Parameters: 2019071110432200001(String)
2019-07-11 10:43:29.748 DEBUG 12872 [nio-8980-exec-7] [c.j.modules.app.dao.OrderDao.findList  ] - <==      Total: 1
2019-07-11 10:43:29.749 DEBUG 12872 [nio-8980-exec-7] [c.j.c.m.m.provider.SelectSqlProvider   ] - 1毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", dd.id AS "userInfo.id", dd.mobile AS "userInfo.mobile", dd.password AS "userInfo.password", dd.icon AS "userInfo.icon", dd.regtime AS "userInfo.regtime", dd.lastlogin AS "userInfo.lastlogin", dd.islock AS "userInfo.islock", dd.isauthentication AS "userInfo.isauthentication", dd.type AS "userInfo.type", dd.create_by AS "userInfo.createBy", dd.create_date AS "userInfo.createDate", dd.update_by AS "userInfo.updateBy", dd.update_date AS "userInfo.updateDate", dd.remarks AS "userInfo.remarks", dd.del_flag AS "userInfo.delFlag", dd.nike_name AS "userInfo.nikeName", dd.is_invite AS "userInfo.isInvite", dd.third_id AS "userInfo.thirdId", dd.third_type AS "userInfo.thirdType", dd.third_icon AS "userInfo.thirdIcon", dd.member_lv AS "userInfo.memberLv", dd.member_flag AS "userInfo.memberFlag", dd.member_start AS "userInfo.memberStart", dd.member_end AS "userInfo.memberEnd", dd.invite_user_id AS "userInfo.inviteUserId", di.id AS "doctorInfos.id", di.doctorid AS "doctorInfos.doctorid", di.doctornum AS "doctorInfos.doctornum", di.name AS "doctorInfos.name", di.sex AS "doctorInfos.sex", di.age AS "doctorInfos.age", di.telephone AS "doctorInfos.telephone", di.idcard AS "doctorInfos.idcard", di.adress AS "doctorInfos.adress", di.technical AS "doctorInfos.technical", di.classify AS "doctorInfos.classify", di.introduce AS "doctorInfos.introduce", di.create_by AS "doctorInfos.createBy", di.cost AS "doctorInfos.cost", di.create_date AS "doctorInfos.createDate", di.update_by AS "doctorInfos.updateBy", di.update_date AS "doctorInfos.updateDate", di.remarks AS "doctorInfos.remarks", di.del_flag AS "doctorInfos.delFlag", di.cityid AS "doctorInfos.cityid", di.come_flag AS "doctorInfos.comeFlag", di.come_cost AS "doctorInfos.comeCost", di.own_flag AS "doctorInfos.ownFlag", di.first_count AS "doctorInfos.firstCount", di.star_lv AS "doctorInfos.starLv" FROM sys_tiaoli_order a LEFT JOIN sys_user_info dd ON a.userid = dd.id LEFT JOIN sys_doctor_info di ON a.docid = di.doctorid WHERE a.out_trade_no = #{sqlMap.where#out_trade_no#EQ1} ORDER BY a.create_date DESC
2019-07-11 10:43:29.749 DEBUG 12872 [nio-8980-exec-7] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@22e650e] will not be managed by Spring
2019-07-11 10:43:29.750 DEBUG 12872 [nio-8980-exec-7] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", dd.id AS "userInfo.id", dd.mobile AS "userInfo.mobile", dd.password AS "userInfo.password", dd.icon AS "userInfo.icon", dd.regtime AS "userInfo.regtime", dd.lastlogin AS "userInfo.lastlogin", dd.islock AS "userInfo.islock", dd.isauthentication AS "userInfo.isauthentication", dd.type AS "userInfo.type", dd.create_by AS "userInfo.createBy", dd.create_date AS "userInfo.createDate", dd.update_by AS "userInfo.updateBy", dd.update_date AS "userInfo.updateDate", dd.remarks AS "userInfo.remarks", dd.del_flag AS "userInfo.delFlag", dd.nike_name AS "userInfo.nikeName", dd.is_invite AS "userInfo.isInvite", dd.third_id AS "userInfo.thirdId", dd.third_type AS "userInfo.thirdType", dd.third_icon AS "userInfo.thirdIcon", dd.member_lv AS "userInfo.memberLv", dd.member_flag AS "userInfo.memberFlag", dd.member_start AS "userInfo.memberStart", dd.member_end AS "userInfo.memberEnd", dd.invite_user_id AS "userInfo.inviteUserId", di.id AS "doctorInfos.id", di.doctorid AS "doctorInfos.doctorid", di.doctornum AS "doctorInfos.doctornum", di.name AS "doctorInfos.name", di.sex AS "doctorInfos.sex", di.age AS "doctorInfos.age", di.telephone AS "doctorInfos.telephone", di.idcard AS "doctorInfos.idcard", di.adress AS "doctorInfos.adress", di.technical AS "doctorInfos.technical", di.classify AS "doctorInfos.classify", di.introduce AS "doctorInfos.introduce", di.create_by AS "doctorInfos.createBy", di.cost AS "doctorInfos.cost", di.create_date AS "doctorInfos.createDate", di.update_by AS "doctorInfos.updateBy", di.update_date AS "doctorInfos.updateDate", di.remarks AS "doctorInfos.remarks", di.del_flag AS "doctorInfos.delFlag", di.cityid AS "doctorInfos.cityid", di.come_flag AS "doctorInfos.comeFlag", di.come_cost AS "doctorInfos.comeCost", di.own_flag AS "doctorInfos.ownFlag", di.first_count AS "doctorInfos.firstCount", di.star_lv AS "doctorInfos.starLv" FROM sys_tiaoli_order a LEFT JOIN sys_user_info dd ON a.userid = dd.id LEFT JOIN sys_doctor_info di ON a.docid = di.doctorid WHERE a.out_trade_no = ? ORDER BY a.create_date DESC 
2019-07-11 10:43:29.751 DEBUG 12872 [nio-8980-exec-7] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - ==> Parameters: 2019071110432200001(String)
2019-07-11 10:43:29.777 DEBUG 12872 [nio-8980-exec-7] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - <==      Total: 0
2019-07-11 10:43:29.793 DEBUG 12872 [nio-8980-exec-7] [c.j.c.m.m.provider.SelectSqlProvider   ] - 15毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", dd.id AS "userInfo.id", dd.mobile AS "userInfo.mobile", dd.password AS "userInfo.password", dd.icon AS "userInfo.icon", dd.regtime AS "userInfo.regtime", dd.lastlogin AS "userInfo.lastlogin", dd.islock AS "userInfo.islock", dd.isauthentication AS "userInfo.isauthentication", dd.type AS "userInfo.type", dd.create_by AS "userInfo.createBy", dd.create_date AS "userInfo.createDate", dd.update_by AS "userInfo.updateBy", dd.update_date AS "userInfo.updateDate", dd.remarks AS "userInfo.remarks", dd.del_flag AS "userInfo.delFlag", dd.nike_name AS "userInfo.nikeName", dd.is_invite AS "userInfo.isInvite", dd.third_id AS "userInfo.thirdId", dd.third_type AS "userInfo.thirdType", dd.third_icon AS "userInfo.thirdIcon", dd.member_lv AS "userInfo.memberLv", dd.member_flag AS "userInfo.memberFlag", dd.member_start AS "userInfo.memberStart", dd.member_end AS "userInfo.memberEnd", dd.invite_user_id AS "userInfo.inviteUserId", di.id AS "doctorInfos.id", di.doctorid AS "doctorInfos.doctorid", di.doctornum AS "doctorInfos.doctornum", di.name AS "doctorInfos.name", di.sex AS "doctorInfos.sex", di.age AS "doctorInfos.age", di.telephone AS "doctorInfos.telephone", di.idcard AS "doctorInfos.idcard", di.adress AS "doctorInfos.adress", di.technical AS "doctorInfos.technical", di.classify AS "doctorInfos.classify", di.introduce AS "doctorInfos.introduce", di.create_by AS "doctorInfos.createBy", di.cost AS "doctorInfos.cost", di.create_date AS "doctorInfos.createDate", di.update_by AS "doctorInfos.updateBy", di.update_date AS "doctorInfos.updateDate", di.remarks AS "doctorInfos.remarks", di.del_flag AS "doctorInfos.delFlag", di.cityid AS "doctorInfos.cityid", di.come_flag AS "doctorInfos.comeFlag", di.come_cost AS "doctorInfos.comeCost", di.own_flag AS "doctorInfos.ownFlag", di.first_count AS "doctorInfos.firstCount", di.star_lv AS "doctorInfos.starLv" FROM sys_tiaoli_order a LEFT JOIN sys_user_info dd ON a.userid = dd.id LEFT JOIN sys_doctor_info di ON a.docid = di.doctorid WHERE a.out_trade_no = #{sqlMap.where#out_trade_no#EQ1} ORDER BY a.create_date DESC
2019-07-11 10:43:29.824 DEBUG 12872 [nio-8980-exec-7] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@22e650e] will not be managed by Spring
2019-07-11 10:43:29.825 DEBUG 12872 [nio-8980-exec-7] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", dd.id AS "userInfo.id", dd.mobile AS "userInfo.mobile", dd.password AS "userInfo.password", dd.icon AS "userInfo.icon", dd.regtime AS "userInfo.regtime", dd.lastlogin AS "userInfo.lastlogin", dd.islock AS "userInfo.islock", dd.isauthentication AS "userInfo.isauthentication", dd.type AS "userInfo.type", dd.create_by AS "userInfo.createBy", dd.create_date AS "userInfo.createDate", dd.update_by AS "userInfo.updateBy", dd.update_date AS "userInfo.updateDate", dd.remarks AS "userInfo.remarks", dd.del_flag AS "userInfo.delFlag", dd.nike_name AS "userInfo.nikeName", dd.is_invite AS "userInfo.isInvite", dd.third_id AS "userInfo.thirdId", dd.third_type AS "userInfo.thirdType", dd.third_icon AS "userInfo.thirdIcon", dd.member_lv AS "userInfo.memberLv", dd.member_flag AS "userInfo.memberFlag", dd.member_start AS "userInfo.memberStart", dd.member_end AS "userInfo.memberEnd", dd.invite_user_id AS "userInfo.inviteUserId", di.id AS "doctorInfos.id", di.doctorid AS "doctorInfos.doctorid", di.doctornum AS "doctorInfos.doctornum", di.name AS "doctorInfos.name", di.sex AS "doctorInfos.sex", di.age AS "doctorInfos.age", di.telephone AS "doctorInfos.telephone", di.idcard AS "doctorInfos.idcard", di.adress AS "doctorInfos.adress", di.technical AS "doctorInfos.technical", di.classify AS "doctorInfos.classify", di.introduce AS "doctorInfos.introduce", di.create_by AS "doctorInfos.createBy", di.cost AS "doctorInfos.cost", di.create_date AS "doctorInfos.createDate", di.update_by AS "doctorInfos.updateBy", di.update_date AS "doctorInfos.updateDate", di.remarks AS "doctorInfos.remarks", di.del_flag AS "doctorInfos.delFlag", di.cityid AS "doctorInfos.cityid", di.come_flag AS "doctorInfos.comeFlag", di.come_cost AS "doctorInfos.comeCost", di.own_flag AS "doctorInfos.ownFlag", di.first_count AS "doctorInfos.firstCount", di.star_lv AS "doctorInfos.starLv" FROM sys_tiaoli_order a LEFT JOIN sys_user_info dd ON a.userid = dd.id LEFT JOIN sys_doctor_info di ON a.docid = di.doctorid WHERE a.out_trade_no = ? ORDER BY a.create_date DESC 
2019-07-11 10:43:29.827 DEBUG 12872 [nio-8980-exec-7] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - ==> Parameters: 2019071110432200001(String)
2019-07-11 10:43:29.854 DEBUG 12872 [nio-8980-exec-7] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - <==      Total: 0
2019-07-11 10:43:29.860 DEBUG 12872 [nio-8980-exec-7] [c.j.c.m.m.provider.SelectSqlProvider   ] - 6毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.total_price AS "totalPrice", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag" FROM sys_member_order a WHERE a.out_trade_no = #{sqlMap.where#out_trade_no#EQ1} ORDER BY a.update_date DESC
2019-07-11 10:43:29.875 DEBUG 12872 [nio-8980-exec-7] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@22e650e] will not be managed by Spring
2019-07-11 10:43:29.876 DEBUG 12872 [nio-8980-exec-7] [c.j.m.app.dao.MemberOrderDao.findList  ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.total_price AS "totalPrice", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag" FROM sys_member_order a WHERE a.out_trade_no = ? ORDER BY a.update_date DESC 
2019-07-11 10:43:29.877 DEBUG 12872 [nio-8980-exec-7] [c.j.m.app.dao.MemberOrderDao.findList  ] - ==> Parameters: 2019071110432200001(String)
2019-07-11 10:43:29.901 DEBUG 12872 [nio-8980-exec-7] [c.j.m.app.dao.MemberOrderDao.findList  ] - <==      Total: 0
2019-07-11 10:43:29.902 DEBUG 12872 [nio-8980-exec-7] [c.j.c.m.m.provider.SelectSqlProvider   ] - 1毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.total_price AS "totalPrice", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", a.doctor_user_id AS "doctorUserId" FROM sys_doctor_register_order a WHERE a.out_trade_no = #{sqlMap.where#out_trade_no#EQ1} ORDER BY a.update_date DESC
2019-07-11 10:43:29.902 DEBUG 12872 [nio-8980-exec-7] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@22e650e] will not be managed by Spring
2019-07-11 10:43:29.924 DEBUG 12872 [nio-8980-exec-7] [c.j.m.a.d.D.findList                   ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.total_price AS "totalPrice", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", a.doctor_user_id AS "doctorUserId" FROM sys_doctor_register_order a WHERE a.out_trade_no = ? ORDER BY a.update_date DESC 
2019-07-11 10:43:29.925 DEBUG 12872 [nio-8980-exec-7] [c.j.m.a.d.D.findList                   ] - ==> Parameters: 2019071110432200001(String)
2019-07-11 10:43:29.949 DEBUG 12872 [nio-8980-exec-7] [c.j.m.a.d.D.findList                   ] - <==      Total: 0
2019-07-11 10:43:29.949 DEBUG 12872 [nio-8980-exec-7] [c.j.c.m.m.provider.SelectSqlProvider   ] - 0毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag" FROM sys_dashang_order a WHERE a.out_trade_no = #{sqlMap.where#out_trade_no#EQ1} ORDER BY a.update_date DESC
2019-07-11 10:43:29.950 DEBUG 12872 [nio-8980-exec-7] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@22e650e] will not be managed by Spring
2019-07-11 10:43:29.951 DEBUG 12872 [nio-8980-exec-7] [c.j.m.app.dao.DashangOrderDao.findList ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag" FROM sys_dashang_order a WHERE a.out_trade_no = ? ORDER BY a.update_date DESC 
2019-07-11 10:43:29.951 DEBUG 12872 [nio-8980-exec-7] [c.j.m.app.dao.DashangOrderDao.findList ] - ==> Parameters: 2019071110432200001(String)
2019-07-11 10:43:29.976 DEBUG 12872 [nio-8980-exec-7] [c.j.m.app.dao.DashangOrderDao.findList ] - <==      Total: 0
2019-07-11 10:43:30.103 DEBUG 12872 [nio-8980-exec-7] [c.j.c.m.m.provider.UpdateSqlProvider   ] - 103毫秒: UPDATE sys_order SET `order_no` = #{orderNo}, `order_status` = #{orderStatus}, `product_count` = #{productCount}, `total_price` = #{totalPrice}, `logistics_price` = #{logisticsPrice}, `discount_price` = #{discountPrice}, `really_price` = #{reallyPrice}, `pay_channel` = #{payChannel}, `out_trade_no` = #{outTradeNo}, `update_by` = #{updateBy}, `pay_date` = #{payDate}, `user_id` = #{userId}, `del_flag` = #{delFlag}, `delivery_name` = #{deliveryName}, `delivery_address` = #{deliveryAddress}, `delivery_phone` = #{deliveryPhone}, `total_count` = #{totalCount} WHERE `id` = #{id}
2019-07-11 10:43:30.104 DEBUG 12872 [nio-8980-exec-7] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@22e650e] will be managed by Spring
2019-07-11 10:43:30.120 DEBUG 12872 [nio-8980-exec-7] [c.j.modules.app.dao.OrderDao.update    ] - ==>  Preparing: UPDATE sys_order SET `order_no` = ?, `order_status` = ?, `product_count` = ?, `total_price` = ?, `logistics_price` = ?, `discount_price` = ?, `really_price` = ?, `pay_channel` = ?, `out_trade_no` = ?, `update_by` = ?, `pay_date` = ?, `user_id` = ?, `del_flag` = ?, `delivery_name` = ?, `delivery_address` = ?, `delivery_phone` = ?, `total_count` = ? WHERE `id` = ? 
2019-07-11 10:43:30.140 DEBUG 12872 [nio-8980-exec-7] [c.j.modules.app.dao.OrderDao.update    ] - ==> Parameters: 071110432244001(String), 1(String), 1(String), 500(String), 0(String), 500(String), 0(String), 微信(String), 2019071110432200001(String), system(String), 2019-07-11 10:43:29.976(Timestamp), fb4efe6aa22311e9b780fa163e609e56(String), 0(String), 哈哈啊(String), 北京市东坝路哈哈哈(String), 13313368366(String), 1(String), 338(String)
2019-07-11 10:43:30.189 DEBUG 12872 [nio-8980-exec-7] [c.j.modules.app.dao.OrderDao.update    ] - <==    Updates: 1
2019-07-11 10:43:30.706 DEBUG 12872 [nio-8980-exec-7] [c.j.c.m.m.provider.SelectSqlProvider   ] - 21毫秒: SELECT a.id AS "id", a.user_id AS "userId", a.discount_price AS "discountPrice", a.create_date AS "createDate", a.update_date AS "updateDate", a.create_by AS "createBy", a.update_by AS "updateBy", a.remarks AS "remarks", dd.id AS "discountDetail.id", dd.discount_id AS "discountDetail.discountId", dd.remarks AS "discountDetail.remarks", dd.detail_price AS "discountDetail.detailPrice", dd.detail_state AS "discountDetail.detailState", dd.create_date AS "discountDetail.createDate", dd.update_date AS "discountDetail.updateDate", dd.create_by AS "discountDetail.createBy", dd.update_by AS "discountDetail.updateBy", dd.del_flag AS "discountDetail.delFlag" FROM sys_discount a LEFT JOIN sys_discount_detail dd ON a.id = dd.discount_id WHERE a.user_id = #{sqlMap.where#user_id#EQ1} ORDER BY a.update_date DESC
2019-07-11 10:43:30.708 DEBUG 12872 [nio-8980-exec-7] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@22e650e] will be managed by Spring
2019-07-11 10:43:30.729 DEBUG 12872 [nio-8980-exec-7] [c.j.m.app.dao.DiscountDao.findList     ] - ==>  Preparing: SELECT a.id AS "id", a.user_id AS "userId", a.discount_price AS "discountPrice", a.create_date AS "createDate", a.update_date AS "updateDate", a.create_by AS "createBy", a.update_by AS "updateBy", a.remarks AS "remarks", dd.id AS "discountDetail.id", dd.discount_id AS "discountDetail.discountId", dd.remarks AS "discountDetail.remarks", dd.detail_price AS "discountDetail.detailPrice", dd.detail_state AS "discountDetail.detailState", dd.create_date AS "discountDetail.createDate", dd.update_date AS "discountDetail.updateDate", dd.create_by AS "discountDetail.createBy", dd.update_by AS "discountDetail.updateBy", dd.del_flag AS "discountDetail.delFlag" FROM sys_discount a LEFT JOIN sys_discount_detail dd ON a.id = dd.discount_id WHERE a.user_id = ? ORDER BY a.update_date DESC 
2019-07-11 10:43:30.729 DEBUG 12872 [nio-8980-exec-7] [c.j.m.app.dao.DiscountDao.findList     ] - ==> Parameters: fb4efe6aa22311e9b780fa163e609e56(String)
2019-07-11 10:43:30.781 DEBUG 12872 [nio-8980-exec-7] [c.j.m.app.dao.DiscountDao.findList     ] - <==      Total: 1
2019-07-11 10:43:30.782 DEBUG 12872 [nio-8980-exec-7] [c.j.c.m.m.provider.UpdateSqlProvider   ] - 0毫秒: UPDATE sys_discount SET `user_id` = #{userId}, `discount_price` = #{discountPrice}, `update_date` = #{updateDate}, `update_by` = #{updateBy}, `remarks` = #{remarks} WHERE `id` = #{id}
2019-07-11 10:43:30.783 DEBUG 12872 [nio-8980-exec-7] [c.j.modules.app.dao.DiscountDao.update ] - ==>  Preparing: UPDATE sys_discount SET `user_id` = ?, `discount_price` = ?, `update_date` = ?, `update_by` = ?, `remarks` = ? WHERE `id` = ? 
2019-07-11 10:43:30.784 DEBUG 12872 [nio-8980-exec-7] [c.j.modules.app.dao.DiscountDao.update ] - ==> Parameters: fb4efe6aa22311e9b780fa163e609e56(String), 0(String), 2019-07-11 10:43:30.782(Timestamp), system(String), 备注(String), 1143757893387239428(String)
2019-07-11 10:43:30.831 DEBUG 12872 [nio-8980-exec-7] [c.j.modules.app.dao.DiscountDao.update ] - <==    Updates: 1
