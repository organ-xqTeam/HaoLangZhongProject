2019-07-09 09:21:23.633 INFO  4592 [           main] [com.jeesite.modules.Application        ] - Starting Application on DESKTOP-FVHI4E5 with PID 4592 (E:\gitlabHome\HaoLangZhongProject\HaoLangZhong\src\main\webapp\WEB-INF\classes started by 1111111 in E:\gitlabHome\HaoLangZhongProject\HaoLangZhong)
2019-07-09 09:21:23.639 DEBUG 4592 [           main] [com.jeesite.modules.Application        ] - Running with Spring Boot v2.0.6.RELEASE, Spring v5.0.10.RELEASE
2019-07-09 09:21:23.639 INFO  4592 [           main] [com.jeesite.modules.Application        ] - The following profiles are active: default
2019-07-09 09:21:25.793 INFO  4592 [           main] [com.jeesite.common.config.Global       ] - Config files: [classpath:config/jeesite-core.yml, classpath:config/application.yml]
2019-07-09 09:21:25.794 INFO  4592 [           main] [com.jeesite.common.config.Global       ] - Spring cache cluster mode: false, session manager name: J1CacheSession
2019-07-09 09:21:26.402 INFO  4592 [           main] [com.jeesite.common.config.Global       ] - user.home: C:/Users/15040
2019-07-09 09:21:26.403 INFO  4592 [           main] [com.jeesite.common.config.Global       ] - user.dir: E:/gitlabHome/HaoLangZhongProject/HaoLangZhong
2019-07-09 09:21:26.403 INFO  4592 [           main] [com.jeesite.common.config.Global       ] - logPath: E:/gitlabHome/HaoLangZhongProject/HaoLangZhong/src/main/webapp/WEB-INF/classes

   _____        ___  _   _           ___
  |_   _|      / __'(_)_| |_        /   |
  _ | | __  __ \___ | |_   _| __   / /| |
 ( .| |/__\/__\ ___)| | | |_ /__\ / /_| |_
  \___|\__.\__.|____|_| \___)\__.(____   _|  :: JeeSite V4.1.3 :: 
======================================|_|==========================

    欢迎使用 JeeSite Demo V4.1

    您当前的版本为社区版，官方网站：http://jeesite.com

    机器码是：6c59ab5175477606a72e1628bfd13f1a
    产品名称：JeeSite Demo
    公司名称：ThinkGem

===================================================================

2019-07-09 09:21:27.602 INFO  4592 [           main] [o.s.b.w.embedded.tomcat.TomcatWebServer] - Tomcat initialized with port(s): 8980 (http)
2019-07-09 09:21:28.181 DEBUG 4592 [           main] [com.jeesite.common.config.Global       ] - Update E:\gitlabHome\HaoLangZhongProject\HaoLangZhong\src\main\webapp\WEB-INF\classes\config\application.yml jdbc.password encryption success.
2019-07-09 09:21:28.616 DEBUG 4592 [           main] [c.j.common.datasource.RoutingDataSource] - Set default target data source success.
2019-07-09 09:21:34.719 DEBUG 4592 [           main] [com.jeesite.common.beetl.BeetlUtils    ] - Beetl config files: [classpath:/config/beetl-core.properties, classpath:/config/beetl.properties]
2019-07-09 09:21:34.987 DEBUG 4592 [           main] [c.j.c.m.m.provider.SelectSqlProvider   ] - 2毫秒: SELECT a.status AS "status", a.create_by AS "createBy", a.create_date AS "createDate", a.update_by AS "updateBy", a.update_date AS "updateDate", a.remarks AS "remarks", a.module_code AS "moduleCode", a.module_name AS "moduleName", a.description AS "description", a.main_class_name AS "mainClassName", a.current_version AS "currentVersion", a.upgrade_info AS "upgradeInfo" FROM js_sys_module a WHERE a.status = #{sqlMap.where#status#EQ1} ORDER BY a.update_date DESC
2019-07-09 09:21:35.008 DEBUG 4592 [           main] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@6e5df971] will not be managed by Spring
2019-07-09 09:21:35.050 DEBUG 4592 [           main] [c.j.modules.sys.dao.ModuleDao.findList ] - ==>  Preparing: SELECT a.status AS "status", a.create_by AS "createBy", a.create_date AS "createDate", a.update_by AS "updateBy", a.update_date AS "updateDate", a.remarks AS "remarks", a.module_code AS "moduleCode", a.module_name AS "moduleName", a.description AS "description", a.main_class_name AS "mainClassName", a.current_version AS "currentVersion", a.upgrade_info AS "upgradeInfo" FROM js_sys_module a WHERE a.status = ? ORDER BY a.update_date DESC 
2019-07-09 09:21:35.077 DEBUG 4592 [           main] [c.j.modules.sys.dao.ModuleDao.findList ] - ==> Parameters: 0(String)
2019-07-09 09:21:35.122 DEBUG 4592 [           main] [c.j.modules.sys.dao.ModuleDao.findList ] - <==      Total: 2
2019-07-09 09:21:35.247 DEBUG 4592 [           main] [c.j.c.m.m.provider.SelectSqlProvider   ] - 0毫秒: SELECT a.corp_code AS "corpCode", a.corp_name AS "corpName", a.status AS "status", a.create_by AS "createBy", a.create_date AS "createDate", a.update_by AS "updateBy", a.update_date AS "updateDate", a.remarks AS "remarks", a.user_code AS "userCode", a.login_code AS "loginCode", a.user_name AS "userName", a.password AS "password", a.email AS "email", a.mobile AS "mobile", a.phone AS "phone", a.sex AS "sex", a.avatar AS "avatar", a.sign AS "sign", a.wx_openid AS "wxOpenid", a.mobile_imei AS "mobileImei", a.user_type AS "userType", a.ref_code AS "refCode", a.ref_name AS "refName", a.mgr_type AS "mgrType", a.pwd_security_level AS "pwdSecurityLevel", a.pwd_update_date AS "pwdUpdateDate", a.pwd_update_record AS "pwdUpdateRecord", a.pwd_question AS "pwdQuestion", a.pwd_question_answer AS "pwdQuestionAnswer", a.pwd_question_2 AS "pwdQuestion2", a.pwd_question_answer_2 AS "pwdQuestionAnswer2", a.pwd_question_3 AS "pwdQuestion3", a.pwd_question_answer_3 AS "pwdQuestionAnswer3", a.pwd_quest_update_date AS "pwdQuestUpdateDate", a.last_login_ip AS "lastLoginIp", a.last_login_date AS "lastLoginDate", a.freeze_date AS "freezeDate", a.freeze_cause AS "freezeCause", a.user_weight AS "userWeight", a.extend_s1 AS "extend.extendS1", a.extend_s2 AS "extend.extendS2", a.extend_s3 AS "extend.extendS3", a.extend_s4 AS "extend.extendS4", a.extend_s5 AS "extend.extendS5", a.extend_s6 AS "extend.extendS6", a.extend_s7 AS "extend.extendS7", a.extend_s8 AS "extend.extendS8", a.extend_i1 AS "extend.extendI1", a.extend_i2 AS "extend.extendI2", a.extend_i3 AS "extend.extendI3", a.extend_i4 AS "extend.extendI4", a.extend_f1 AS "extend.extendF1", a.extend_f2 AS "extend.extendF2", a.extend_f3 AS "extend.extendF3", a.extend_f4 AS "extend.extendF4", a.extend_d1 AS "extend.extendD1", a.extend_d2 AS "extend.extendD2", a.extend_d3 AS "extend.extendD3", a.extend_d4 AS "extend.extendD4" FROM js_sys_user a WHERE a.`user_code` = #{userCode}
2019-07-09 09:21:35.250 DEBUG 4592 [           main] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@6e5df971] will be managed by Spring
2019-07-09 09:21:35.250 DEBUG 4592 [           main] [com.jeesite.modules.sys.dao.UserDao.get] - ==>  Preparing: SELECT a.corp_code AS "corpCode", a.corp_name AS "corpName", a.status AS "status", a.create_by AS "createBy", a.create_date AS "createDate", a.update_by AS "updateBy", a.update_date AS "updateDate", a.remarks AS "remarks", a.user_code AS "userCode", a.login_code AS "loginCode", a.user_name AS "userName", a.password AS "password", a.email AS "email", a.mobile AS "mobile", a.phone AS "phone", a.sex AS "sex", a.avatar AS "avatar", a.sign AS "sign", a.wx_openid AS "wxOpenid", a.mobile_imei AS "mobileImei", a.user_type AS "userType", a.ref_code AS "refCode", a.ref_name AS "refName", a.mgr_type AS "mgrType", a.pwd_security_level AS "pwdSecurityLevel", a.pwd_update_date AS "pwdUpdateDate", a.pwd_update_record AS "pwdUpdateRecord", a.pwd_question AS "pwdQuestion", a.pwd_question_answer AS "pwdQuestionAnswer", a.pwd_question_2 AS "pwdQuestion2", a.pwd_question_answer_2 AS "pwdQuestionAnswer2", a.pwd_question_3 AS "pwdQuestion3", a.pwd_question_answer_3 AS "pwdQuestionAnswer3", a.pwd_quest_update_date AS "pwdQuestUpdateDate", a.last_login_ip AS "lastLoginIp", a.last_login_date AS "lastLoginDate", a.freeze_date AS "freezeDate", a.freeze_cause AS "freezeCause", a.user_weight AS "userWeight", a.extend_s1 AS "extend.extendS1", a.extend_s2 AS "extend.extendS2", a.extend_s3 AS "extend.extendS3", a.extend_s4 AS "extend.extendS4", a.extend_s5 AS "extend.extendS5", a.extend_s6 AS "extend.extendS6", a.extend_s7 AS "extend.extendS7", a.extend_s8 AS "extend.extendS8", a.extend_i1 AS "extend.extendI1", a.extend_i2 AS "extend.extendI2", a.extend_i3 AS "extend.extendI3", a.extend_i4 AS "extend.extendI4", a.extend_f1 AS "extend.extendF1", a.extend_f2 AS "extend.extendF2", a.extend_f3 AS "extend.extendF3", a.extend_f4 AS "extend.extendF4", a.extend_d1 AS "extend.extendD1", a.extend_d2 AS "extend.extendD2", a.extend_d3 AS "extend.extendD3", a.extend_d4 AS "extend.extendD4" FROM js_sys_user a WHERE a.`user_code` = ? 
2019-07-09 09:21:35.251 DEBUG 4592 [           main] [com.jeesite.modules.sys.dao.UserDao.get] - ==> Parameters: system(String)
2019-07-09 09:21:35.280 DEBUG 4592 [           main] [com.jeesite.modules.sys.dao.UserDao.get] - <==      Total: 1
2019-07-09 09:21:35.327 DEBUG 4592 [           main] [c.j.m.s.dao.RoleDao.findListByUserCode ] - ==>  Preparing: SELECT a.corp_code AS "corpCode", a.corp_name AS "corpName", a.status AS "status", a.create_by AS "createBy", a.create_date AS "createDate", a.update_by AS "updateBy", a.update_date AS "updateDate", a.remarks AS "remarks", a.role_code AS "roleCode", a.role_name AS "roleName", a.role_type AS "roleType", a.role_sort AS "roleSort", a.is_sys AS "isSys", a.user_type AS "userType", a.data_scope AS "dataScope" FROM js_sys_role a JOIN js_sys_user_role ur ON a.role_code = ur.role_code WHERE a.status = ? AND ur.user_code = ? ORDER BY a.role_sort ASC 
2019-07-09 09:21:35.328 DEBUG 4592 [           main] [c.j.m.s.dao.RoleDao.findListByUserCode ] - ==> Parameters: 0(String), system(String)
2019-07-09 09:21:35.353 DEBUG 4592 [           main] [c.j.m.s.dao.RoleDao.findListByUserCode ] - <==      Total: 0
2019-07-09 09:21:35.395 DEBUG 4592 [           main] [c.j.c.m.m.provider.UpdateSqlProvider   ] - 206毫秒: UPDATE js_sys_menu SET `status` = #{param1.status}, `update_by` = #{param1.updateBy}, `update_date` = #{param1.updateDate} WHERE status != #{param2.STATUS_DELETE} AND module_codes LIKE #{param2.sqlMap.where#module_codes#LIKE1}
2019-07-09 09:21:35.396 DEBUG 4592 [           main] [c.j.m.s.d.MenuDao.updateStatusByEntity ] - ==>  Preparing: UPDATE js_sys_menu SET `status` = ?, `update_by` = ?, `update_date` = ? WHERE status != ? AND module_codes LIKE ? 
2019-07-09 09:21:35.398 DEBUG 4592 [           main] [c.j.m.s.d.MenuDao.updateStatusByEntity ] - ==> Parameters: 2(String), system(String), 2019-07-09 09:21:35.395(Timestamp), 1(String), %cms%(String)
2019-07-09 09:21:35.446 DEBUG 4592 [           main] [c.j.m.s.d.MenuDao.updateStatusByEntity ] - <==    Updates: 7
2019-07-09 09:21:35.561 DEBUG 4592 [           main] [c.j.c.m.m.provider.UpdateSqlProvider   ] - 2毫秒: UPDATE js_sys_menu SET `status` = #{param1.status}, `update_by` = #{param1.updateBy}, `update_date` = #{param1.updateDate} WHERE status != #{param2.STATUS_DELETE} AND module_codes LIKE #{param2.sqlMap.where#module_codes#LIKE1}
2019-07-09 09:21:35.562 DEBUG 4592 [           main] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@6e5df971] will be managed by Spring
2019-07-09 09:21:35.562 DEBUG 4592 [           main] [c.j.m.s.d.MenuDao.updateStatusByEntity ] - ==>  Preparing: UPDATE js_sys_menu SET `status` = ?, `update_by` = ?, `update_date` = ? WHERE status != ? AND module_codes LIKE ? 
2019-07-09 09:21:35.563 DEBUG 4592 [           main] [c.j.m.s.d.MenuDao.updateStatusByEntity ] - ==> Parameters: 0(String), system(String), 2019-07-09 09:21:35.561(Timestamp), 1(String), %core%(String)
2019-07-09 09:21:35.610 DEBUG 4592 [           main] [c.j.m.s.d.MenuDao.updateStatusByEntity ] - <==    Updates: 70
2019-07-09 09:21:37.445 INFO  4592 [           main] [o.s.b.w.embedded.tomcat.TomcatWebServer] - Tomcat started on port(s): 8980 (http) with context path '/js'
2019-07-09 09:21:37.449 INFO  4592 [           main] [com.jeesite.modules.Application        ] - Started Application in 14.505 seconds (JVM running for 15.369)
2019-07-09 09:33:50.988 DEBUG 4592 [nio-8980-exec-7] [c.j.c.m.m.provider.SelectSqlProvider   ] - 1毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.product_count AS "productCount", a.total_price AS "totalPrice", a.logistics_price AS "logisticsPrice", a.discount_price AS "discountPrice", a.really_price AS "reallyPrice", a.pay_channel AS "payChannel", a.out_trade_no AS "outTradeNo", a.create_date AS "createDate", a.update_date AS "updateDate", a.create_by AS "createBy", a.update_by AS "updateBy", a.pay_date AS "payDate", a.user_id AS "userId", a.address_id AS "addressId", a.logistics_id AS "logisticsId", a.delivery_date AS "deliveryDate", a.del_flag AS "delFlag", a.delivery_name AS "deliveryName", a.delivery_address AS "deliveryAddress", a.delivery_phone AS "deliveryPhone", a.total_count AS "totalCount", a.trade_no AS "tradeNo" FROM sys_order a WHERE a.order_no = #{sqlMap.where#order_no#EQ1} ORDER BY a.update_date DESC
2019-07-09 09:33:51.016 DEBUG 4592 [nio-8980-exec-7] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@6e5df971] will not be managed by Spring
2019-07-09 09:33:51.016 DEBUG 4592 [nio-8980-exec-7] [c.j.modules.app.dao.OrderDao.findList  ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.product_count AS "productCount", a.total_price AS "totalPrice", a.logistics_price AS "logisticsPrice", a.discount_price AS "discountPrice", a.really_price AS "reallyPrice", a.pay_channel AS "payChannel", a.out_trade_no AS "outTradeNo", a.create_date AS "createDate", a.update_date AS "updateDate", a.create_by AS "createBy", a.update_by AS "updateBy", a.pay_date AS "payDate", a.user_id AS "userId", a.address_id AS "addressId", a.logistics_id AS "logisticsId", a.delivery_date AS "deliveryDate", a.del_flag AS "delFlag", a.delivery_name AS "deliveryName", a.delivery_address AS "deliveryAddress", a.delivery_phone AS "deliveryPhone", a.total_count AS "totalCount", a.trade_no AS "tradeNo" FROM sys_order a WHERE a.order_no = ? ORDER BY a.update_date DESC 
2019-07-09 09:33:51.017 DEBUG 4592 [nio-8980-exec-7] [c.j.modules.app.dao.OrderDao.findList  ] - ==> Parameters: 19070909335047001(String)
2019-07-09 09:33:51.043 DEBUG 4592 [nio-8980-exec-7] [c.j.modules.app.dao.OrderDao.findList  ] - <==      Total: 0
2019-07-09 09:33:51.057 DEBUG 4592 [nio-8980-exec-7] [c.j.c.m.m.provider.SelectSqlProvider   ] - 2毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", dd.id AS "userInfo.id", dd.mobile AS "userInfo.mobile", dd.password AS "userInfo.password", dd.icon AS "userInfo.icon", dd.regtime AS "userInfo.regtime", dd.lastlogin AS "userInfo.lastlogin", dd.islock AS "userInfo.islock", dd.isauthentication AS "userInfo.isauthentication", dd.type AS "userInfo.type", dd.create_by AS "userInfo.createBy", dd.create_date AS "userInfo.createDate", dd.update_by AS "userInfo.updateBy", dd.update_date AS "userInfo.updateDate", dd.remarks AS "userInfo.remarks", dd.del_flag AS "userInfo.delFlag", dd.nike_name AS "userInfo.nikeName", dd.is_invite AS "userInfo.isInvite", dd.third_id AS "userInfo.thirdId", dd.third_type AS "userInfo.thirdType", dd.third_icon AS "userInfo.thirdIcon", dd.member_lv AS "userInfo.memberLv", dd.member_flag AS "userInfo.memberFlag", dd.member_start AS "userInfo.memberStart", dd.member_end AS "userInfo.memberEnd", di.id AS "doctorInfos.id", di.doctorid AS "doctorInfos.doctorid", di.doctornum AS "doctorInfos.doctornum", di.name AS "doctorInfos.name", di.sex AS "doctorInfos.sex", di.age AS "doctorInfos.age", di.telephone AS "doctorInfos.telephone", di.idcard AS "doctorInfos.idcard", di.adress AS "doctorInfos.adress", di.technical AS "doctorInfos.technical", di.classify AS "doctorInfos.classify", di.introduce AS "doctorInfos.introduce", di.create_by AS "doctorInfos.createBy", di.cost AS "doctorInfos.cost", di.create_date AS "doctorInfos.createDate", di.update_by AS "doctorInfos.updateBy", di.update_date AS "doctorInfos.updateDate", di.remarks AS "doctorInfos.remarks", di.del_flag AS "doctorInfos.delFlag", di.cityid AS "doctorInfos.cityid", di.come_flag AS "doctorInfos.comeFlag", di.come_cost AS "doctorInfos.comeCost", di.own_flag AS "doctorInfos.ownFlag", di.first_count AS "doctorInfos.firstCount", di.star_lv AS "doctorInfos.starLv" FROM sys_tiaoli_order a LEFT JOIN sys_user_info dd ON a.userid = dd.id LEFT JOIN sys_doctor_info di ON a.docid = di.doctorid WHERE a.order_no = #{sqlMap.where#order_no#EQ1} ORDER BY a.create_date DESC
2019-07-09 09:33:51.059 DEBUG 4592 [nio-8980-exec-7] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@6e5df971] will not be managed by Spring
2019-07-09 09:33:51.059 DEBUG 4592 [nio-8980-exec-7] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", dd.id AS "userInfo.id", dd.mobile AS "userInfo.mobile", dd.password AS "userInfo.password", dd.icon AS "userInfo.icon", dd.regtime AS "userInfo.regtime", dd.lastlogin AS "userInfo.lastlogin", dd.islock AS "userInfo.islock", dd.isauthentication AS "userInfo.isauthentication", dd.type AS "userInfo.type", dd.create_by AS "userInfo.createBy", dd.create_date AS "userInfo.createDate", dd.update_by AS "userInfo.updateBy", dd.update_date AS "userInfo.updateDate", dd.remarks AS "userInfo.remarks", dd.del_flag AS "userInfo.delFlag", dd.nike_name AS "userInfo.nikeName", dd.is_invite AS "userInfo.isInvite", dd.third_id AS "userInfo.thirdId", dd.third_type AS "userInfo.thirdType", dd.third_icon AS "userInfo.thirdIcon", dd.member_lv AS "userInfo.memberLv", dd.member_flag AS "userInfo.memberFlag", dd.member_start AS "userInfo.memberStart", dd.member_end AS "userInfo.memberEnd", di.id AS "doctorInfos.id", di.doctorid AS "doctorInfos.doctorid", di.doctornum AS "doctorInfos.doctornum", di.name AS "doctorInfos.name", di.sex AS "doctorInfos.sex", di.age AS "doctorInfos.age", di.telephone AS "doctorInfos.telephone", di.idcard AS "doctorInfos.idcard", di.adress AS "doctorInfos.adress", di.technical AS "doctorInfos.technical", di.classify AS "doctorInfos.classify", di.introduce AS "doctorInfos.introduce", di.create_by AS "doctorInfos.createBy", di.cost AS "doctorInfos.cost", di.create_date AS "doctorInfos.createDate", di.update_by AS "doctorInfos.updateBy", di.update_date AS "doctorInfos.updateDate", di.remarks AS "doctorInfos.remarks", di.del_flag AS "doctorInfos.delFlag", di.cityid AS "doctorInfos.cityid", di.come_flag AS "doctorInfos.comeFlag", di.come_cost AS "doctorInfos.comeCost", di.own_flag AS "doctorInfos.ownFlag", di.first_count AS "doctorInfos.firstCount", di.star_lv AS "doctorInfos.starLv" FROM sys_tiaoli_order a LEFT JOIN sys_user_info dd ON a.userid = dd.id LEFT JOIN sys_doctor_info di ON a.docid = di.doctorid WHERE a.order_no = ? ORDER BY a.create_date DESC 
2019-07-09 09:33:51.059 DEBUG 4592 [nio-8980-exec-7] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - ==> Parameters: 19070909335047001(String)
2019-07-09 09:33:51.097 DEBUG 4592 [nio-8980-exec-7] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - <==      Total: 1
2019-07-09 09:33:51.099 DEBUG 4592 [nio-8980-exec-7] [c.j.c.m.m.provider.SelectSqlProvider   ] - 1毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", dd.id AS "userInfo.id", dd.mobile AS "userInfo.mobile", dd.password AS "userInfo.password", dd.icon AS "userInfo.icon", dd.regtime AS "userInfo.regtime", dd.lastlogin AS "userInfo.lastlogin", dd.islock AS "userInfo.islock", dd.isauthentication AS "userInfo.isauthentication", dd.type AS "userInfo.type", dd.create_by AS "userInfo.createBy", dd.create_date AS "userInfo.createDate", dd.update_by AS "userInfo.updateBy", dd.update_date AS "userInfo.updateDate", dd.remarks AS "userInfo.remarks", dd.del_flag AS "userInfo.delFlag", dd.nike_name AS "userInfo.nikeName", dd.is_invite AS "userInfo.isInvite", dd.third_id AS "userInfo.thirdId", dd.third_type AS "userInfo.thirdType", dd.third_icon AS "userInfo.thirdIcon", dd.member_lv AS "userInfo.memberLv", dd.member_flag AS "userInfo.memberFlag", dd.member_start AS "userInfo.memberStart", dd.member_end AS "userInfo.memberEnd", di.id AS "doctorInfos.id", di.doctorid AS "doctorInfos.doctorid", di.doctornum AS "doctorInfos.doctornum", di.name AS "doctorInfos.name", di.sex AS "doctorInfos.sex", di.age AS "doctorInfos.age", di.telephone AS "doctorInfos.telephone", di.idcard AS "doctorInfos.idcard", di.adress AS "doctorInfos.adress", di.technical AS "doctorInfos.technical", di.classify AS "doctorInfos.classify", di.introduce AS "doctorInfos.introduce", di.create_by AS "doctorInfos.createBy", di.cost AS "doctorInfos.cost", di.create_date AS "doctorInfos.createDate", di.update_by AS "doctorInfos.updateBy", di.update_date AS "doctorInfos.updateDate", di.remarks AS "doctorInfos.remarks", di.del_flag AS "doctorInfos.delFlag", di.cityid AS "doctorInfos.cityid", di.come_flag AS "doctorInfos.comeFlag", di.come_cost AS "doctorInfos.comeCost", di.own_flag AS "doctorInfos.ownFlag", di.first_count AS "doctorInfos.firstCount", di.star_lv AS "doctorInfos.starLv" FROM sys_tiaoli_order a LEFT JOIN sys_user_info dd ON a.userid = dd.id LEFT JOIN sys_doctor_info di ON a.docid = di.doctorid WHERE a.order_no = #{sqlMap.where#order_no#EQ1} ORDER BY a.create_date DESC
2019-07-09 09:33:51.100 DEBUG 4592 [nio-8980-exec-7] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@6e5df971] will not be managed by Spring
2019-07-09 09:33:51.101 DEBUG 4592 [nio-8980-exec-7] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", dd.id AS "userInfo.id", dd.mobile AS "userInfo.mobile", dd.password AS "userInfo.password", dd.icon AS "userInfo.icon", dd.regtime AS "userInfo.regtime", dd.lastlogin AS "userInfo.lastlogin", dd.islock AS "userInfo.islock", dd.isauthentication AS "userInfo.isauthentication", dd.type AS "userInfo.type", dd.create_by AS "userInfo.createBy", dd.create_date AS "userInfo.createDate", dd.update_by AS "userInfo.updateBy", dd.update_date AS "userInfo.updateDate", dd.remarks AS "userInfo.remarks", dd.del_flag AS "userInfo.delFlag", dd.nike_name AS "userInfo.nikeName", dd.is_invite AS "userInfo.isInvite", dd.third_id AS "userInfo.thirdId", dd.third_type AS "userInfo.thirdType", dd.third_icon AS "userInfo.thirdIcon", dd.member_lv AS "userInfo.memberLv", dd.member_flag AS "userInfo.memberFlag", dd.member_start AS "userInfo.memberStart", dd.member_end AS "userInfo.memberEnd", di.id AS "doctorInfos.id", di.doctorid AS "doctorInfos.doctorid", di.doctornum AS "doctorInfos.doctornum", di.name AS "doctorInfos.name", di.sex AS "doctorInfos.sex", di.age AS "doctorInfos.age", di.telephone AS "doctorInfos.telephone", di.idcard AS "doctorInfos.idcard", di.adress AS "doctorInfos.adress", di.technical AS "doctorInfos.technical", di.classify AS "doctorInfos.classify", di.introduce AS "doctorInfos.introduce", di.create_by AS "doctorInfos.createBy", di.cost AS "doctorInfos.cost", di.create_date AS "doctorInfos.createDate", di.update_by AS "doctorInfos.updateBy", di.update_date AS "doctorInfos.updateDate", di.remarks AS "doctorInfos.remarks", di.del_flag AS "doctorInfos.delFlag", di.cityid AS "doctorInfos.cityid", di.come_flag AS "doctorInfos.comeFlag", di.come_cost AS "doctorInfos.comeCost", di.own_flag AS "doctorInfos.ownFlag", di.first_count AS "doctorInfos.firstCount", di.star_lv AS "doctorInfos.starLv" FROM sys_tiaoli_order a LEFT JOIN sys_user_info dd ON a.userid = dd.id LEFT JOIN sys_doctor_info di ON a.docid = di.doctorid WHERE a.order_no = ? ORDER BY a.create_date DESC 
2019-07-09 09:33:51.102 DEBUG 4592 [nio-8980-exec-7] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - ==> Parameters: 19070909335047001(String)
2019-07-09 09:33:51.130 DEBUG 4592 [nio-8980-exec-7] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - <==      Total: 1
2019-07-09 09:33:51.143 DEBUG 4592 [nio-8980-exec-7] [c.j.c.m.m.provider.SelectSqlProvider   ] - 0毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.total_price AS "totalPrice", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag" FROM sys_member_order a WHERE a.order_no = #{sqlMap.where#order_no#EQ1} ORDER BY a.update_date DESC
2019-07-09 09:33:51.144 DEBUG 4592 [nio-8980-exec-7] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@6e5df971] will not be managed by Spring
2019-07-09 09:33:51.145 DEBUG 4592 [nio-8980-exec-7] [c.j.m.app.dao.MemberOrderDao.findList  ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.total_price AS "totalPrice", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag" FROM sys_member_order a WHERE a.order_no = ? ORDER BY a.update_date DESC 
2019-07-09 09:33:51.145 DEBUG 4592 [nio-8980-exec-7] [c.j.m.app.dao.MemberOrderDao.findList  ] - ==> Parameters: 19070909335047001(String)
2019-07-09 09:33:51.170 DEBUG 4592 [nio-8980-exec-7] [c.j.m.app.dao.MemberOrderDao.findList  ] - <==      Total: 0
2019-07-09 09:33:51.182 DEBUG 4592 [nio-8980-exec-7] [c.j.c.m.m.provider.SelectSqlProvider   ] - 1毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.total_price AS "totalPrice", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", a.doctor_user_id AS "doctorUserId" FROM sys_doctor_register_order a WHERE a.order_no = #{sqlMap.where#order_no#EQ1} ORDER BY a.update_date DESC
2019-07-09 09:33:51.183 DEBUG 4592 [nio-8980-exec-7] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@6e5df971] will not be managed by Spring
2019-07-09 09:33:51.184 DEBUG 4592 [nio-8980-exec-7] [c.j.m.a.d.D.findList                   ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.total_price AS "totalPrice", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", a.doctor_user_id AS "doctorUserId" FROM sys_doctor_register_order a WHERE a.order_no = ? ORDER BY a.update_date DESC 
2019-07-09 09:33:51.184 DEBUG 4592 [nio-8980-exec-7] [c.j.m.a.d.D.findList                   ] - ==> Parameters: 19070909335047001(String)
2019-07-09 09:33:51.209 DEBUG 4592 [nio-8980-exec-7] [c.j.m.a.d.D.findList                   ] - <==      Total: 0
2019-07-09 09:33:51.252 DEBUG 4592 [nio-8980-exec-7] [c.j.c.m.m.provider.SelectSqlProvider   ] - 0毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag" FROM sys_dashang_order a WHERE a.order_no = #{sqlMap.where#order_no#EQ1} ORDER BY a.update_date DESC
2019-07-09 09:33:51.254 DEBUG 4592 [nio-8980-exec-7] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@6e5df971] will not be managed by Spring
2019-07-09 09:33:51.254 DEBUG 4592 [nio-8980-exec-7] [c.j.m.app.dao.DashangOrderDao.findList ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag" FROM sys_dashang_order a WHERE a.order_no = ? ORDER BY a.update_date DESC 
2019-07-09 09:33:51.255 DEBUG 4592 [nio-8980-exec-7] [c.j.m.app.dao.DashangOrderDao.findList ] - ==> Parameters: 19070909335047001(String)
2019-07-09 09:33:51.279 DEBUG 4592 [nio-8980-exec-7] [c.j.m.app.dao.DashangOrderDao.findList ] - <==      Total: 0
2019-07-09 09:33:51.307 DEBUG 4592 [nio-8980-exec-7] [c.j.c.m.m.provider.UpdateSqlProvider   ] - 0毫秒: UPDATE sys_tiaoli_order SET `order_no` = #{orderNo}, `order_status` = #{orderStatus}, `count` = #{count}, `total_price` = #{totalPrice}, `come_cost` = #{comeCost}, `docid` = #{docid}, `userid` = #{userid}, `update_date` = #{updateDate}, `out_trade_no` = #{outTradeNo}, `del_flag` = #{delFlag} WHERE `id` = #{id}
2019-07-09 09:33:51.308 DEBUG 4592 [nio-8980-exec-7] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@6e5df971] will be managed by Spring
2019-07-09 09:33:51.308 DEBUG 4592 [nio-8980-exec-7] [c.j.m.app.dao.TiaoliOrderDao.update    ] - ==>  Preparing: UPDATE sys_tiaoli_order SET `order_no` = ?, `order_status` = ?, `count` = ?, `total_price` = ?, `come_cost` = ?, `docid` = ?, `userid` = ?, `update_date` = ?, `out_trade_no` = ?, `del_flag` = ? WHERE `id` = ? 
2019-07-09 09:33:51.309 DEBUG 4592 [nio-8980-exec-7] [c.j.m.app.dao.TiaoliOrderDao.update    ] - ==> Parameters: 19070909335047001(String), 0(String), 1(String), 1000(String), 1000(String), 0f2067603f1111e99752bcaec5595fa3(String), 32c6e1204fad11e9b780fa163e609e56(String), 2019-07-09 09:33:51.0(Timestamp), 201907099335000000(String), 0(String), 1148404863759802368(String)
2019-07-09 09:33:51.356 DEBUG 4592 [nio-8980-exec-7] [c.j.m.app.dao.TiaoliOrderDao.update    ] - <==    Updates: 1
2019-07-09 09:33:58.787 DEBUG 4592 [nio-8980-exec-3] [c.j.c.m.m.provider.SelectSqlProvider   ] - 0毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.product_count AS "productCount", a.total_price AS "totalPrice", a.logistics_price AS "logisticsPrice", a.discount_price AS "discountPrice", a.really_price AS "reallyPrice", a.pay_channel AS "payChannel", a.out_trade_no AS "outTradeNo", a.create_date AS "createDate", a.update_date AS "updateDate", a.create_by AS "createBy", a.update_by AS "updateBy", a.pay_date AS "payDate", a.user_id AS "userId", a.address_id AS "addressId", a.logistics_id AS "logisticsId", a.delivery_date AS "deliveryDate", a.del_flag AS "delFlag", a.delivery_name AS "deliveryName", a.delivery_address AS "deliveryAddress", a.delivery_phone AS "deliveryPhone", a.total_count AS "totalCount", a.trade_no AS "tradeNo" FROM sys_order a WHERE a.out_trade_no = #{sqlMap.where#out_trade_no#EQ1} ORDER BY a.update_date DESC
2019-07-09 09:33:58.788 DEBUG 4592 [nio-8980-exec-3] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@6e5df971] will not be managed by Spring
2019-07-09 09:33:58.789 DEBUG 4592 [nio-8980-exec-3] [c.j.modules.app.dao.OrderDao.findList  ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.product_count AS "productCount", a.total_price AS "totalPrice", a.logistics_price AS "logisticsPrice", a.discount_price AS "discountPrice", a.really_price AS "reallyPrice", a.pay_channel AS "payChannel", a.out_trade_no AS "outTradeNo", a.create_date AS "createDate", a.update_date AS "updateDate", a.create_by AS "createBy", a.update_by AS "updateBy", a.pay_date AS "payDate", a.user_id AS "userId", a.address_id AS "addressId", a.logistics_id AS "logisticsId", a.delivery_date AS "deliveryDate", a.del_flag AS "delFlag", a.delivery_name AS "deliveryName", a.delivery_address AS "deliveryAddress", a.delivery_phone AS "deliveryPhone", a.total_count AS "totalCount", a.trade_no AS "tradeNo" FROM sys_order a WHERE a.out_trade_no = ? ORDER BY a.update_date DESC 
2019-07-09 09:33:58.789 DEBUG 4592 [nio-8980-exec-3] [c.j.modules.app.dao.OrderDao.findList  ] - ==> Parameters: 201907099335000000(String)
2019-07-09 09:33:58.815 DEBUG 4592 [nio-8980-exec-3] [c.j.modules.app.dao.OrderDao.findList  ] - <==      Total: 0
2019-07-09 09:33:58.816 DEBUG 4592 [nio-8980-exec-3] [c.j.c.m.m.provider.SelectSqlProvider   ] - 0毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", dd.id AS "userInfo.id", dd.mobile AS "userInfo.mobile", dd.password AS "userInfo.password", dd.icon AS "userInfo.icon", dd.regtime AS "userInfo.regtime", dd.lastlogin AS "userInfo.lastlogin", dd.islock AS "userInfo.islock", dd.isauthentication AS "userInfo.isauthentication", dd.type AS "userInfo.type", dd.create_by AS "userInfo.createBy", dd.create_date AS "userInfo.createDate", dd.update_by AS "userInfo.updateBy", dd.update_date AS "userInfo.updateDate", dd.remarks AS "userInfo.remarks", dd.del_flag AS "userInfo.delFlag", dd.nike_name AS "userInfo.nikeName", dd.is_invite AS "userInfo.isInvite", dd.third_id AS "userInfo.thirdId", dd.third_type AS "userInfo.thirdType", dd.third_icon AS "userInfo.thirdIcon", dd.member_lv AS "userInfo.memberLv", dd.member_flag AS "userInfo.memberFlag", dd.member_start AS "userInfo.memberStart", dd.member_end AS "userInfo.memberEnd", di.id AS "doctorInfos.id", di.doctorid AS "doctorInfos.doctorid", di.doctornum AS "doctorInfos.doctornum", di.name AS "doctorInfos.name", di.sex AS "doctorInfos.sex", di.age AS "doctorInfos.age", di.telephone AS "doctorInfos.telephone", di.idcard AS "doctorInfos.idcard", di.adress AS "doctorInfos.adress", di.technical AS "doctorInfos.technical", di.classify AS "doctorInfos.classify", di.introduce AS "doctorInfos.introduce", di.create_by AS "doctorInfos.createBy", di.cost AS "doctorInfos.cost", di.create_date AS "doctorInfos.createDate", di.update_by AS "doctorInfos.updateBy", di.update_date AS "doctorInfos.updateDate", di.remarks AS "doctorInfos.remarks", di.del_flag AS "doctorInfos.delFlag", di.cityid AS "doctorInfos.cityid", di.come_flag AS "doctorInfos.comeFlag", di.come_cost AS "doctorInfos.comeCost", di.own_flag AS "doctorInfos.ownFlag", di.first_count AS "doctorInfos.firstCount", di.star_lv AS "doctorInfos.starLv" FROM sys_tiaoli_order a LEFT JOIN sys_user_info dd ON a.userid = dd.id LEFT JOIN sys_doctor_info di ON a.docid = di.doctorid WHERE a.out_trade_no = #{sqlMap.where#out_trade_no#EQ1} ORDER BY a.create_date DESC
2019-07-09 09:33:58.817 DEBUG 4592 [nio-8980-exec-3] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@6e5df971] will not be managed by Spring
2019-07-09 09:33:58.817 DEBUG 4592 [nio-8980-exec-3] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", dd.id AS "userInfo.id", dd.mobile AS "userInfo.mobile", dd.password AS "userInfo.password", dd.icon AS "userInfo.icon", dd.regtime AS "userInfo.regtime", dd.lastlogin AS "userInfo.lastlogin", dd.islock AS "userInfo.islock", dd.isauthentication AS "userInfo.isauthentication", dd.type AS "userInfo.type", dd.create_by AS "userInfo.createBy", dd.create_date AS "userInfo.createDate", dd.update_by AS "userInfo.updateBy", dd.update_date AS "userInfo.updateDate", dd.remarks AS "userInfo.remarks", dd.del_flag AS "userInfo.delFlag", dd.nike_name AS "userInfo.nikeName", dd.is_invite AS "userInfo.isInvite", dd.third_id AS "userInfo.thirdId", dd.third_type AS "userInfo.thirdType", dd.third_icon AS "userInfo.thirdIcon", dd.member_lv AS "userInfo.memberLv", dd.member_flag AS "userInfo.memberFlag", dd.member_start AS "userInfo.memberStart", dd.member_end AS "userInfo.memberEnd", di.id AS "doctorInfos.id", di.doctorid AS "doctorInfos.doctorid", di.doctornum AS "doctorInfos.doctornum", di.name AS "doctorInfos.name", di.sex AS "doctorInfos.sex", di.age AS "doctorInfos.age", di.telephone AS "doctorInfos.telephone", di.idcard AS "doctorInfos.idcard", di.adress AS "doctorInfos.adress", di.technical AS "doctorInfos.technical", di.classify AS "doctorInfos.classify", di.introduce AS "doctorInfos.introduce", di.create_by AS "doctorInfos.createBy", di.cost AS "doctorInfos.cost", di.create_date AS "doctorInfos.createDate", di.update_by AS "doctorInfos.updateBy", di.update_date AS "doctorInfos.updateDate", di.remarks AS "doctorInfos.remarks", di.del_flag AS "doctorInfos.delFlag", di.cityid AS "doctorInfos.cityid", di.come_flag AS "doctorInfos.comeFlag", di.come_cost AS "doctorInfos.comeCost", di.own_flag AS "doctorInfos.ownFlag", di.first_count AS "doctorInfos.firstCount", di.star_lv AS "doctorInfos.starLv" FROM sys_tiaoli_order a LEFT JOIN sys_user_info dd ON a.userid = dd.id LEFT JOIN sys_doctor_info di ON a.docid = di.doctorid WHERE a.out_trade_no = ? ORDER BY a.create_date DESC 
2019-07-09 09:33:58.818 DEBUG 4592 [nio-8980-exec-3] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - ==> Parameters: 201907099335000000(String)
2019-07-09 09:33:58.847 DEBUG 4592 [nio-8980-exec-3] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - <==      Total: 1
2019-07-09 09:33:58.848 DEBUG 4592 [nio-8980-exec-3] [c.j.c.m.m.provider.SelectSqlProvider   ] - 0毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", dd.id AS "userInfo.id", dd.mobile AS "userInfo.mobile", dd.password AS "userInfo.password", dd.icon AS "userInfo.icon", dd.regtime AS "userInfo.regtime", dd.lastlogin AS "userInfo.lastlogin", dd.islock AS "userInfo.islock", dd.isauthentication AS "userInfo.isauthentication", dd.type AS "userInfo.type", dd.create_by AS "userInfo.createBy", dd.create_date AS "userInfo.createDate", dd.update_by AS "userInfo.updateBy", dd.update_date AS "userInfo.updateDate", dd.remarks AS "userInfo.remarks", dd.del_flag AS "userInfo.delFlag", dd.nike_name AS "userInfo.nikeName", dd.is_invite AS "userInfo.isInvite", dd.third_id AS "userInfo.thirdId", dd.third_type AS "userInfo.thirdType", dd.third_icon AS "userInfo.thirdIcon", dd.member_lv AS "userInfo.memberLv", dd.member_flag AS "userInfo.memberFlag", dd.member_start AS "userInfo.memberStart", dd.member_end AS "userInfo.memberEnd", di.id AS "doctorInfos.id", di.doctorid AS "doctorInfos.doctorid", di.doctornum AS "doctorInfos.doctornum", di.name AS "doctorInfos.name", di.sex AS "doctorInfos.sex", di.age AS "doctorInfos.age", di.telephone AS "doctorInfos.telephone", di.idcard AS "doctorInfos.idcard", di.adress AS "doctorInfos.adress", di.technical AS "doctorInfos.technical", di.classify AS "doctorInfos.classify", di.introduce AS "doctorInfos.introduce", di.create_by AS "doctorInfos.createBy", di.cost AS "doctorInfos.cost", di.create_date AS "doctorInfos.createDate", di.update_by AS "doctorInfos.updateBy", di.update_date AS "doctorInfos.updateDate", di.remarks AS "doctorInfos.remarks", di.del_flag AS "doctorInfos.delFlag", di.cityid AS "doctorInfos.cityid", di.come_flag AS "doctorInfos.comeFlag", di.come_cost AS "doctorInfos.comeCost", di.own_flag AS "doctorInfos.ownFlag", di.first_count AS "doctorInfos.firstCount", di.star_lv AS "doctorInfos.starLv" FROM sys_tiaoli_order a LEFT JOIN sys_user_info dd ON a.userid = dd.id LEFT JOIN sys_doctor_info di ON a.docid = di.doctorid WHERE a.out_trade_no = #{sqlMap.where#out_trade_no#EQ1} ORDER BY a.create_date DESC
2019-07-09 09:33:58.849 DEBUG 4592 [nio-8980-exec-3] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@6e5df971] will not be managed by Spring
2019-07-09 09:33:58.849 DEBUG 4592 [nio-8980-exec-3] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", dd.id AS "userInfo.id", dd.mobile AS "userInfo.mobile", dd.password AS "userInfo.password", dd.icon AS "userInfo.icon", dd.regtime AS "userInfo.regtime", dd.lastlogin AS "userInfo.lastlogin", dd.islock AS "userInfo.islock", dd.isauthentication AS "userInfo.isauthentication", dd.type AS "userInfo.type", dd.create_by AS "userInfo.createBy", dd.create_date AS "userInfo.createDate", dd.update_by AS "userInfo.updateBy", dd.update_date AS "userInfo.updateDate", dd.remarks AS "userInfo.remarks", dd.del_flag AS "userInfo.delFlag", dd.nike_name AS "userInfo.nikeName", dd.is_invite AS "userInfo.isInvite", dd.third_id AS "userInfo.thirdId", dd.third_type AS "userInfo.thirdType", dd.third_icon AS "userInfo.thirdIcon", dd.member_lv AS "userInfo.memberLv", dd.member_flag AS "userInfo.memberFlag", dd.member_start AS "userInfo.memberStart", dd.member_end AS "userInfo.memberEnd", di.id AS "doctorInfos.id", di.doctorid AS "doctorInfos.doctorid", di.doctornum AS "doctorInfos.doctornum", di.name AS "doctorInfos.name", di.sex AS "doctorInfos.sex", di.age AS "doctorInfos.age", di.telephone AS "doctorInfos.telephone", di.idcard AS "doctorInfos.idcard", di.adress AS "doctorInfos.adress", di.technical AS "doctorInfos.technical", di.classify AS "doctorInfos.classify", di.introduce AS "doctorInfos.introduce", di.create_by AS "doctorInfos.createBy", di.cost AS "doctorInfos.cost", di.create_date AS "doctorInfos.createDate", di.update_by AS "doctorInfos.updateBy", di.update_date AS "doctorInfos.updateDate", di.remarks AS "doctorInfos.remarks", di.del_flag AS "doctorInfos.delFlag", di.cityid AS "doctorInfos.cityid", di.come_flag AS "doctorInfos.comeFlag", di.come_cost AS "doctorInfos.comeCost", di.own_flag AS "doctorInfos.ownFlag", di.first_count AS "doctorInfos.firstCount", di.star_lv AS "doctorInfos.starLv" FROM sys_tiaoli_order a LEFT JOIN sys_user_info dd ON a.userid = dd.id LEFT JOIN sys_doctor_info di ON a.docid = di.doctorid WHERE a.out_trade_no = ? ORDER BY a.create_date DESC 
2019-07-09 09:33:58.850 DEBUG 4592 [nio-8980-exec-3] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - ==> Parameters: 201907099335000000(String)
2019-07-09 09:33:58.878 DEBUG 4592 [nio-8980-exec-3] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - <==      Total: 1
2019-07-09 09:33:58.879 DEBUG 4592 [nio-8980-exec-3] [c.j.c.m.m.provider.SelectSqlProvider   ] - 0毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.total_price AS "totalPrice", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag" FROM sys_member_order a WHERE a.out_trade_no = #{sqlMap.where#out_trade_no#EQ1} ORDER BY a.update_date DESC
2019-07-09 09:33:58.880 DEBUG 4592 [nio-8980-exec-3] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@6e5df971] will not be managed by Spring
2019-07-09 09:33:58.881 DEBUG 4592 [nio-8980-exec-3] [c.j.m.app.dao.MemberOrderDao.findList  ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.total_price AS "totalPrice", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag" FROM sys_member_order a WHERE a.out_trade_no = ? ORDER BY a.update_date DESC 
2019-07-09 09:33:58.882 DEBUG 4592 [nio-8980-exec-3] [c.j.m.app.dao.MemberOrderDao.findList  ] - ==> Parameters: 201907099335000000(String)
2019-07-09 09:33:58.905 DEBUG 4592 [nio-8980-exec-3] [c.j.m.app.dao.MemberOrderDao.findList  ] - <==      Total: 0
2019-07-09 09:33:58.907 DEBUG 4592 [nio-8980-exec-3] [c.j.c.m.m.provider.SelectSqlProvider   ] - 1毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.total_price AS "totalPrice", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", a.doctor_user_id AS "doctorUserId" FROM sys_doctor_register_order a WHERE a.out_trade_no = #{sqlMap.where#out_trade_no#EQ1} ORDER BY a.update_date DESC
2019-07-09 09:33:58.907 DEBUG 4592 [nio-8980-exec-3] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@6e5df971] will not be managed by Spring
2019-07-09 09:33:58.908 DEBUG 4592 [nio-8980-exec-3] [c.j.m.a.d.D.findList                   ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.total_price AS "totalPrice", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", a.doctor_user_id AS "doctorUserId" FROM sys_doctor_register_order a WHERE a.out_trade_no = ? ORDER BY a.update_date DESC 
2019-07-09 09:33:58.908 DEBUG 4592 [nio-8980-exec-3] [c.j.m.a.d.D.findList                   ] - ==> Parameters: 201907099335000000(String)
2019-07-09 09:33:58.932 DEBUG 4592 [nio-8980-exec-3] [c.j.m.a.d.D.findList                   ] - <==      Total: 0
2019-07-09 09:33:58.933 DEBUG 4592 [nio-8980-exec-3] [c.j.c.m.m.provider.SelectSqlProvider   ] - 0毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag" FROM sys_dashang_order a WHERE a.out_trade_no = #{sqlMap.where#out_trade_no#EQ1} ORDER BY a.update_date DESC
2019-07-09 09:33:58.933 DEBUG 4592 [nio-8980-exec-3] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@6e5df971] will not be managed by Spring
2019-07-09 09:33:58.934 DEBUG 4592 [nio-8980-exec-3] [c.j.m.app.dao.DashangOrderDao.findList ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag" FROM sys_dashang_order a WHERE a.out_trade_no = ? ORDER BY a.update_date DESC 
2019-07-09 09:33:58.934 DEBUG 4592 [nio-8980-exec-3] [c.j.m.app.dao.DashangOrderDao.findList ] - ==> Parameters: 201907099335000000(String)
2019-07-09 09:33:58.959 DEBUG 4592 [nio-8980-exec-3] [c.j.m.app.dao.DashangOrderDao.findList ] - <==      Total: 0
2019-07-09 09:33:58.983 DEBUG 4592 [nio-8980-exec-3] [c.j.c.m.m.provider.UpdateSqlProvider   ] - 0毫秒: UPDATE sys_tiaoli_order SET `order_no` = #{orderNo}, `order_status` = #{orderStatus}, `count` = #{count}, `total_price` = #{totalPrice}, `come_cost` = #{comeCost}, `docid` = #{docid}, `userid` = #{userid}, `update_date` = #{updateDate}, `out_trade_no` = #{outTradeNo}, `pay_date` = #{payDate}, `pay_channel` = #{payChannel}, `del_flag` = #{delFlag} WHERE `id` = #{id}
2019-07-09 09:33:58.984 DEBUG 4592 [nio-8980-exec-3] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@6e5df971] will be managed by Spring
2019-07-09 09:33:58.984 DEBUG 4592 [nio-8980-exec-3] [c.j.m.app.dao.TiaoliOrderDao.update    ] - ==>  Preparing: UPDATE sys_tiaoli_order SET `order_no` = ?, `order_status` = ?, `count` = ?, `total_price` = ?, `come_cost` = ?, `docid` = ?, `userid` = ?, `update_date` = ?, `out_trade_no` = ?, `pay_date` = ?, `pay_channel` = ?, `del_flag` = ? WHERE `id` = ? 
2019-07-09 09:33:58.985 DEBUG 4592 [nio-8980-exec-3] [c.j.m.app.dao.TiaoliOrderDao.update    ] - ==> Parameters: 19070909335047001(String), 1(String), 1(String), 1000(String), 1000(String), 0f2067603f1111e99752bcaec5595fa3(String), 32c6e1204fad11e9b780fa163e609e56(String), 2019-07-09 09:33:51.0(Timestamp), 201907099335000000(String), 2019-07-09 09:33:58.959(Timestamp), 微信(String), 0(String), 1148404863759802368(String)
2019-07-09 09:33:59.032 DEBUG 4592 [nio-8980-exec-3] [c.j.m.app.dao.TiaoliOrderDao.update    ] - <==    Updates: 1
2019-07-09 09:36:00.937 DEBUG 4592 [nio-8980-exec-1] [c.j.c.m.m.provider.SelectSqlProvider   ] - 1毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.product_count AS "productCount", a.total_price AS "totalPrice", a.logistics_price AS "logisticsPrice", a.discount_price AS "discountPrice", a.really_price AS "reallyPrice", a.pay_channel AS "payChannel", a.out_trade_no AS "outTradeNo", a.create_date AS "createDate", a.update_date AS "updateDate", a.create_by AS "createBy", a.update_by AS "updateBy", a.pay_date AS "payDate", a.user_id AS "userId", a.address_id AS "addressId", a.logistics_id AS "logisticsId", a.delivery_date AS "deliveryDate", a.del_flag AS "delFlag", a.delivery_name AS "deliveryName", a.delivery_address AS "deliveryAddress", a.delivery_phone AS "deliveryPhone", a.total_count AS "totalCount", a.trade_no AS "tradeNo" FROM sys_order a WHERE a.order_no = #{sqlMap.where#order_no#EQ1} ORDER BY a.update_date DESC
2019-07-09 09:36:00.963 DEBUG 4592 [nio-8980-exec-1] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@6e5df971] will not be managed by Spring
2019-07-09 09:36:00.964 DEBUG 4592 [nio-8980-exec-1] [c.j.modules.app.dao.OrderDao.findList  ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.product_count AS "productCount", a.total_price AS "totalPrice", a.logistics_price AS "logisticsPrice", a.discount_price AS "discountPrice", a.really_price AS "reallyPrice", a.pay_channel AS "payChannel", a.out_trade_no AS "outTradeNo", a.create_date AS "createDate", a.update_date AS "updateDate", a.create_by AS "createBy", a.update_by AS "updateBy", a.pay_date AS "payDate", a.user_id AS "userId", a.address_id AS "addressId", a.logistics_id AS "logisticsId", a.delivery_date AS "deliveryDate", a.del_flag AS "delFlag", a.delivery_name AS "deliveryName", a.delivery_address AS "deliveryAddress", a.delivery_phone AS "deliveryPhone", a.total_count AS "totalCount", a.trade_no AS "tradeNo" FROM sys_order a WHERE a.order_no = ? ORDER BY a.update_date DESC 
2019-07-09 09:36:00.964 DEBUG 4592 [nio-8980-exec-1] [c.j.modules.app.dao.OrderDao.findList  ] - ==> Parameters: 070909360109901(String)
2019-07-09 09:36:00.991 DEBUG 4592 [nio-8980-exec-1] [c.j.modules.app.dao.OrderDao.findList  ] - <==      Total: 0
2019-07-09 09:36:00.993 DEBUG 4592 [nio-8980-exec-1] [c.j.c.m.m.provider.SelectSqlProvider   ] - 1毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", dd.id AS "userInfo.id", dd.mobile AS "userInfo.mobile", dd.password AS "userInfo.password", dd.icon AS "userInfo.icon", dd.regtime AS "userInfo.regtime", dd.lastlogin AS "userInfo.lastlogin", dd.islock AS "userInfo.islock", dd.isauthentication AS "userInfo.isauthentication", dd.type AS "userInfo.type", dd.create_by AS "userInfo.createBy", dd.create_date AS "userInfo.createDate", dd.update_by AS "userInfo.updateBy", dd.update_date AS "userInfo.updateDate", dd.remarks AS "userInfo.remarks", dd.del_flag AS "userInfo.delFlag", dd.nike_name AS "userInfo.nikeName", dd.is_invite AS "userInfo.isInvite", dd.third_id AS "userInfo.thirdId", dd.third_type AS "userInfo.thirdType", dd.third_icon AS "userInfo.thirdIcon", dd.member_lv AS "userInfo.memberLv", dd.member_flag AS "userInfo.memberFlag", dd.member_start AS "userInfo.memberStart", dd.member_end AS "userInfo.memberEnd", di.id AS "doctorInfos.id", di.doctorid AS "doctorInfos.doctorid", di.doctornum AS "doctorInfos.doctornum", di.name AS "doctorInfos.name", di.sex AS "doctorInfos.sex", di.age AS "doctorInfos.age", di.telephone AS "doctorInfos.telephone", di.idcard AS "doctorInfos.idcard", di.adress AS "doctorInfos.adress", di.technical AS "doctorInfos.technical", di.classify AS "doctorInfos.classify", di.introduce AS "doctorInfos.introduce", di.create_by AS "doctorInfos.createBy", di.cost AS "doctorInfos.cost", di.create_date AS "doctorInfos.createDate", di.update_by AS "doctorInfos.updateBy", di.update_date AS "doctorInfos.updateDate", di.remarks AS "doctorInfos.remarks", di.del_flag AS "doctorInfos.delFlag", di.cityid AS "doctorInfos.cityid", di.come_flag AS "doctorInfos.comeFlag", di.come_cost AS "doctorInfos.comeCost", di.own_flag AS "doctorInfos.ownFlag", di.first_count AS "doctorInfos.firstCount", di.star_lv AS "doctorInfos.starLv" FROM sys_tiaoli_order a LEFT JOIN sys_user_info dd ON a.userid = dd.id LEFT JOIN sys_doctor_info di ON a.docid = di.doctorid WHERE a.order_no = #{sqlMap.where#order_no#EQ1} ORDER BY a.create_date DESC
2019-07-09 09:36:00.994 DEBUG 4592 [nio-8980-exec-1] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@6e5df971] will not be managed by Spring
2019-07-09 09:36:00.994 DEBUG 4592 [nio-8980-exec-1] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", dd.id AS "userInfo.id", dd.mobile AS "userInfo.mobile", dd.password AS "userInfo.password", dd.icon AS "userInfo.icon", dd.regtime AS "userInfo.regtime", dd.lastlogin AS "userInfo.lastlogin", dd.islock AS "userInfo.islock", dd.isauthentication AS "userInfo.isauthentication", dd.type AS "userInfo.type", dd.create_by AS "userInfo.createBy", dd.create_date AS "userInfo.createDate", dd.update_by AS "userInfo.updateBy", dd.update_date AS "userInfo.updateDate", dd.remarks AS "userInfo.remarks", dd.del_flag AS "userInfo.delFlag", dd.nike_name AS "userInfo.nikeName", dd.is_invite AS "userInfo.isInvite", dd.third_id AS "userInfo.thirdId", dd.third_type AS "userInfo.thirdType", dd.third_icon AS "userInfo.thirdIcon", dd.member_lv AS "userInfo.memberLv", dd.member_flag AS "userInfo.memberFlag", dd.member_start AS "userInfo.memberStart", dd.member_end AS "userInfo.memberEnd", di.id AS "doctorInfos.id", di.doctorid AS "doctorInfos.doctorid", di.doctornum AS "doctorInfos.doctornum", di.name AS "doctorInfos.name", di.sex AS "doctorInfos.sex", di.age AS "doctorInfos.age", di.telephone AS "doctorInfos.telephone", di.idcard AS "doctorInfos.idcard", di.adress AS "doctorInfos.adress", di.technical AS "doctorInfos.technical", di.classify AS "doctorInfos.classify", di.introduce AS "doctorInfos.introduce", di.create_by AS "doctorInfos.createBy", di.cost AS "doctorInfos.cost", di.create_date AS "doctorInfos.createDate", di.update_by AS "doctorInfos.updateBy", di.update_date AS "doctorInfos.updateDate", di.remarks AS "doctorInfos.remarks", di.del_flag AS "doctorInfos.delFlag", di.cityid AS "doctorInfos.cityid", di.come_flag AS "doctorInfos.comeFlag", di.come_cost AS "doctorInfos.comeCost", di.own_flag AS "doctorInfos.ownFlag", di.first_count AS "doctorInfos.firstCount", di.star_lv AS "doctorInfos.starLv" FROM sys_tiaoli_order a LEFT JOIN sys_user_info dd ON a.userid = dd.id LEFT JOIN sys_doctor_info di ON a.docid = di.doctorid WHERE a.order_no = ? ORDER BY a.create_date DESC 
2019-07-09 09:36:00.995 DEBUG 4592 [nio-8980-exec-1] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - ==> Parameters: 070909360109901(String)
2019-07-09 09:36:01.024 DEBUG 4592 [nio-8980-exec-1] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - <==      Total: 1
2019-07-09 09:36:01.025 DEBUG 4592 [nio-8980-exec-1] [c.j.c.m.m.provider.SelectSqlProvider   ] - 0毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", dd.id AS "userInfo.id", dd.mobile AS "userInfo.mobile", dd.password AS "userInfo.password", dd.icon AS "userInfo.icon", dd.regtime AS "userInfo.regtime", dd.lastlogin AS "userInfo.lastlogin", dd.islock AS "userInfo.islock", dd.isauthentication AS "userInfo.isauthentication", dd.type AS "userInfo.type", dd.create_by AS "userInfo.createBy", dd.create_date AS "userInfo.createDate", dd.update_by AS "userInfo.updateBy", dd.update_date AS "userInfo.updateDate", dd.remarks AS "userInfo.remarks", dd.del_flag AS "userInfo.delFlag", dd.nike_name AS "userInfo.nikeName", dd.is_invite AS "userInfo.isInvite", dd.third_id AS "userInfo.thirdId", dd.third_type AS "userInfo.thirdType", dd.third_icon AS "userInfo.thirdIcon", dd.member_lv AS "userInfo.memberLv", dd.member_flag AS "userInfo.memberFlag", dd.member_start AS "userInfo.memberStart", dd.member_end AS "userInfo.memberEnd", di.id AS "doctorInfos.id", di.doctorid AS "doctorInfos.doctorid", di.doctornum AS "doctorInfos.doctornum", di.name AS "doctorInfos.name", di.sex AS "doctorInfos.sex", di.age AS "doctorInfos.age", di.telephone AS "doctorInfos.telephone", di.idcard AS "doctorInfos.idcard", di.adress AS "doctorInfos.adress", di.technical AS "doctorInfos.technical", di.classify AS "doctorInfos.classify", di.introduce AS "doctorInfos.introduce", di.create_by AS "doctorInfos.createBy", di.cost AS "doctorInfos.cost", di.create_date AS "doctorInfos.createDate", di.update_by AS "doctorInfos.updateBy", di.update_date AS "doctorInfos.updateDate", di.remarks AS "doctorInfos.remarks", di.del_flag AS "doctorInfos.delFlag", di.cityid AS "doctorInfos.cityid", di.come_flag AS "doctorInfos.comeFlag", di.come_cost AS "doctorInfos.comeCost", di.own_flag AS "doctorInfos.ownFlag", di.first_count AS "doctorInfos.firstCount", di.star_lv AS "doctorInfos.starLv" FROM sys_tiaoli_order a LEFT JOIN sys_user_info dd ON a.userid = dd.id LEFT JOIN sys_doctor_info di ON a.docid = di.doctorid WHERE a.order_no = #{sqlMap.where#order_no#EQ1} ORDER BY a.create_date DESC
2019-07-09 09:36:01.026 DEBUG 4592 [nio-8980-exec-1] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@6e5df971] will not be managed by Spring
2019-07-09 09:36:01.026 DEBUG 4592 [nio-8980-exec-1] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", dd.id AS "userInfo.id", dd.mobile AS "userInfo.mobile", dd.password AS "userInfo.password", dd.icon AS "userInfo.icon", dd.regtime AS "userInfo.regtime", dd.lastlogin AS "userInfo.lastlogin", dd.islock AS "userInfo.islock", dd.isauthentication AS "userInfo.isauthentication", dd.type AS "userInfo.type", dd.create_by AS "userInfo.createBy", dd.create_date AS "userInfo.createDate", dd.update_by AS "userInfo.updateBy", dd.update_date AS "userInfo.updateDate", dd.remarks AS "userInfo.remarks", dd.del_flag AS "userInfo.delFlag", dd.nike_name AS "userInfo.nikeName", dd.is_invite AS "userInfo.isInvite", dd.third_id AS "userInfo.thirdId", dd.third_type AS "userInfo.thirdType", dd.third_icon AS "userInfo.thirdIcon", dd.member_lv AS "userInfo.memberLv", dd.member_flag AS "userInfo.memberFlag", dd.member_start AS "userInfo.memberStart", dd.member_end AS "userInfo.memberEnd", di.id AS "doctorInfos.id", di.doctorid AS "doctorInfos.doctorid", di.doctornum AS "doctorInfos.doctornum", di.name AS "doctorInfos.name", di.sex AS "doctorInfos.sex", di.age AS "doctorInfos.age", di.telephone AS "doctorInfos.telephone", di.idcard AS "doctorInfos.idcard", di.adress AS "doctorInfos.adress", di.technical AS "doctorInfos.technical", di.classify AS "doctorInfos.classify", di.introduce AS "doctorInfos.introduce", di.create_by AS "doctorInfos.createBy", di.cost AS "doctorInfos.cost", di.create_date AS "doctorInfos.createDate", di.update_by AS "doctorInfos.updateBy", di.update_date AS "doctorInfos.updateDate", di.remarks AS "doctorInfos.remarks", di.del_flag AS "doctorInfos.delFlag", di.cityid AS "doctorInfos.cityid", di.come_flag AS "doctorInfos.comeFlag", di.come_cost AS "doctorInfos.comeCost", di.own_flag AS "doctorInfos.ownFlag", di.first_count AS "doctorInfos.firstCount", di.star_lv AS "doctorInfos.starLv" FROM sys_tiaoli_order a LEFT JOIN sys_user_info dd ON a.userid = dd.id LEFT JOIN sys_doctor_info di ON a.docid = di.doctorid WHERE a.order_no = ? ORDER BY a.create_date DESC 
2019-07-09 09:36:01.027 DEBUG 4592 [nio-8980-exec-1] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - ==> Parameters: 070909360109901(String)
2019-07-09 09:36:01.055 DEBUG 4592 [nio-8980-exec-1] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - <==      Total: 1
2019-07-09 09:36:01.056 DEBUG 4592 [nio-8980-exec-1] [c.j.c.m.m.provider.SelectSqlProvider   ] - 1毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.total_price AS "totalPrice", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag" FROM sys_member_order a WHERE a.order_no = #{sqlMap.where#order_no#EQ1} ORDER BY a.update_date DESC
2019-07-09 09:36:01.056 DEBUG 4592 [nio-8980-exec-1] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@6e5df971] will not be managed by Spring
2019-07-09 09:36:01.056 DEBUG 4592 [nio-8980-exec-1] [c.j.m.app.dao.MemberOrderDao.findList  ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.total_price AS "totalPrice", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag" FROM sys_member_order a WHERE a.order_no = ? ORDER BY a.update_date DESC 
2019-07-09 09:36:01.057 DEBUG 4592 [nio-8980-exec-1] [c.j.m.app.dao.MemberOrderDao.findList  ] - ==> Parameters: 070909360109901(String)
2019-07-09 09:36:01.080 DEBUG 4592 [nio-8980-exec-1] [c.j.m.app.dao.MemberOrderDao.findList  ] - <==      Total: 0
2019-07-09 09:36:01.081 DEBUG 4592 [nio-8980-exec-1] [c.j.c.m.m.provider.SelectSqlProvider   ] - 0毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.total_price AS "totalPrice", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", a.doctor_user_id AS "doctorUserId" FROM sys_doctor_register_order a WHERE a.order_no = #{sqlMap.where#order_no#EQ1} ORDER BY a.update_date DESC
2019-07-09 09:36:01.082 DEBUG 4592 [nio-8980-exec-1] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@6e5df971] will not be managed by Spring
2019-07-09 09:36:01.082 DEBUG 4592 [nio-8980-exec-1] [c.j.m.a.d.D.findList                   ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.total_price AS "totalPrice", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", a.doctor_user_id AS "doctorUserId" FROM sys_doctor_register_order a WHERE a.order_no = ? ORDER BY a.update_date DESC 
2019-07-09 09:36:01.082 DEBUG 4592 [nio-8980-exec-1] [c.j.m.a.d.D.findList                   ] - ==> Parameters: 070909360109901(String)
2019-07-09 09:36:01.106 DEBUG 4592 [nio-8980-exec-1] [c.j.m.a.d.D.findList                   ] - <==      Total: 0
2019-07-09 09:36:01.107 DEBUG 4592 [nio-8980-exec-1] [c.j.c.m.m.provider.SelectSqlProvider   ] - 0毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag" FROM sys_dashang_order a WHERE a.order_no = #{sqlMap.where#order_no#EQ1} ORDER BY a.update_date DESC
2019-07-09 09:36:01.108 DEBUG 4592 [nio-8980-exec-1] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@6e5df971] will not be managed by Spring
2019-07-09 09:36:01.108 DEBUG 4592 [nio-8980-exec-1] [c.j.m.app.dao.DashangOrderDao.findList ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag" FROM sys_dashang_order a WHERE a.order_no = ? ORDER BY a.update_date DESC 
2019-07-09 09:36:01.108 DEBUG 4592 [nio-8980-exec-1] [c.j.m.app.dao.DashangOrderDao.findList ] - ==> Parameters: 070909360109901(String)
2019-07-09 09:36:01.131 DEBUG 4592 [nio-8980-exec-1] [c.j.m.app.dao.DashangOrderDao.findList ] - <==      Total: 0
2019-07-09 09:36:01.155 DEBUG 4592 [nio-8980-exec-1] [c.j.c.m.m.provider.UpdateSqlProvider   ] - 0毫秒: UPDATE sys_tiaoli_order SET `order_no` = #{orderNo}, `order_status` = #{orderStatus}, `count` = #{count}, `total_price` = #{totalPrice}, `come_cost` = #{comeCost}, `docid` = #{docid}, `userid` = #{userid}, `update_date` = #{updateDate}, `out_trade_no` = #{outTradeNo}, `del_flag` = #{delFlag} WHERE `id` = #{id}
2019-07-09 09:36:01.156 DEBUG 4592 [nio-8980-exec-1] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@6e5df971] will be managed by Spring
2019-07-09 09:36:01.156 DEBUG 4592 [nio-8980-exec-1] [c.j.m.app.dao.TiaoliOrderDao.update    ] - ==>  Preparing: UPDATE sys_tiaoli_order SET `order_no` = ?, `order_status` = ?, `count` = ?, `total_price` = ?, `come_cost` = ?, `docid` = ?, `userid` = ?, `update_date` = ?, `out_trade_no` = ?, `del_flag` = ? WHERE `id` = ? 
2019-07-09 09:36:01.157 DEBUG 4592 [nio-8980-exec-1] [c.j.m.app.dao.TiaoliOrderDao.update    ] - ==> Parameters: 070909360109901(String), 0(String), 1(String), 1000(String), 1000(String), 0f2067603f1111e99752bcaec5595fa3(String), 32c6e1204fad11e9b780fa163e609e56(String), 2019-07-09 09:36:01.0(Timestamp), 201907099360000001(String), 0(String), 1148405411527516160(String)
2019-07-09 09:36:01.204 DEBUG 4592 [nio-8980-exec-1] [c.j.m.app.dao.TiaoliOrderDao.update    ] - <==    Updates: 1
2019-07-09 09:36:08.357 DEBUG 4592 [nio-8980-exec-3] [c.jeesite.modules.app.utils.AlipayUtil ] - 将要存入数据库的参数0.01,201907099360000001,2019070922001497451057455218,
2019-07-09 09:36:08.359 DEBUG 4592 [nio-8980-exec-3] [c.j.c.m.m.provider.SelectSqlProvider   ] - 1毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.product_count AS "productCount", a.total_price AS "totalPrice", a.logistics_price AS "logisticsPrice", a.discount_price AS "discountPrice", a.really_price AS "reallyPrice", a.pay_channel AS "payChannel", a.out_trade_no AS "outTradeNo", a.create_date AS "createDate", a.update_date AS "updateDate", a.create_by AS "createBy", a.update_by AS "updateBy", a.pay_date AS "payDate", a.user_id AS "userId", a.address_id AS "addressId", a.logistics_id AS "logisticsId", a.delivery_date AS "deliveryDate", a.del_flag AS "delFlag", a.delivery_name AS "deliveryName", a.delivery_address AS "deliveryAddress", a.delivery_phone AS "deliveryPhone", a.total_count AS "totalCount", a.trade_no AS "tradeNo" FROM sys_order a WHERE a.out_trade_no = #{sqlMap.where#out_trade_no#EQ1} ORDER BY a.update_date DESC
2019-07-09 09:36:08.360 DEBUG 4592 [nio-8980-exec-3] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@6e5df971] will not be managed by Spring
2019-07-09 09:36:08.361 DEBUG 4592 [nio-8980-exec-3] [c.j.modules.app.dao.OrderDao.findList  ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.product_count AS "productCount", a.total_price AS "totalPrice", a.logistics_price AS "logisticsPrice", a.discount_price AS "discountPrice", a.really_price AS "reallyPrice", a.pay_channel AS "payChannel", a.out_trade_no AS "outTradeNo", a.create_date AS "createDate", a.update_date AS "updateDate", a.create_by AS "createBy", a.update_by AS "updateBy", a.pay_date AS "payDate", a.user_id AS "userId", a.address_id AS "addressId", a.logistics_id AS "logisticsId", a.delivery_date AS "deliveryDate", a.del_flag AS "delFlag", a.delivery_name AS "deliveryName", a.delivery_address AS "deliveryAddress", a.delivery_phone AS "deliveryPhone", a.total_count AS "totalCount", a.trade_no AS "tradeNo" FROM sys_order a WHERE a.out_trade_no = ? ORDER BY a.update_date DESC 
2019-07-09 09:36:08.362 DEBUG 4592 [nio-8980-exec-3] [c.j.modules.app.dao.OrderDao.findList  ] - ==> Parameters: 201907099360000001(String)
2019-07-09 09:36:08.386 DEBUG 4592 [nio-8980-exec-3] [c.j.modules.app.dao.OrderDao.findList  ] - <==      Total: 0
2019-07-09 09:36:08.387 DEBUG 4592 [nio-8980-exec-3] [c.j.c.m.m.provider.SelectSqlProvider   ] - 0毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", dd.id AS "userInfo.id", dd.mobile AS "userInfo.mobile", dd.password AS "userInfo.password", dd.icon AS "userInfo.icon", dd.regtime AS "userInfo.regtime", dd.lastlogin AS "userInfo.lastlogin", dd.islock AS "userInfo.islock", dd.isauthentication AS "userInfo.isauthentication", dd.type AS "userInfo.type", dd.create_by AS "userInfo.createBy", dd.create_date AS "userInfo.createDate", dd.update_by AS "userInfo.updateBy", dd.update_date AS "userInfo.updateDate", dd.remarks AS "userInfo.remarks", dd.del_flag AS "userInfo.delFlag", dd.nike_name AS "userInfo.nikeName", dd.is_invite AS "userInfo.isInvite", dd.third_id AS "userInfo.thirdId", dd.third_type AS "userInfo.thirdType", dd.third_icon AS "userInfo.thirdIcon", dd.member_lv AS "userInfo.memberLv", dd.member_flag AS "userInfo.memberFlag", dd.member_start AS "userInfo.memberStart", dd.member_end AS "userInfo.memberEnd", di.id AS "doctorInfos.id", di.doctorid AS "doctorInfos.doctorid", di.doctornum AS "doctorInfos.doctornum", di.name AS "doctorInfos.name", di.sex AS "doctorInfos.sex", di.age AS "doctorInfos.age", di.telephone AS "doctorInfos.telephone", di.idcard AS "doctorInfos.idcard", di.adress AS "doctorInfos.adress", di.technical AS "doctorInfos.technical", di.classify AS "doctorInfos.classify", di.introduce AS "doctorInfos.introduce", di.create_by AS "doctorInfos.createBy", di.cost AS "doctorInfos.cost", di.create_date AS "doctorInfos.createDate", di.update_by AS "doctorInfos.updateBy", di.update_date AS "doctorInfos.updateDate", di.remarks AS "doctorInfos.remarks", di.del_flag AS "doctorInfos.delFlag", di.cityid AS "doctorInfos.cityid", di.come_flag AS "doctorInfos.comeFlag", di.come_cost AS "doctorInfos.comeCost", di.own_flag AS "doctorInfos.ownFlag", di.first_count AS "doctorInfos.firstCount", di.star_lv AS "doctorInfos.starLv" FROM sys_tiaoli_order a LEFT JOIN sys_user_info dd ON a.userid = dd.id LEFT JOIN sys_doctor_info di ON a.docid = di.doctorid WHERE a.out_trade_no = #{sqlMap.where#out_trade_no#EQ1} ORDER BY a.create_date DESC
2019-07-09 09:36:08.388 DEBUG 4592 [nio-8980-exec-3] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@6e5df971] will not be managed by Spring
2019-07-09 09:36:08.389 DEBUG 4592 [nio-8980-exec-3] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", dd.id AS "userInfo.id", dd.mobile AS "userInfo.mobile", dd.password AS "userInfo.password", dd.icon AS "userInfo.icon", dd.regtime AS "userInfo.regtime", dd.lastlogin AS "userInfo.lastlogin", dd.islock AS "userInfo.islock", dd.isauthentication AS "userInfo.isauthentication", dd.type AS "userInfo.type", dd.create_by AS "userInfo.createBy", dd.create_date AS "userInfo.createDate", dd.update_by AS "userInfo.updateBy", dd.update_date AS "userInfo.updateDate", dd.remarks AS "userInfo.remarks", dd.del_flag AS "userInfo.delFlag", dd.nike_name AS "userInfo.nikeName", dd.is_invite AS "userInfo.isInvite", dd.third_id AS "userInfo.thirdId", dd.third_type AS "userInfo.thirdType", dd.third_icon AS "userInfo.thirdIcon", dd.member_lv AS "userInfo.memberLv", dd.member_flag AS "userInfo.memberFlag", dd.member_start AS "userInfo.memberStart", dd.member_end AS "userInfo.memberEnd", di.id AS "doctorInfos.id", di.doctorid AS "doctorInfos.doctorid", di.doctornum AS "doctorInfos.doctornum", di.name AS "doctorInfos.name", di.sex AS "doctorInfos.sex", di.age AS "doctorInfos.age", di.telephone AS "doctorInfos.telephone", di.idcard AS "doctorInfos.idcard", di.adress AS "doctorInfos.adress", di.technical AS "doctorInfos.technical", di.classify AS "doctorInfos.classify", di.introduce AS "doctorInfos.introduce", di.create_by AS "doctorInfos.createBy", di.cost AS "doctorInfos.cost", di.create_date AS "doctorInfos.createDate", di.update_by AS "doctorInfos.updateBy", di.update_date AS "doctorInfos.updateDate", di.remarks AS "doctorInfos.remarks", di.del_flag AS "doctorInfos.delFlag", di.cityid AS "doctorInfos.cityid", di.come_flag AS "doctorInfos.comeFlag", di.come_cost AS "doctorInfos.comeCost", di.own_flag AS "doctorInfos.ownFlag", di.first_count AS "doctorInfos.firstCount", di.star_lv AS "doctorInfos.starLv" FROM sys_tiaoli_order a LEFT JOIN sys_user_info dd ON a.userid = dd.id LEFT JOIN sys_doctor_info di ON a.docid = di.doctorid WHERE a.out_trade_no = ? ORDER BY a.create_date DESC 
2019-07-09 09:36:08.389 DEBUG 4592 [nio-8980-exec-3] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - ==> Parameters: 201907099360000001(String)
2019-07-09 09:36:08.418 DEBUG 4592 [nio-8980-exec-3] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - <==      Total: 1
2019-07-09 09:36:08.419 DEBUG 4592 [nio-8980-exec-3] [c.j.c.m.m.provider.SelectSqlProvider   ] - 1毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", dd.id AS "userInfo.id", dd.mobile AS "userInfo.mobile", dd.password AS "userInfo.password", dd.icon AS "userInfo.icon", dd.regtime AS "userInfo.regtime", dd.lastlogin AS "userInfo.lastlogin", dd.islock AS "userInfo.islock", dd.isauthentication AS "userInfo.isauthentication", dd.type AS "userInfo.type", dd.create_by AS "userInfo.createBy", dd.create_date AS "userInfo.createDate", dd.update_by AS "userInfo.updateBy", dd.update_date AS "userInfo.updateDate", dd.remarks AS "userInfo.remarks", dd.del_flag AS "userInfo.delFlag", dd.nike_name AS "userInfo.nikeName", dd.is_invite AS "userInfo.isInvite", dd.third_id AS "userInfo.thirdId", dd.third_type AS "userInfo.thirdType", dd.third_icon AS "userInfo.thirdIcon", dd.member_lv AS "userInfo.memberLv", dd.member_flag AS "userInfo.memberFlag", dd.member_start AS "userInfo.memberStart", dd.member_end AS "userInfo.memberEnd", di.id AS "doctorInfos.id", di.doctorid AS "doctorInfos.doctorid", di.doctornum AS "doctorInfos.doctornum", di.name AS "doctorInfos.name", di.sex AS "doctorInfos.sex", di.age AS "doctorInfos.age", di.telephone AS "doctorInfos.telephone", di.idcard AS "doctorInfos.idcard", di.adress AS "doctorInfos.adress", di.technical AS "doctorInfos.technical", di.classify AS "doctorInfos.classify", di.introduce AS "doctorInfos.introduce", di.create_by AS "doctorInfos.createBy", di.cost AS "doctorInfos.cost", di.create_date AS "doctorInfos.createDate", di.update_by AS "doctorInfos.updateBy", di.update_date AS "doctorInfos.updateDate", di.remarks AS "doctorInfos.remarks", di.del_flag AS "doctorInfos.delFlag", di.cityid AS "doctorInfos.cityid", di.come_flag AS "doctorInfos.comeFlag", di.come_cost AS "doctorInfos.comeCost", di.own_flag AS "doctorInfos.ownFlag", di.first_count AS "doctorInfos.firstCount", di.star_lv AS "doctorInfos.starLv" FROM sys_tiaoli_order a LEFT JOIN sys_user_info dd ON a.userid = dd.id LEFT JOIN sys_doctor_info di ON a.docid = di.doctorid WHERE a.out_trade_no = #{sqlMap.where#out_trade_no#EQ1} ORDER BY a.create_date DESC
2019-07-09 09:36:08.419 DEBUG 4592 [nio-8980-exec-3] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@6e5df971] will not be managed by Spring
2019-07-09 09:36:08.420 DEBUG 4592 [nio-8980-exec-3] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", dd.id AS "userInfo.id", dd.mobile AS "userInfo.mobile", dd.password AS "userInfo.password", dd.icon AS "userInfo.icon", dd.regtime AS "userInfo.regtime", dd.lastlogin AS "userInfo.lastlogin", dd.islock AS "userInfo.islock", dd.isauthentication AS "userInfo.isauthentication", dd.type AS "userInfo.type", dd.create_by AS "userInfo.createBy", dd.create_date AS "userInfo.createDate", dd.update_by AS "userInfo.updateBy", dd.update_date AS "userInfo.updateDate", dd.remarks AS "userInfo.remarks", dd.del_flag AS "userInfo.delFlag", dd.nike_name AS "userInfo.nikeName", dd.is_invite AS "userInfo.isInvite", dd.third_id AS "userInfo.thirdId", dd.third_type AS "userInfo.thirdType", dd.third_icon AS "userInfo.thirdIcon", dd.member_lv AS "userInfo.memberLv", dd.member_flag AS "userInfo.memberFlag", dd.member_start AS "userInfo.memberStart", dd.member_end AS "userInfo.memberEnd", di.id AS "doctorInfos.id", di.doctorid AS "doctorInfos.doctorid", di.doctornum AS "doctorInfos.doctornum", di.name AS "doctorInfos.name", di.sex AS "doctorInfos.sex", di.age AS "doctorInfos.age", di.telephone AS "doctorInfos.telephone", di.idcard AS "doctorInfos.idcard", di.adress AS "doctorInfos.adress", di.technical AS "doctorInfos.technical", di.classify AS "doctorInfos.classify", di.introduce AS "doctorInfos.introduce", di.create_by AS "doctorInfos.createBy", di.cost AS "doctorInfos.cost", di.create_date AS "doctorInfos.createDate", di.update_by AS "doctorInfos.updateBy", di.update_date AS "doctorInfos.updateDate", di.remarks AS "doctorInfos.remarks", di.del_flag AS "doctorInfos.delFlag", di.cityid AS "doctorInfos.cityid", di.come_flag AS "doctorInfos.comeFlag", di.come_cost AS "doctorInfos.comeCost", di.own_flag AS "doctorInfos.ownFlag", di.first_count AS "doctorInfos.firstCount", di.star_lv AS "doctorInfos.starLv" FROM sys_tiaoli_order a LEFT JOIN sys_user_info dd ON a.userid = dd.id LEFT JOIN sys_doctor_info di ON a.docid = di.doctorid WHERE a.out_trade_no = ? ORDER BY a.create_date DESC 
2019-07-09 09:36:08.420 DEBUG 4592 [nio-8980-exec-3] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - ==> Parameters: 201907099360000001(String)
2019-07-09 09:36:08.448 DEBUG 4592 [nio-8980-exec-3] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - <==      Total: 1
2019-07-09 09:36:08.449 DEBUG 4592 [nio-8980-exec-3] [c.j.c.m.m.provider.SelectSqlProvider   ] - 0毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.total_price AS "totalPrice", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag" FROM sys_member_order a WHERE a.out_trade_no = #{sqlMap.where#out_trade_no#EQ1} ORDER BY a.update_date DESC
2019-07-09 09:36:08.450 DEBUG 4592 [nio-8980-exec-3] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@6e5df971] will not be managed by Spring
2019-07-09 09:36:08.450 DEBUG 4592 [nio-8980-exec-3] [c.j.m.app.dao.MemberOrderDao.findList  ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.total_price AS "totalPrice", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag" FROM sys_member_order a WHERE a.out_trade_no = ? ORDER BY a.update_date DESC 
2019-07-09 09:36:08.451 DEBUG 4592 [nio-8980-exec-3] [c.j.m.app.dao.MemberOrderDao.findList  ] - ==> Parameters: 201907099360000001(String)
2019-07-09 09:36:08.475 DEBUG 4592 [nio-8980-exec-3] [c.j.m.app.dao.MemberOrderDao.findList  ] - <==      Total: 0
2019-07-09 09:36:08.475 DEBUG 4592 [nio-8980-exec-3] [c.j.c.m.m.provider.SelectSqlProvider   ] - 0毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.total_price AS "totalPrice", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", a.doctor_user_id AS "doctorUserId" FROM sys_doctor_register_order a WHERE a.out_trade_no = #{sqlMap.where#out_trade_no#EQ1} ORDER BY a.update_date DESC
2019-07-09 09:36:08.476 DEBUG 4592 [nio-8980-exec-3] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@6e5df971] will not be managed by Spring
2019-07-09 09:36:08.476 DEBUG 4592 [nio-8980-exec-3] [c.j.m.a.d.D.findList                   ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.total_price AS "totalPrice", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", a.doctor_user_id AS "doctorUserId" FROM sys_doctor_register_order a WHERE a.out_trade_no = ? ORDER BY a.update_date DESC 
2019-07-09 09:36:08.476 DEBUG 4592 [nio-8980-exec-3] [c.j.m.a.d.D.findList                   ] - ==> Parameters: 201907099360000001(String)
2019-07-09 09:36:08.500 DEBUG 4592 [nio-8980-exec-3] [c.j.m.a.d.D.findList                   ] - <==      Total: 0
2019-07-09 09:36:08.501 DEBUG 4592 [nio-8980-exec-3] [c.j.c.m.m.provider.SelectSqlProvider   ] - 0毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag" FROM sys_dashang_order a WHERE a.out_trade_no = #{sqlMap.where#out_trade_no#EQ1} ORDER BY a.update_date DESC
2019-07-09 09:36:08.501 DEBUG 4592 [nio-8980-exec-3] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@6e5df971] will not be managed by Spring
2019-07-09 09:36:08.502 DEBUG 4592 [nio-8980-exec-3] [c.j.m.app.dao.DashangOrderDao.findList ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag" FROM sys_dashang_order a WHERE a.out_trade_no = ? ORDER BY a.update_date DESC 
2019-07-09 09:36:08.502 DEBUG 4592 [nio-8980-exec-3] [c.j.m.app.dao.DashangOrderDao.findList ] - ==> Parameters: 201907099360000001(String)
2019-07-09 09:36:08.526 DEBUG 4592 [nio-8980-exec-3] [c.j.m.app.dao.DashangOrderDao.findList ] - <==      Total: 0
2019-07-09 09:36:08.552 DEBUG 4592 [nio-8980-exec-3] [c.j.c.m.m.provider.UpdateSqlProvider   ] - 0毫秒: UPDATE sys_tiaoli_order SET `order_no` = #{orderNo}, `order_status` = #{orderStatus}, `count` = #{count}, `total_price` = #{totalPrice}, `come_cost` = #{comeCost}, `docid` = #{docid}, `userid` = #{userid}, `update_date` = #{updateDate}, `out_trade_no` = #{outTradeNo}, `pay_date` = #{payDate}, `pay_channel` = #{payChannel}, `del_flag` = #{delFlag} WHERE `id` = #{id}
2019-07-09 09:36:08.552 DEBUG 4592 [nio-8980-exec-3] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@6e5df971] will be managed by Spring
2019-07-09 09:36:08.553 DEBUG 4592 [nio-8980-exec-3] [c.j.m.app.dao.TiaoliOrderDao.update    ] - ==>  Preparing: UPDATE sys_tiaoli_order SET `order_no` = ?, `order_status` = ?, `count` = ?, `total_price` = ?, `come_cost` = ?, `docid` = ?, `userid` = ?, `update_date` = ?, `out_trade_no` = ?, `pay_date` = ?, `pay_channel` = ?, `del_flag` = ? WHERE `id` = ? 
2019-07-09 09:36:08.554 DEBUG 4592 [nio-8980-exec-3] [c.j.m.app.dao.TiaoliOrderDao.update    ] - ==> Parameters: 070909360109901(String), 1(String), 1(String), 1000(String), 1000(String), 0f2067603f1111e99752bcaec5595fa3(String), 32c6e1204fad11e9b780fa163e609e56(String), 2019-07-09 09:36:01.0(Timestamp), 201907099360000001(String), 2019-07-09 09:36:08.527(Timestamp), 支付宝(String), 0(String), 1148405411527516160(String)
2019-07-09 09:36:08.601 DEBUG 4592 [nio-8980-exec-3] [c.j.m.app.dao.TiaoliOrderDao.update    ] - <==    Updates: 1
2019-07-09 09:39:21.687 DEBUG 4592 [nio-8980-exec-7] [c.jeesite.modules.app.utils.AlipayUtil ] - 将要存入数据库的参数0.01,201907099360000001,2019070922001497451057455218,
2019-07-09 09:39:21.688 DEBUG 4592 [nio-8980-exec-7] [c.j.c.m.m.provider.SelectSqlProvider   ] - 0毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.product_count AS "productCount", a.total_price AS "totalPrice", a.logistics_price AS "logisticsPrice", a.discount_price AS "discountPrice", a.really_price AS "reallyPrice", a.pay_channel AS "payChannel", a.out_trade_no AS "outTradeNo", a.create_date AS "createDate", a.update_date AS "updateDate", a.create_by AS "createBy", a.update_by AS "updateBy", a.pay_date AS "payDate", a.user_id AS "userId", a.address_id AS "addressId", a.logistics_id AS "logisticsId", a.delivery_date AS "deliveryDate", a.del_flag AS "delFlag", a.delivery_name AS "deliveryName", a.delivery_address AS "deliveryAddress", a.delivery_phone AS "deliveryPhone", a.total_count AS "totalCount", a.trade_no AS "tradeNo" FROM sys_order a WHERE a.out_trade_no = #{sqlMap.where#out_trade_no#EQ1} ORDER BY a.update_date DESC
2019-07-09 09:39:21.712 DEBUG 4592 [nio-8980-exec-7] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@6e5df971] will not be managed by Spring
2019-07-09 09:39:21.712 DEBUG 4592 [nio-8980-exec-7] [c.j.modules.app.dao.OrderDao.findList  ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.product_count AS "productCount", a.total_price AS "totalPrice", a.logistics_price AS "logisticsPrice", a.discount_price AS "discountPrice", a.really_price AS "reallyPrice", a.pay_channel AS "payChannel", a.out_trade_no AS "outTradeNo", a.create_date AS "createDate", a.update_date AS "updateDate", a.create_by AS "createBy", a.update_by AS "updateBy", a.pay_date AS "payDate", a.user_id AS "userId", a.address_id AS "addressId", a.logistics_id AS "logisticsId", a.delivery_date AS "deliveryDate", a.del_flag AS "delFlag", a.delivery_name AS "deliveryName", a.delivery_address AS "deliveryAddress", a.delivery_phone AS "deliveryPhone", a.total_count AS "totalCount", a.trade_no AS "tradeNo" FROM sys_order a WHERE a.out_trade_no = ? ORDER BY a.update_date DESC 
2019-07-09 09:39:21.713 DEBUG 4592 [nio-8980-exec-7] [c.j.modules.app.dao.OrderDao.findList  ] - ==> Parameters: 201907099360000001(String)
2019-07-09 09:39:21.738 DEBUG 4592 [nio-8980-exec-7] [c.j.modules.app.dao.OrderDao.findList  ] - <==      Total: 0
2019-07-09 09:39:21.740 DEBUG 4592 [nio-8980-exec-7] [c.j.c.m.m.provider.SelectSqlProvider   ] - 1毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", dd.id AS "userInfo.id", dd.mobile AS "userInfo.mobile", dd.password AS "userInfo.password", dd.icon AS "userInfo.icon", dd.regtime AS "userInfo.regtime", dd.lastlogin AS "userInfo.lastlogin", dd.islock AS "userInfo.islock", dd.isauthentication AS "userInfo.isauthentication", dd.type AS "userInfo.type", dd.create_by AS "userInfo.createBy", dd.create_date AS "userInfo.createDate", dd.update_by AS "userInfo.updateBy", dd.update_date AS "userInfo.updateDate", dd.remarks AS "userInfo.remarks", dd.del_flag AS "userInfo.delFlag", dd.nike_name AS "userInfo.nikeName", dd.is_invite AS "userInfo.isInvite", dd.third_id AS "userInfo.thirdId", dd.third_type AS "userInfo.thirdType", dd.third_icon AS "userInfo.thirdIcon", dd.member_lv AS "userInfo.memberLv", dd.member_flag AS "userInfo.memberFlag", dd.member_start AS "userInfo.memberStart", dd.member_end AS "userInfo.memberEnd", di.id AS "doctorInfos.id", di.doctorid AS "doctorInfos.doctorid", di.doctornum AS "doctorInfos.doctornum", di.name AS "doctorInfos.name", di.sex AS "doctorInfos.sex", di.age AS "doctorInfos.age", di.telephone AS "doctorInfos.telephone", di.idcard AS "doctorInfos.idcard", di.adress AS "doctorInfos.adress", di.technical AS "doctorInfos.technical", di.classify AS "doctorInfos.classify", di.introduce AS "doctorInfos.introduce", di.create_by AS "doctorInfos.createBy", di.cost AS "doctorInfos.cost", di.create_date AS "doctorInfos.createDate", di.update_by AS "doctorInfos.updateBy", di.update_date AS "doctorInfos.updateDate", di.remarks AS "doctorInfos.remarks", di.del_flag AS "doctorInfos.delFlag", di.cityid AS "doctorInfos.cityid", di.come_flag AS "doctorInfos.comeFlag", di.come_cost AS "doctorInfos.comeCost", di.own_flag AS "doctorInfos.ownFlag", di.first_count AS "doctorInfos.firstCount", di.star_lv AS "doctorInfos.starLv" FROM sys_tiaoli_order a LEFT JOIN sys_user_info dd ON a.userid = dd.id LEFT JOIN sys_doctor_info di ON a.docid = di.doctorid WHERE a.out_trade_no = #{sqlMap.where#out_trade_no#EQ1} ORDER BY a.create_date DESC
2019-07-09 09:39:21.741 DEBUG 4592 [nio-8980-exec-7] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@6e5df971] will not be managed by Spring
2019-07-09 09:39:21.742 DEBUG 4592 [nio-8980-exec-7] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", dd.id AS "userInfo.id", dd.mobile AS "userInfo.mobile", dd.password AS "userInfo.password", dd.icon AS "userInfo.icon", dd.regtime AS "userInfo.regtime", dd.lastlogin AS "userInfo.lastlogin", dd.islock AS "userInfo.islock", dd.isauthentication AS "userInfo.isauthentication", dd.type AS "userInfo.type", dd.create_by AS "userInfo.createBy", dd.create_date AS "userInfo.createDate", dd.update_by AS "userInfo.updateBy", dd.update_date AS "userInfo.updateDate", dd.remarks AS "userInfo.remarks", dd.del_flag AS "userInfo.delFlag", dd.nike_name AS "userInfo.nikeName", dd.is_invite AS "userInfo.isInvite", dd.third_id AS "userInfo.thirdId", dd.third_type AS "userInfo.thirdType", dd.third_icon AS "userInfo.thirdIcon", dd.member_lv AS "userInfo.memberLv", dd.member_flag AS "userInfo.memberFlag", dd.member_start AS "userInfo.memberStart", dd.member_end AS "userInfo.memberEnd", di.id AS "doctorInfos.id", di.doctorid AS "doctorInfos.doctorid", di.doctornum AS "doctorInfos.doctornum", di.name AS "doctorInfos.name", di.sex AS "doctorInfos.sex", di.age AS "doctorInfos.age", di.telephone AS "doctorInfos.telephone", di.idcard AS "doctorInfos.idcard", di.adress AS "doctorInfos.adress", di.technical AS "doctorInfos.technical", di.classify AS "doctorInfos.classify", di.introduce AS "doctorInfos.introduce", di.create_by AS "doctorInfos.createBy", di.cost AS "doctorInfos.cost", di.create_date AS "doctorInfos.createDate", di.update_by AS "doctorInfos.updateBy", di.update_date AS "doctorInfos.updateDate", di.remarks AS "doctorInfos.remarks", di.del_flag AS "doctorInfos.delFlag", di.cityid AS "doctorInfos.cityid", di.come_flag AS "doctorInfos.comeFlag", di.come_cost AS "doctorInfos.comeCost", di.own_flag AS "doctorInfos.ownFlag", di.first_count AS "doctorInfos.firstCount", di.star_lv AS "doctorInfos.starLv" FROM sys_tiaoli_order a LEFT JOIN sys_user_info dd ON a.userid = dd.id LEFT JOIN sys_doctor_info di ON a.docid = di.doctorid WHERE a.out_trade_no = ? ORDER BY a.create_date DESC 
2019-07-09 09:39:21.743 DEBUG 4592 [nio-8980-exec-7] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - ==> Parameters: 201907099360000001(String)
2019-07-09 09:39:21.783 DEBUG 4592 [nio-8980-exec-7] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - <==      Total: 1
2019-07-09 09:39:21.784 DEBUG 4592 [nio-8980-exec-7] [c.j.c.m.m.provider.SelectSqlProvider   ] - 0毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", dd.id AS "userInfo.id", dd.mobile AS "userInfo.mobile", dd.password AS "userInfo.password", dd.icon AS "userInfo.icon", dd.regtime AS "userInfo.regtime", dd.lastlogin AS "userInfo.lastlogin", dd.islock AS "userInfo.islock", dd.isauthentication AS "userInfo.isauthentication", dd.type AS "userInfo.type", dd.create_by AS "userInfo.createBy", dd.create_date AS "userInfo.createDate", dd.update_by AS "userInfo.updateBy", dd.update_date AS "userInfo.updateDate", dd.remarks AS "userInfo.remarks", dd.del_flag AS "userInfo.delFlag", dd.nike_name AS "userInfo.nikeName", dd.is_invite AS "userInfo.isInvite", dd.third_id AS "userInfo.thirdId", dd.third_type AS "userInfo.thirdType", dd.third_icon AS "userInfo.thirdIcon", dd.member_lv AS "userInfo.memberLv", dd.member_flag AS "userInfo.memberFlag", dd.member_start AS "userInfo.memberStart", dd.member_end AS "userInfo.memberEnd", di.id AS "doctorInfos.id", di.doctorid AS "doctorInfos.doctorid", di.doctornum AS "doctorInfos.doctornum", di.name AS "doctorInfos.name", di.sex AS "doctorInfos.sex", di.age AS "doctorInfos.age", di.telephone AS "doctorInfos.telephone", di.idcard AS "doctorInfos.idcard", di.adress AS "doctorInfos.adress", di.technical AS "doctorInfos.technical", di.classify AS "doctorInfos.classify", di.introduce AS "doctorInfos.introduce", di.create_by AS "doctorInfos.createBy", di.cost AS "doctorInfos.cost", di.create_date AS "doctorInfos.createDate", di.update_by AS "doctorInfos.updateBy", di.update_date AS "doctorInfos.updateDate", di.remarks AS "doctorInfos.remarks", di.del_flag AS "doctorInfos.delFlag", di.cityid AS "doctorInfos.cityid", di.come_flag AS "doctorInfos.comeFlag", di.come_cost AS "doctorInfos.comeCost", di.own_flag AS "doctorInfos.ownFlag", di.first_count AS "doctorInfos.firstCount", di.star_lv AS "doctorInfos.starLv" FROM sys_tiaoli_order a LEFT JOIN sys_user_info dd ON a.userid = dd.id LEFT JOIN sys_doctor_info di ON a.docid = di.doctorid WHERE a.out_trade_no = #{sqlMap.where#out_trade_no#EQ1} ORDER BY a.create_date DESC
2019-07-09 09:39:21.785 DEBUG 4592 [nio-8980-exec-7] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@6e5df971] will not be managed by Spring
2019-07-09 09:39:21.785 DEBUG 4592 [nio-8980-exec-7] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", dd.id AS "userInfo.id", dd.mobile AS "userInfo.mobile", dd.password AS "userInfo.password", dd.icon AS "userInfo.icon", dd.regtime AS "userInfo.regtime", dd.lastlogin AS "userInfo.lastlogin", dd.islock AS "userInfo.islock", dd.isauthentication AS "userInfo.isauthentication", dd.type AS "userInfo.type", dd.create_by AS "userInfo.createBy", dd.create_date AS "userInfo.createDate", dd.update_by AS "userInfo.updateBy", dd.update_date AS "userInfo.updateDate", dd.remarks AS "userInfo.remarks", dd.del_flag AS "userInfo.delFlag", dd.nike_name AS "userInfo.nikeName", dd.is_invite AS "userInfo.isInvite", dd.third_id AS "userInfo.thirdId", dd.third_type AS "userInfo.thirdType", dd.third_icon AS "userInfo.thirdIcon", dd.member_lv AS "userInfo.memberLv", dd.member_flag AS "userInfo.memberFlag", dd.member_start AS "userInfo.memberStart", dd.member_end AS "userInfo.memberEnd", di.id AS "doctorInfos.id", di.doctorid AS "doctorInfos.doctorid", di.doctornum AS "doctorInfos.doctornum", di.name AS "doctorInfos.name", di.sex AS "doctorInfos.sex", di.age AS "doctorInfos.age", di.telephone AS "doctorInfos.telephone", di.idcard AS "doctorInfos.idcard", di.adress AS "doctorInfos.adress", di.technical AS "doctorInfos.technical", di.classify AS "doctorInfos.classify", di.introduce AS "doctorInfos.introduce", di.create_by AS "doctorInfos.createBy", di.cost AS "doctorInfos.cost", di.create_date AS "doctorInfos.createDate", di.update_by AS "doctorInfos.updateBy", di.update_date AS "doctorInfos.updateDate", di.remarks AS "doctorInfos.remarks", di.del_flag AS "doctorInfos.delFlag", di.cityid AS "doctorInfos.cityid", di.come_flag AS "doctorInfos.comeFlag", di.come_cost AS "doctorInfos.comeCost", di.own_flag AS "doctorInfos.ownFlag", di.first_count AS "doctorInfos.firstCount", di.star_lv AS "doctorInfos.starLv" FROM sys_tiaoli_order a LEFT JOIN sys_user_info dd ON a.userid = dd.id LEFT JOIN sys_doctor_info di ON a.docid = di.doctorid WHERE a.out_trade_no = ? ORDER BY a.create_date DESC 
2019-07-09 09:39:21.786 DEBUG 4592 [nio-8980-exec-7] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - ==> Parameters: 201907099360000001(String)
2019-07-09 09:39:21.813 DEBUG 4592 [nio-8980-exec-7] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - <==      Total: 1
2019-07-09 09:39:21.814 DEBUG 4592 [nio-8980-exec-7] [c.j.c.m.m.provider.SelectSqlProvider   ] - 1毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.total_price AS "totalPrice", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag" FROM sys_member_order a WHERE a.out_trade_no = #{sqlMap.where#out_trade_no#EQ1} ORDER BY a.update_date DESC
2019-07-09 09:39:21.815 DEBUG 4592 [nio-8980-exec-7] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@6e5df971] will not be managed by Spring
2019-07-09 09:39:21.815 DEBUG 4592 [nio-8980-exec-7] [c.j.m.app.dao.MemberOrderDao.findList  ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.total_price AS "totalPrice", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag" FROM sys_member_order a WHERE a.out_trade_no = ? ORDER BY a.update_date DESC 
2019-07-09 09:39:21.815 DEBUG 4592 [nio-8980-exec-7] [c.j.m.app.dao.MemberOrderDao.findList  ] - ==> Parameters: 201907099360000001(String)
2019-07-09 09:39:21.839 DEBUG 4592 [nio-8980-exec-7] [c.j.m.app.dao.MemberOrderDao.findList  ] - <==      Total: 0
2019-07-09 09:39:21.840 DEBUG 4592 [nio-8980-exec-7] [c.j.c.m.m.provider.SelectSqlProvider   ] - 0毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.total_price AS "totalPrice", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", a.doctor_user_id AS "doctorUserId" FROM sys_doctor_register_order a WHERE a.out_trade_no = #{sqlMap.where#out_trade_no#EQ1} ORDER BY a.update_date DESC
2019-07-09 09:39:21.841 DEBUG 4592 [nio-8980-exec-7] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@6e5df971] will not be managed by Spring
2019-07-09 09:39:21.841 DEBUG 4592 [nio-8980-exec-7] [c.j.m.a.d.D.findList                   ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.total_price AS "totalPrice", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", a.doctor_user_id AS "doctorUserId" FROM sys_doctor_register_order a WHERE a.out_trade_no = ? ORDER BY a.update_date DESC 
2019-07-09 09:39:21.841 DEBUG 4592 [nio-8980-exec-7] [c.j.m.a.d.D.findList                   ] - ==> Parameters: 201907099360000001(String)
2019-07-09 09:39:21.864 DEBUG 4592 [nio-8980-exec-7] [c.j.m.a.d.D.findList                   ] - <==      Total: 0
2019-07-09 09:39:21.865 DEBUG 4592 [nio-8980-exec-7] [c.j.c.m.m.provider.SelectSqlProvider   ] - 1毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag" FROM sys_dashang_order a WHERE a.out_trade_no = #{sqlMap.where#out_trade_no#EQ1} ORDER BY a.update_date DESC
2019-07-09 09:39:21.865 DEBUG 4592 [nio-8980-exec-7] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@6e5df971] will not be managed by Spring
2019-07-09 09:39:21.865 DEBUG 4592 [nio-8980-exec-7] [c.j.m.app.dao.DashangOrderDao.findList ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag" FROM sys_dashang_order a WHERE a.out_trade_no = ? ORDER BY a.update_date DESC 
2019-07-09 09:39:21.866 DEBUG 4592 [nio-8980-exec-7] [c.j.m.app.dao.DashangOrderDao.findList ] - ==> Parameters: 201907099360000001(String)
2019-07-09 09:39:21.890 DEBUG 4592 [nio-8980-exec-7] [c.j.m.app.dao.DashangOrderDao.findList ] - <==      Total: 0
2019-07-09 09:50:45.989 DEBUG 4592 [nio-8980-exec-4] [c.jeesite.modules.app.utils.AlipayUtil ] - 将要存入数据库的参数0.01,201907099360000001,2019070922001497451057455218,
2019-07-09 09:50:45.990 DEBUG 4592 [nio-8980-exec-4] [c.j.c.m.m.provider.SelectSqlProvider   ] - 0毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.product_count AS "productCount", a.total_price AS "totalPrice", a.logistics_price AS "logisticsPrice", a.discount_price AS "discountPrice", a.really_price AS "reallyPrice", a.pay_channel AS "payChannel", a.out_trade_no AS "outTradeNo", a.create_date AS "createDate", a.update_date AS "updateDate", a.create_by AS "createBy", a.update_by AS "updateBy", a.pay_date AS "payDate", a.user_id AS "userId", a.address_id AS "addressId", a.logistics_id AS "logisticsId", a.delivery_date AS "deliveryDate", a.del_flag AS "delFlag", a.delivery_name AS "deliveryName", a.delivery_address AS "deliveryAddress", a.delivery_phone AS "deliveryPhone", a.total_count AS "totalCount", a.trade_no AS "tradeNo" FROM sys_order a WHERE a.out_trade_no = #{sqlMap.where#out_trade_no#EQ1} ORDER BY a.update_date DESC
2019-07-09 09:50:46.013 DEBUG 4592 [nio-8980-exec-4] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@6e5df971] will not be managed by Spring
2019-07-09 09:50:46.013 DEBUG 4592 [nio-8980-exec-4] [c.j.modules.app.dao.OrderDao.findList  ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.product_count AS "productCount", a.total_price AS "totalPrice", a.logistics_price AS "logisticsPrice", a.discount_price AS "discountPrice", a.really_price AS "reallyPrice", a.pay_channel AS "payChannel", a.out_trade_no AS "outTradeNo", a.create_date AS "createDate", a.update_date AS "updateDate", a.create_by AS "createBy", a.update_by AS "updateBy", a.pay_date AS "payDate", a.user_id AS "userId", a.address_id AS "addressId", a.logistics_id AS "logisticsId", a.delivery_date AS "deliveryDate", a.del_flag AS "delFlag", a.delivery_name AS "deliveryName", a.delivery_address AS "deliveryAddress", a.delivery_phone AS "deliveryPhone", a.total_count AS "totalCount", a.trade_no AS "tradeNo" FROM sys_order a WHERE a.out_trade_no = ? ORDER BY a.update_date DESC 
2019-07-09 09:50:46.014 DEBUG 4592 [nio-8980-exec-4] [c.j.modules.app.dao.OrderDao.findList  ] - ==> Parameters: 201907099360000001(String)
2019-07-09 09:50:46.039 DEBUG 4592 [nio-8980-exec-4] [c.j.modules.app.dao.OrderDao.findList  ] - <==      Total: 0
2019-07-09 09:50:46.041 DEBUG 4592 [nio-8980-exec-4] [c.j.c.m.m.provider.SelectSqlProvider   ] - 2毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", dd.id AS "userInfo.id", dd.mobile AS "userInfo.mobile", dd.password AS "userInfo.password", dd.icon AS "userInfo.icon", dd.regtime AS "userInfo.regtime", dd.lastlogin AS "userInfo.lastlogin", dd.islock AS "userInfo.islock", dd.isauthentication AS "userInfo.isauthentication", dd.type AS "userInfo.type", dd.create_by AS "userInfo.createBy", dd.create_date AS "userInfo.createDate", dd.update_by AS "userInfo.updateBy", dd.update_date AS "userInfo.updateDate", dd.remarks AS "userInfo.remarks", dd.del_flag AS "userInfo.delFlag", dd.nike_name AS "userInfo.nikeName", dd.is_invite AS "userInfo.isInvite", dd.third_id AS "userInfo.thirdId", dd.third_type AS "userInfo.thirdType", dd.third_icon AS "userInfo.thirdIcon", dd.member_lv AS "userInfo.memberLv", dd.member_flag AS "userInfo.memberFlag", dd.member_start AS "userInfo.memberStart", dd.member_end AS "userInfo.memberEnd", di.id AS "doctorInfos.id", di.doctorid AS "doctorInfos.doctorid", di.doctornum AS "doctorInfos.doctornum", di.name AS "doctorInfos.name", di.sex AS "doctorInfos.sex", di.age AS "doctorInfos.age", di.telephone AS "doctorInfos.telephone", di.idcard AS "doctorInfos.idcard", di.adress AS "doctorInfos.adress", di.technical AS "doctorInfos.technical", di.classify AS "doctorInfos.classify", di.introduce AS "doctorInfos.introduce", di.create_by AS "doctorInfos.createBy", di.cost AS "doctorInfos.cost", di.create_date AS "doctorInfos.createDate", di.update_by AS "doctorInfos.updateBy", di.update_date AS "doctorInfos.updateDate", di.remarks AS "doctorInfos.remarks", di.del_flag AS "doctorInfos.delFlag", di.cityid AS "doctorInfos.cityid", di.come_flag AS "doctorInfos.comeFlag", di.come_cost AS "doctorInfos.comeCost", di.own_flag AS "doctorInfos.ownFlag", di.first_count AS "doctorInfos.firstCount", di.star_lv AS "doctorInfos.starLv" FROM sys_tiaoli_order a LEFT JOIN sys_user_info dd ON a.userid = dd.id LEFT JOIN sys_doctor_info di ON a.docid = di.doctorid WHERE a.out_trade_no = #{sqlMap.where#out_trade_no#EQ1} ORDER BY a.create_date DESC
2019-07-09 09:50:46.042 DEBUG 4592 [nio-8980-exec-4] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@6e5df971] will not be managed by Spring
2019-07-09 09:50:46.043 DEBUG 4592 [nio-8980-exec-4] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", dd.id AS "userInfo.id", dd.mobile AS "userInfo.mobile", dd.password AS "userInfo.password", dd.icon AS "userInfo.icon", dd.regtime AS "userInfo.regtime", dd.lastlogin AS "userInfo.lastlogin", dd.islock AS "userInfo.islock", dd.isauthentication AS "userInfo.isauthentication", dd.type AS "userInfo.type", dd.create_by AS "userInfo.createBy", dd.create_date AS "userInfo.createDate", dd.update_by AS "userInfo.updateBy", dd.update_date AS "userInfo.updateDate", dd.remarks AS "userInfo.remarks", dd.del_flag AS "userInfo.delFlag", dd.nike_name AS "userInfo.nikeName", dd.is_invite AS "userInfo.isInvite", dd.third_id AS "userInfo.thirdId", dd.third_type AS "userInfo.thirdType", dd.third_icon AS "userInfo.thirdIcon", dd.member_lv AS "userInfo.memberLv", dd.member_flag AS "userInfo.memberFlag", dd.member_start AS "userInfo.memberStart", dd.member_end AS "userInfo.memberEnd", di.id AS "doctorInfos.id", di.doctorid AS "doctorInfos.doctorid", di.doctornum AS "doctorInfos.doctornum", di.name AS "doctorInfos.name", di.sex AS "doctorInfos.sex", di.age AS "doctorInfos.age", di.telephone AS "doctorInfos.telephone", di.idcard AS "doctorInfos.idcard", di.adress AS "doctorInfos.adress", di.technical AS "doctorInfos.technical", di.classify AS "doctorInfos.classify", di.introduce AS "doctorInfos.introduce", di.create_by AS "doctorInfos.createBy", di.cost AS "doctorInfos.cost", di.create_date AS "doctorInfos.createDate", di.update_by AS "doctorInfos.updateBy", di.update_date AS "doctorInfos.updateDate", di.remarks AS "doctorInfos.remarks", di.del_flag AS "doctorInfos.delFlag", di.cityid AS "doctorInfos.cityid", di.come_flag AS "doctorInfos.comeFlag", di.come_cost AS "doctorInfos.comeCost", di.own_flag AS "doctorInfos.ownFlag", di.first_count AS "doctorInfos.firstCount", di.star_lv AS "doctorInfos.starLv" FROM sys_tiaoli_order a LEFT JOIN sys_user_info dd ON a.userid = dd.id LEFT JOIN sys_doctor_info di ON a.docid = di.doctorid WHERE a.out_trade_no = ? ORDER BY a.create_date DESC 
2019-07-09 09:50:46.044 DEBUG 4592 [nio-8980-exec-4] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - ==> Parameters: 201907099360000001(String)
2019-07-09 09:50:46.072 DEBUG 4592 [nio-8980-exec-4] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - <==      Total: 1
2019-07-09 09:50:46.074 DEBUG 4592 [nio-8980-exec-4] [c.j.c.m.m.provider.SelectSqlProvider   ] - 2毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", dd.id AS "userInfo.id", dd.mobile AS "userInfo.mobile", dd.password AS "userInfo.password", dd.icon AS "userInfo.icon", dd.regtime AS "userInfo.regtime", dd.lastlogin AS "userInfo.lastlogin", dd.islock AS "userInfo.islock", dd.isauthentication AS "userInfo.isauthentication", dd.type AS "userInfo.type", dd.create_by AS "userInfo.createBy", dd.create_date AS "userInfo.createDate", dd.update_by AS "userInfo.updateBy", dd.update_date AS "userInfo.updateDate", dd.remarks AS "userInfo.remarks", dd.del_flag AS "userInfo.delFlag", dd.nike_name AS "userInfo.nikeName", dd.is_invite AS "userInfo.isInvite", dd.third_id AS "userInfo.thirdId", dd.third_type AS "userInfo.thirdType", dd.third_icon AS "userInfo.thirdIcon", dd.member_lv AS "userInfo.memberLv", dd.member_flag AS "userInfo.memberFlag", dd.member_start AS "userInfo.memberStart", dd.member_end AS "userInfo.memberEnd", di.id AS "doctorInfos.id", di.doctorid AS "doctorInfos.doctorid", di.doctornum AS "doctorInfos.doctornum", di.name AS "doctorInfos.name", di.sex AS "doctorInfos.sex", di.age AS "doctorInfos.age", di.telephone AS "doctorInfos.telephone", di.idcard AS "doctorInfos.idcard", di.adress AS "doctorInfos.adress", di.technical AS "doctorInfos.technical", di.classify AS "doctorInfos.classify", di.introduce AS "doctorInfos.introduce", di.create_by AS "doctorInfos.createBy", di.cost AS "doctorInfos.cost", di.create_date AS "doctorInfos.createDate", di.update_by AS "doctorInfos.updateBy", di.update_date AS "doctorInfos.updateDate", di.remarks AS "doctorInfos.remarks", di.del_flag AS "doctorInfos.delFlag", di.cityid AS "doctorInfos.cityid", di.come_flag AS "doctorInfos.comeFlag", di.come_cost AS "doctorInfos.comeCost", di.own_flag AS "doctorInfos.ownFlag", di.first_count AS "doctorInfos.firstCount", di.star_lv AS "doctorInfos.starLv" FROM sys_tiaoli_order a LEFT JOIN sys_user_info dd ON a.userid = dd.id LEFT JOIN sys_doctor_info di ON a.docid = di.doctorid WHERE a.out_trade_no = #{sqlMap.where#out_trade_no#EQ1} ORDER BY a.create_date DESC
2019-07-09 09:50:46.074 DEBUG 4592 [nio-8980-exec-4] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@6e5df971] will not be managed by Spring
2019-07-09 09:50:46.075 DEBUG 4592 [nio-8980-exec-4] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", dd.id AS "userInfo.id", dd.mobile AS "userInfo.mobile", dd.password AS "userInfo.password", dd.icon AS "userInfo.icon", dd.regtime AS "userInfo.regtime", dd.lastlogin AS "userInfo.lastlogin", dd.islock AS "userInfo.islock", dd.isauthentication AS "userInfo.isauthentication", dd.type AS "userInfo.type", dd.create_by AS "userInfo.createBy", dd.create_date AS "userInfo.createDate", dd.update_by AS "userInfo.updateBy", dd.update_date AS "userInfo.updateDate", dd.remarks AS "userInfo.remarks", dd.del_flag AS "userInfo.delFlag", dd.nike_name AS "userInfo.nikeName", dd.is_invite AS "userInfo.isInvite", dd.third_id AS "userInfo.thirdId", dd.third_type AS "userInfo.thirdType", dd.third_icon AS "userInfo.thirdIcon", dd.member_lv AS "userInfo.memberLv", dd.member_flag AS "userInfo.memberFlag", dd.member_start AS "userInfo.memberStart", dd.member_end AS "userInfo.memberEnd", di.id AS "doctorInfos.id", di.doctorid AS "doctorInfos.doctorid", di.doctornum AS "doctorInfos.doctornum", di.name AS "doctorInfos.name", di.sex AS "doctorInfos.sex", di.age AS "doctorInfos.age", di.telephone AS "doctorInfos.telephone", di.idcard AS "doctorInfos.idcard", di.adress AS "doctorInfos.adress", di.technical AS "doctorInfos.technical", di.classify AS "doctorInfos.classify", di.introduce AS "doctorInfos.introduce", di.create_by AS "doctorInfos.createBy", di.cost AS "doctorInfos.cost", di.create_date AS "doctorInfos.createDate", di.update_by AS "doctorInfos.updateBy", di.update_date AS "doctorInfos.updateDate", di.remarks AS "doctorInfos.remarks", di.del_flag AS "doctorInfos.delFlag", di.cityid AS "doctorInfos.cityid", di.come_flag AS "doctorInfos.comeFlag", di.come_cost AS "doctorInfos.comeCost", di.own_flag AS "doctorInfos.ownFlag", di.first_count AS "doctorInfos.firstCount", di.star_lv AS "doctorInfos.starLv" FROM sys_tiaoli_order a LEFT JOIN sys_user_info dd ON a.userid = dd.id LEFT JOIN sys_doctor_info di ON a.docid = di.doctorid WHERE a.out_trade_no = ? ORDER BY a.create_date DESC 
2019-07-09 09:50:46.076 DEBUG 4592 [nio-8980-exec-4] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - ==> Parameters: 201907099360000001(String)
2019-07-09 09:50:46.103 DEBUG 4592 [nio-8980-exec-4] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - <==      Total: 1
2019-07-09 09:50:46.104 DEBUG 4592 [nio-8980-exec-4] [c.j.c.m.m.provider.SelectSqlProvider   ] - 0毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.total_price AS "totalPrice", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag" FROM sys_member_order a WHERE a.out_trade_no = #{sqlMap.where#out_trade_no#EQ1} ORDER BY a.update_date DESC
2019-07-09 09:50:46.105 DEBUG 4592 [nio-8980-exec-4] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@6e5df971] will not be managed by Spring
2019-07-09 09:50:46.105 DEBUG 4592 [nio-8980-exec-4] [c.j.m.app.dao.MemberOrderDao.findList  ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.total_price AS "totalPrice", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag" FROM sys_member_order a WHERE a.out_trade_no = ? ORDER BY a.update_date DESC 
2019-07-09 09:50:46.106 DEBUG 4592 [nio-8980-exec-4] [c.j.m.app.dao.MemberOrderDao.findList  ] - ==> Parameters: 201907099360000001(String)
2019-07-09 09:50:46.130 DEBUG 4592 [nio-8980-exec-4] [c.j.m.app.dao.MemberOrderDao.findList  ] - <==      Total: 0
2019-07-09 09:50:46.130 DEBUG 4592 [nio-8980-exec-4] [c.j.c.m.m.provider.SelectSqlProvider   ] - 0毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.total_price AS "totalPrice", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", a.doctor_user_id AS "doctorUserId" FROM sys_doctor_register_order a WHERE a.out_trade_no = #{sqlMap.where#out_trade_no#EQ1} ORDER BY a.update_date DESC
2019-07-09 09:50:46.131 DEBUG 4592 [nio-8980-exec-4] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@6e5df971] will not be managed by Spring
2019-07-09 09:50:46.131 DEBUG 4592 [nio-8980-exec-4] [c.j.m.a.d.D.findList                   ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.total_price AS "totalPrice", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", a.doctor_user_id AS "doctorUserId" FROM sys_doctor_register_order a WHERE a.out_trade_no = ? ORDER BY a.update_date DESC 
2019-07-09 09:50:46.132 DEBUG 4592 [nio-8980-exec-4] [c.j.m.a.d.D.findList                   ] - ==> Parameters: 201907099360000001(String)
2019-07-09 09:50:46.156 DEBUG 4592 [nio-8980-exec-4] [c.j.m.a.d.D.findList                   ] - <==      Total: 0
2019-07-09 09:50:46.157 DEBUG 4592 [nio-8980-exec-4] [c.j.c.m.m.provider.SelectSqlProvider   ] - 0毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag" FROM sys_dashang_order a WHERE a.out_trade_no = #{sqlMap.where#out_trade_no#EQ1} ORDER BY a.update_date DESC
2019-07-09 09:50:46.157 DEBUG 4592 [nio-8980-exec-4] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@6e5df971] will not be managed by Spring
2019-07-09 09:50:46.158 DEBUG 4592 [nio-8980-exec-4] [c.j.m.app.dao.DashangOrderDao.findList ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag" FROM sys_dashang_order a WHERE a.out_trade_no = ? ORDER BY a.update_date DESC 
2019-07-09 09:50:46.158 DEBUG 4592 [nio-8980-exec-4] [c.j.m.app.dao.DashangOrderDao.findList ] - ==> Parameters: 201907099360000001(String)
2019-07-09 09:50:46.182 DEBUG 4592 [nio-8980-exec-4] [c.j.m.app.dao.DashangOrderDao.findList ] - <==      Total: 0
2019-07-09 10:01:43.399 DEBUG 4592 [nio-8980-exec-1] [c.jeesite.modules.app.utils.AlipayUtil ] - 将要存入数据库的参数0.01,201907099360000001,2019070922001497451057455218,
2019-07-09 10:01:43.402 DEBUG 4592 [nio-8980-exec-1] [c.j.c.m.m.provider.SelectSqlProvider   ] - 1毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.product_count AS "productCount", a.total_price AS "totalPrice", a.logistics_price AS "logisticsPrice", a.discount_price AS "discountPrice", a.really_price AS "reallyPrice", a.pay_channel AS "payChannel", a.out_trade_no AS "outTradeNo", a.create_date AS "createDate", a.update_date AS "updateDate", a.create_by AS "createBy", a.update_by AS "updateBy", a.pay_date AS "payDate", a.user_id AS "userId", a.address_id AS "addressId", a.logistics_id AS "logisticsId", a.delivery_date AS "deliveryDate", a.del_flag AS "delFlag", a.delivery_name AS "deliveryName", a.delivery_address AS "deliveryAddress", a.delivery_phone AS "deliveryPhone", a.total_count AS "totalCount", a.trade_no AS "tradeNo" FROM sys_order a WHERE a.out_trade_no = #{sqlMap.where#out_trade_no#EQ1} ORDER BY a.update_date DESC
2019-07-09 10:01:43.426 DEBUG 4592 [nio-8980-exec-1] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@6e5df971] will not be managed by Spring
2019-07-09 10:01:43.432 DEBUG 4592 [nio-8980-exec-1] [c.j.modules.app.dao.OrderDao.findList  ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.product_count AS "productCount", a.total_price AS "totalPrice", a.logistics_price AS "logisticsPrice", a.discount_price AS "discountPrice", a.really_price AS "reallyPrice", a.pay_channel AS "payChannel", a.out_trade_no AS "outTradeNo", a.create_date AS "createDate", a.update_date AS "updateDate", a.create_by AS "createBy", a.update_by AS "updateBy", a.pay_date AS "payDate", a.user_id AS "userId", a.address_id AS "addressId", a.logistics_id AS "logisticsId", a.delivery_date AS "deliveryDate", a.del_flag AS "delFlag", a.delivery_name AS "deliveryName", a.delivery_address AS "deliveryAddress", a.delivery_phone AS "deliveryPhone", a.total_count AS "totalCount", a.trade_no AS "tradeNo" FROM sys_order a WHERE a.out_trade_no = ? ORDER BY a.update_date DESC 
2019-07-09 10:01:43.433 DEBUG 4592 [nio-8980-exec-1] [c.j.modules.app.dao.OrderDao.findList  ] - ==> Parameters: 201907099360000001(String)
2019-07-09 10:01:43.458 DEBUG 4592 [nio-8980-exec-1] [c.j.modules.app.dao.OrderDao.findList  ] - <==      Total: 0
2019-07-09 10:01:43.459 DEBUG 4592 [nio-8980-exec-1] [c.j.c.m.m.provider.SelectSqlProvider   ] - 0毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", dd.id AS "userInfo.id", dd.mobile AS "userInfo.mobile", dd.password AS "userInfo.password", dd.icon AS "userInfo.icon", dd.regtime AS "userInfo.regtime", dd.lastlogin AS "userInfo.lastlogin", dd.islock AS "userInfo.islock", dd.isauthentication AS "userInfo.isauthentication", dd.type AS "userInfo.type", dd.create_by AS "userInfo.createBy", dd.create_date AS "userInfo.createDate", dd.update_by AS "userInfo.updateBy", dd.update_date AS "userInfo.updateDate", dd.remarks AS "userInfo.remarks", dd.del_flag AS "userInfo.delFlag", dd.nike_name AS "userInfo.nikeName", dd.is_invite AS "userInfo.isInvite", dd.third_id AS "userInfo.thirdId", dd.third_type AS "userInfo.thirdType", dd.third_icon AS "userInfo.thirdIcon", dd.member_lv AS "userInfo.memberLv", dd.member_flag AS "userInfo.memberFlag", dd.member_start AS "userInfo.memberStart", dd.member_end AS "userInfo.memberEnd", di.id AS "doctorInfos.id", di.doctorid AS "doctorInfos.doctorid", di.doctornum AS "doctorInfos.doctornum", di.name AS "doctorInfos.name", di.sex AS "doctorInfos.sex", di.age AS "doctorInfos.age", di.telephone AS "doctorInfos.telephone", di.idcard AS "doctorInfos.idcard", di.adress AS "doctorInfos.adress", di.technical AS "doctorInfos.technical", di.classify AS "doctorInfos.classify", di.introduce AS "doctorInfos.introduce", di.create_by AS "doctorInfos.createBy", di.cost AS "doctorInfos.cost", di.create_date AS "doctorInfos.createDate", di.update_by AS "doctorInfos.updateBy", di.update_date AS "doctorInfos.updateDate", di.remarks AS "doctorInfos.remarks", di.del_flag AS "doctorInfos.delFlag", di.cityid AS "doctorInfos.cityid", di.come_flag AS "doctorInfos.comeFlag", di.come_cost AS "doctorInfos.comeCost", di.own_flag AS "doctorInfos.ownFlag", di.first_count AS "doctorInfos.firstCount", di.star_lv AS "doctorInfos.starLv" FROM sys_tiaoli_order a LEFT JOIN sys_user_info dd ON a.userid = dd.id LEFT JOIN sys_doctor_info di ON a.docid = di.doctorid WHERE a.out_trade_no = #{sqlMap.where#out_trade_no#EQ1} ORDER BY a.create_date DESC
2019-07-09 10:01:43.460 DEBUG 4592 [nio-8980-exec-1] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@6e5df971] will not be managed by Spring
2019-07-09 10:01:43.461 DEBUG 4592 [nio-8980-exec-1] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", dd.id AS "userInfo.id", dd.mobile AS "userInfo.mobile", dd.password AS "userInfo.password", dd.icon AS "userInfo.icon", dd.regtime AS "userInfo.regtime", dd.lastlogin AS "userInfo.lastlogin", dd.islock AS "userInfo.islock", dd.isauthentication AS "userInfo.isauthentication", dd.type AS "userInfo.type", dd.create_by AS "userInfo.createBy", dd.create_date AS "userInfo.createDate", dd.update_by AS "userInfo.updateBy", dd.update_date AS "userInfo.updateDate", dd.remarks AS "userInfo.remarks", dd.del_flag AS "userInfo.delFlag", dd.nike_name AS "userInfo.nikeName", dd.is_invite AS "userInfo.isInvite", dd.third_id AS "userInfo.thirdId", dd.third_type AS "userInfo.thirdType", dd.third_icon AS "userInfo.thirdIcon", dd.member_lv AS "userInfo.memberLv", dd.member_flag AS "userInfo.memberFlag", dd.member_start AS "userInfo.memberStart", dd.member_end AS "userInfo.memberEnd", di.id AS "doctorInfos.id", di.doctorid AS "doctorInfos.doctorid", di.doctornum AS "doctorInfos.doctornum", di.name AS "doctorInfos.name", di.sex AS "doctorInfos.sex", di.age AS "doctorInfos.age", di.telephone AS "doctorInfos.telephone", di.idcard AS "doctorInfos.idcard", di.adress AS "doctorInfos.adress", di.technical AS "doctorInfos.technical", di.classify AS "doctorInfos.classify", di.introduce AS "doctorInfos.introduce", di.create_by AS "doctorInfos.createBy", di.cost AS "doctorInfos.cost", di.create_date AS "doctorInfos.createDate", di.update_by AS "doctorInfos.updateBy", di.update_date AS "doctorInfos.updateDate", di.remarks AS "doctorInfos.remarks", di.del_flag AS "doctorInfos.delFlag", di.cityid AS "doctorInfos.cityid", di.come_flag AS "doctorInfos.comeFlag", di.come_cost AS "doctorInfos.comeCost", di.own_flag AS "doctorInfos.ownFlag", di.first_count AS "doctorInfos.firstCount", di.star_lv AS "doctorInfos.starLv" FROM sys_tiaoli_order a LEFT JOIN sys_user_info dd ON a.userid = dd.id LEFT JOIN sys_doctor_info di ON a.docid = di.doctorid WHERE a.out_trade_no = ? ORDER BY a.create_date DESC 
2019-07-09 10:01:43.461 DEBUG 4592 [nio-8980-exec-1] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - ==> Parameters: 201907099360000001(String)
2019-07-09 10:01:43.494 DEBUG 4592 [nio-8980-exec-1] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - <==      Total: 1
2019-07-09 10:01:43.496 DEBUG 4592 [nio-8980-exec-1] [c.j.c.m.m.provider.SelectSqlProvider   ] - 1毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", dd.id AS "userInfo.id", dd.mobile AS "userInfo.mobile", dd.password AS "userInfo.password", dd.icon AS "userInfo.icon", dd.regtime AS "userInfo.regtime", dd.lastlogin AS "userInfo.lastlogin", dd.islock AS "userInfo.islock", dd.isauthentication AS "userInfo.isauthentication", dd.type AS "userInfo.type", dd.create_by AS "userInfo.createBy", dd.create_date AS "userInfo.createDate", dd.update_by AS "userInfo.updateBy", dd.update_date AS "userInfo.updateDate", dd.remarks AS "userInfo.remarks", dd.del_flag AS "userInfo.delFlag", dd.nike_name AS "userInfo.nikeName", dd.is_invite AS "userInfo.isInvite", dd.third_id AS "userInfo.thirdId", dd.third_type AS "userInfo.thirdType", dd.third_icon AS "userInfo.thirdIcon", dd.member_lv AS "userInfo.memberLv", dd.member_flag AS "userInfo.memberFlag", dd.member_start AS "userInfo.memberStart", dd.member_end AS "userInfo.memberEnd", di.id AS "doctorInfos.id", di.doctorid AS "doctorInfos.doctorid", di.doctornum AS "doctorInfos.doctornum", di.name AS "doctorInfos.name", di.sex AS "doctorInfos.sex", di.age AS "doctorInfos.age", di.telephone AS "doctorInfos.telephone", di.idcard AS "doctorInfos.idcard", di.adress AS "doctorInfos.adress", di.technical AS "doctorInfos.technical", di.classify AS "doctorInfos.classify", di.introduce AS "doctorInfos.introduce", di.create_by AS "doctorInfos.createBy", di.cost AS "doctorInfos.cost", di.create_date AS "doctorInfos.createDate", di.update_by AS "doctorInfos.updateBy", di.update_date AS "doctorInfos.updateDate", di.remarks AS "doctorInfos.remarks", di.del_flag AS "doctorInfos.delFlag", di.cityid AS "doctorInfos.cityid", di.come_flag AS "doctorInfos.comeFlag", di.come_cost AS "doctorInfos.comeCost", di.own_flag AS "doctorInfos.ownFlag", di.first_count AS "doctorInfos.firstCount", di.star_lv AS "doctorInfos.starLv" FROM sys_tiaoli_order a LEFT JOIN sys_user_info dd ON a.userid = dd.id LEFT JOIN sys_doctor_info di ON a.docid = di.doctorid WHERE a.out_trade_no = #{sqlMap.where#out_trade_no#EQ1} ORDER BY a.create_date DESC
2019-07-09 10:01:43.497 DEBUG 4592 [nio-8980-exec-1] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@6e5df971] will not be managed by Spring
2019-07-09 10:01:43.498 DEBUG 4592 [nio-8980-exec-1] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", dd.id AS "userInfo.id", dd.mobile AS "userInfo.mobile", dd.password AS "userInfo.password", dd.icon AS "userInfo.icon", dd.regtime AS "userInfo.regtime", dd.lastlogin AS "userInfo.lastlogin", dd.islock AS "userInfo.islock", dd.isauthentication AS "userInfo.isauthentication", dd.type AS "userInfo.type", dd.create_by AS "userInfo.createBy", dd.create_date AS "userInfo.createDate", dd.update_by AS "userInfo.updateBy", dd.update_date AS "userInfo.updateDate", dd.remarks AS "userInfo.remarks", dd.del_flag AS "userInfo.delFlag", dd.nike_name AS "userInfo.nikeName", dd.is_invite AS "userInfo.isInvite", dd.third_id AS "userInfo.thirdId", dd.third_type AS "userInfo.thirdType", dd.third_icon AS "userInfo.thirdIcon", dd.member_lv AS "userInfo.memberLv", dd.member_flag AS "userInfo.memberFlag", dd.member_start AS "userInfo.memberStart", dd.member_end AS "userInfo.memberEnd", di.id AS "doctorInfos.id", di.doctorid AS "doctorInfos.doctorid", di.doctornum AS "doctorInfos.doctornum", di.name AS "doctorInfos.name", di.sex AS "doctorInfos.sex", di.age AS "doctorInfos.age", di.telephone AS "doctorInfos.telephone", di.idcard AS "doctorInfos.idcard", di.adress AS "doctorInfos.adress", di.technical AS "doctorInfos.technical", di.classify AS "doctorInfos.classify", di.introduce AS "doctorInfos.introduce", di.create_by AS "doctorInfos.createBy", di.cost AS "doctorInfos.cost", di.create_date AS "doctorInfos.createDate", di.update_by AS "doctorInfos.updateBy", di.update_date AS "doctorInfos.updateDate", di.remarks AS "doctorInfos.remarks", di.del_flag AS "doctorInfos.delFlag", di.cityid AS "doctorInfos.cityid", di.come_flag AS "doctorInfos.comeFlag", di.come_cost AS "doctorInfos.comeCost", di.own_flag AS "doctorInfos.ownFlag", di.first_count AS "doctorInfos.firstCount", di.star_lv AS "doctorInfos.starLv" FROM sys_tiaoli_order a LEFT JOIN sys_user_info dd ON a.userid = dd.id LEFT JOIN sys_doctor_info di ON a.docid = di.doctorid WHERE a.out_trade_no = ? ORDER BY a.create_date DESC 
2019-07-09 10:01:43.498 DEBUG 4592 [nio-8980-exec-1] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - ==> Parameters: 201907099360000001(String)
2019-07-09 10:01:43.525 DEBUG 4592 [nio-8980-exec-1] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - <==      Total: 1
2019-07-09 10:01:43.526 DEBUG 4592 [nio-8980-exec-1] [c.j.c.m.m.provider.SelectSqlProvider   ] - 0毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.total_price AS "totalPrice", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag" FROM sys_member_order a WHERE a.out_trade_no = #{sqlMap.where#out_trade_no#EQ1} ORDER BY a.update_date DESC
2019-07-09 10:01:43.527 DEBUG 4592 [nio-8980-exec-1] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@6e5df971] will not be managed by Spring
2019-07-09 10:01:43.527 DEBUG 4592 [nio-8980-exec-1] [c.j.m.app.dao.MemberOrderDao.findList  ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.total_price AS "totalPrice", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag" FROM sys_member_order a WHERE a.out_trade_no = ? ORDER BY a.update_date DESC 
2019-07-09 10:01:43.528 DEBUG 4592 [nio-8980-exec-1] [c.j.m.app.dao.MemberOrderDao.findList  ] - ==> Parameters: 201907099360000001(String)
2019-07-09 10:01:43.552 DEBUG 4592 [nio-8980-exec-1] [c.j.m.app.dao.MemberOrderDao.findList  ] - <==      Total: 0
2019-07-09 10:01:43.552 DEBUG 4592 [nio-8980-exec-1] [c.j.c.m.m.provider.SelectSqlProvider   ] - 0毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.total_price AS "totalPrice", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", a.doctor_user_id AS "doctorUserId" FROM sys_doctor_register_order a WHERE a.out_trade_no = #{sqlMap.where#out_trade_no#EQ1} ORDER BY a.update_date DESC
2019-07-09 10:01:43.553 DEBUG 4592 [nio-8980-exec-1] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@6e5df971] will not be managed by Spring
2019-07-09 10:01:43.553 DEBUG 4592 [nio-8980-exec-1] [c.j.m.a.d.D.findList                   ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.total_price AS "totalPrice", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", a.doctor_user_id AS "doctorUserId" FROM sys_doctor_register_order a WHERE a.out_trade_no = ? ORDER BY a.update_date DESC 
2019-07-09 10:01:43.554 DEBUG 4592 [nio-8980-exec-1] [c.j.m.a.d.D.findList                   ] - ==> Parameters: 201907099360000001(String)
2019-07-09 10:01:43.577 DEBUG 4592 [nio-8980-exec-1] [c.j.m.a.d.D.findList                   ] - <==      Total: 0
2019-07-09 10:01:43.578 DEBUG 4592 [nio-8980-exec-1] [c.j.c.m.m.provider.SelectSqlProvider   ] - 1毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag" FROM sys_dashang_order a WHERE a.out_trade_no = #{sqlMap.where#out_trade_no#EQ1} ORDER BY a.update_date DESC
2019-07-09 10:01:43.578 DEBUG 4592 [nio-8980-exec-1] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@6e5df971] will not be managed by Spring
2019-07-09 10:01:43.579 DEBUG 4592 [nio-8980-exec-1] [c.j.m.app.dao.DashangOrderDao.findList ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag" FROM sys_dashang_order a WHERE a.out_trade_no = ? ORDER BY a.update_date DESC 
2019-07-09 10:01:43.579 DEBUG 4592 [nio-8980-exec-1] [c.j.m.app.dao.DashangOrderDao.findList ] - ==> Parameters: 201907099360000001(String)
2019-07-09 10:01:43.603 DEBUG 4592 [nio-8980-exec-1] [c.j.m.app.dao.DashangOrderDao.findList ] - <==      Total: 0
2019-07-09 10:04:03.589 DEBUG 4592 [io-8980-exec-10] [c.j.c.m.m.provider.SelectSqlProvider   ] - 0毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.product_count AS "productCount", a.total_price AS "totalPrice", a.logistics_price AS "logisticsPrice", a.discount_price AS "discountPrice", a.really_price AS "reallyPrice", a.pay_channel AS "payChannel", a.out_trade_no AS "outTradeNo", a.create_date AS "createDate", a.update_date AS "updateDate", a.create_by AS "createBy", a.update_by AS "updateBy", a.pay_date AS "payDate", a.user_id AS "userId", a.address_id AS "addressId", a.logistics_id AS "logisticsId", a.delivery_date AS "deliveryDate", a.del_flag AS "delFlag", a.delivery_name AS "deliveryName", a.delivery_address AS "deliveryAddress", a.delivery_phone AS "deliveryPhone", a.total_count AS "totalCount", a.trade_no AS "tradeNo" FROM sys_order a WHERE a.order_no = #{sqlMap.where#order_no#EQ1} ORDER BY a.update_date DESC
2019-07-09 10:04:03.613 DEBUG 4592 [io-8980-exec-10] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@6e5df971] will not be managed by Spring
2019-07-09 10:04:03.614 DEBUG 4592 [io-8980-exec-10] [c.j.modules.app.dao.OrderDao.findList  ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.product_count AS "productCount", a.total_price AS "totalPrice", a.logistics_price AS "logisticsPrice", a.discount_price AS "discountPrice", a.really_price AS "reallyPrice", a.pay_channel AS "payChannel", a.out_trade_no AS "outTradeNo", a.create_date AS "createDate", a.update_date AS "updateDate", a.create_by AS "createBy", a.update_by AS "updateBy", a.pay_date AS "payDate", a.user_id AS "userId", a.address_id AS "addressId", a.logistics_id AS "logisticsId", a.delivery_date AS "deliveryDate", a.del_flag AS "delFlag", a.delivery_name AS "deliveryName", a.delivery_address AS "deliveryAddress", a.delivery_phone AS "deliveryPhone", a.total_count AS "totalCount", a.trade_no AS "tradeNo" FROM sys_order a WHERE a.order_no = ? ORDER BY a.update_date DESC 
2019-07-09 10:04:03.615 DEBUG 4592 [io-8980-exec-10] [c.j.modules.app.dao.OrderDao.findList  ] - ==> Parameters: 070910040393101(String)
2019-07-09 10:04:03.639 DEBUG 4592 [io-8980-exec-10] [c.j.modules.app.dao.OrderDao.findList  ] - <==      Total: 0
2019-07-09 10:04:03.641 DEBUG 4592 [io-8980-exec-10] [c.j.c.m.m.provider.SelectSqlProvider   ] - 1毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", dd.id AS "userInfo.id", dd.mobile AS "userInfo.mobile", dd.password AS "userInfo.password", dd.icon AS "userInfo.icon", dd.regtime AS "userInfo.regtime", dd.lastlogin AS "userInfo.lastlogin", dd.islock AS "userInfo.islock", dd.isauthentication AS "userInfo.isauthentication", dd.type AS "userInfo.type", dd.create_by AS "userInfo.createBy", dd.create_date AS "userInfo.createDate", dd.update_by AS "userInfo.updateBy", dd.update_date AS "userInfo.updateDate", dd.remarks AS "userInfo.remarks", dd.del_flag AS "userInfo.delFlag", dd.nike_name AS "userInfo.nikeName", dd.is_invite AS "userInfo.isInvite", dd.third_id AS "userInfo.thirdId", dd.third_type AS "userInfo.thirdType", dd.third_icon AS "userInfo.thirdIcon", dd.member_lv AS "userInfo.memberLv", dd.member_flag AS "userInfo.memberFlag", dd.member_start AS "userInfo.memberStart", dd.member_end AS "userInfo.memberEnd", di.id AS "doctorInfos.id", di.doctorid AS "doctorInfos.doctorid", di.doctornum AS "doctorInfos.doctornum", di.name AS "doctorInfos.name", di.sex AS "doctorInfos.sex", di.age AS "doctorInfos.age", di.telephone AS "doctorInfos.telephone", di.idcard AS "doctorInfos.idcard", di.adress AS "doctorInfos.adress", di.technical AS "doctorInfos.technical", di.classify AS "doctorInfos.classify", di.introduce AS "doctorInfos.introduce", di.create_by AS "doctorInfos.createBy", di.cost AS "doctorInfos.cost", di.create_date AS "doctorInfos.createDate", di.update_by AS "doctorInfos.updateBy", di.update_date AS "doctorInfos.updateDate", di.remarks AS "doctorInfos.remarks", di.del_flag AS "doctorInfos.delFlag", di.cityid AS "doctorInfos.cityid", di.come_flag AS "doctorInfos.comeFlag", di.come_cost AS "doctorInfos.comeCost", di.own_flag AS "doctorInfos.ownFlag", di.first_count AS "doctorInfos.firstCount", di.star_lv AS "doctorInfos.starLv" FROM sys_tiaoli_order a LEFT JOIN sys_user_info dd ON a.userid = dd.id LEFT JOIN sys_doctor_info di ON a.docid = di.doctorid WHERE a.order_no = #{sqlMap.where#order_no#EQ1} ORDER BY a.create_date DESC
2019-07-09 10:04:03.641 DEBUG 4592 [io-8980-exec-10] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@6e5df971] will not be managed by Spring
2019-07-09 10:04:03.642 DEBUG 4592 [io-8980-exec-10] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", dd.id AS "userInfo.id", dd.mobile AS "userInfo.mobile", dd.password AS "userInfo.password", dd.icon AS "userInfo.icon", dd.regtime AS "userInfo.regtime", dd.lastlogin AS "userInfo.lastlogin", dd.islock AS "userInfo.islock", dd.isauthentication AS "userInfo.isauthentication", dd.type AS "userInfo.type", dd.create_by AS "userInfo.createBy", dd.create_date AS "userInfo.createDate", dd.update_by AS "userInfo.updateBy", dd.update_date AS "userInfo.updateDate", dd.remarks AS "userInfo.remarks", dd.del_flag AS "userInfo.delFlag", dd.nike_name AS "userInfo.nikeName", dd.is_invite AS "userInfo.isInvite", dd.third_id AS "userInfo.thirdId", dd.third_type AS "userInfo.thirdType", dd.third_icon AS "userInfo.thirdIcon", dd.member_lv AS "userInfo.memberLv", dd.member_flag AS "userInfo.memberFlag", dd.member_start AS "userInfo.memberStart", dd.member_end AS "userInfo.memberEnd", di.id AS "doctorInfos.id", di.doctorid AS "doctorInfos.doctorid", di.doctornum AS "doctorInfos.doctornum", di.name AS "doctorInfos.name", di.sex AS "doctorInfos.sex", di.age AS "doctorInfos.age", di.telephone AS "doctorInfos.telephone", di.idcard AS "doctorInfos.idcard", di.adress AS "doctorInfos.adress", di.technical AS "doctorInfos.technical", di.classify AS "doctorInfos.classify", di.introduce AS "doctorInfos.introduce", di.create_by AS "doctorInfos.createBy", di.cost AS "doctorInfos.cost", di.create_date AS "doctorInfos.createDate", di.update_by AS "doctorInfos.updateBy", di.update_date AS "doctorInfos.updateDate", di.remarks AS "doctorInfos.remarks", di.del_flag AS "doctorInfos.delFlag", di.cityid AS "doctorInfos.cityid", di.come_flag AS "doctorInfos.comeFlag", di.come_cost AS "doctorInfos.comeCost", di.own_flag AS "doctorInfos.ownFlag", di.first_count AS "doctorInfos.firstCount", di.star_lv AS "doctorInfos.starLv" FROM sys_tiaoli_order a LEFT JOIN sys_user_info dd ON a.userid = dd.id LEFT JOIN sys_doctor_info di ON a.docid = di.doctorid WHERE a.order_no = ? ORDER BY a.create_date DESC 
2019-07-09 10:04:03.642 DEBUG 4592 [io-8980-exec-10] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - ==> Parameters: 070910040393101(String)
2019-07-09 10:04:03.670 DEBUG 4592 [io-8980-exec-10] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - <==      Total: 1
2019-07-09 10:04:03.672 DEBUG 4592 [io-8980-exec-10] [c.j.c.m.m.provider.SelectSqlProvider   ] - 1毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", dd.id AS "userInfo.id", dd.mobile AS "userInfo.mobile", dd.password AS "userInfo.password", dd.icon AS "userInfo.icon", dd.regtime AS "userInfo.regtime", dd.lastlogin AS "userInfo.lastlogin", dd.islock AS "userInfo.islock", dd.isauthentication AS "userInfo.isauthentication", dd.type AS "userInfo.type", dd.create_by AS "userInfo.createBy", dd.create_date AS "userInfo.createDate", dd.update_by AS "userInfo.updateBy", dd.update_date AS "userInfo.updateDate", dd.remarks AS "userInfo.remarks", dd.del_flag AS "userInfo.delFlag", dd.nike_name AS "userInfo.nikeName", dd.is_invite AS "userInfo.isInvite", dd.third_id AS "userInfo.thirdId", dd.third_type AS "userInfo.thirdType", dd.third_icon AS "userInfo.thirdIcon", dd.member_lv AS "userInfo.memberLv", dd.member_flag AS "userInfo.memberFlag", dd.member_start AS "userInfo.memberStart", dd.member_end AS "userInfo.memberEnd", di.id AS "doctorInfos.id", di.doctorid AS "doctorInfos.doctorid", di.doctornum AS "doctorInfos.doctornum", di.name AS "doctorInfos.name", di.sex AS "doctorInfos.sex", di.age AS "doctorInfos.age", di.telephone AS "doctorInfos.telephone", di.idcard AS "doctorInfos.idcard", di.adress AS "doctorInfos.adress", di.technical AS "doctorInfos.technical", di.classify AS "doctorInfos.classify", di.introduce AS "doctorInfos.introduce", di.create_by AS "doctorInfos.createBy", di.cost AS "doctorInfos.cost", di.create_date AS "doctorInfos.createDate", di.update_by AS "doctorInfos.updateBy", di.update_date AS "doctorInfos.updateDate", di.remarks AS "doctorInfos.remarks", di.del_flag AS "doctorInfos.delFlag", di.cityid AS "doctorInfos.cityid", di.come_flag AS "doctorInfos.comeFlag", di.come_cost AS "doctorInfos.comeCost", di.own_flag AS "doctorInfos.ownFlag", di.first_count AS "doctorInfos.firstCount", di.star_lv AS "doctorInfos.starLv" FROM sys_tiaoli_order a LEFT JOIN sys_user_info dd ON a.userid = dd.id LEFT JOIN sys_doctor_info di ON a.docid = di.doctorid WHERE a.order_no = #{sqlMap.where#order_no#EQ1} ORDER BY a.create_date DESC
2019-07-09 10:04:03.672 DEBUG 4592 [io-8980-exec-10] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@6e5df971] will not be managed by Spring
2019-07-09 10:04:03.673 DEBUG 4592 [io-8980-exec-10] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", dd.id AS "userInfo.id", dd.mobile AS "userInfo.mobile", dd.password AS "userInfo.password", dd.icon AS "userInfo.icon", dd.regtime AS "userInfo.regtime", dd.lastlogin AS "userInfo.lastlogin", dd.islock AS "userInfo.islock", dd.isauthentication AS "userInfo.isauthentication", dd.type AS "userInfo.type", dd.create_by AS "userInfo.createBy", dd.create_date AS "userInfo.createDate", dd.update_by AS "userInfo.updateBy", dd.update_date AS "userInfo.updateDate", dd.remarks AS "userInfo.remarks", dd.del_flag AS "userInfo.delFlag", dd.nike_name AS "userInfo.nikeName", dd.is_invite AS "userInfo.isInvite", dd.third_id AS "userInfo.thirdId", dd.third_type AS "userInfo.thirdType", dd.third_icon AS "userInfo.thirdIcon", dd.member_lv AS "userInfo.memberLv", dd.member_flag AS "userInfo.memberFlag", dd.member_start AS "userInfo.memberStart", dd.member_end AS "userInfo.memberEnd", di.id AS "doctorInfos.id", di.doctorid AS "doctorInfos.doctorid", di.doctornum AS "doctorInfos.doctornum", di.name AS "doctorInfos.name", di.sex AS "doctorInfos.sex", di.age AS "doctorInfos.age", di.telephone AS "doctorInfos.telephone", di.idcard AS "doctorInfos.idcard", di.adress AS "doctorInfos.adress", di.technical AS "doctorInfos.technical", di.classify AS "doctorInfos.classify", di.introduce AS "doctorInfos.introduce", di.create_by AS "doctorInfos.createBy", di.cost AS "doctorInfos.cost", di.create_date AS "doctorInfos.createDate", di.update_by AS "doctorInfos.updateBy", di.update_date AS "doctorInfos.updateDate", di.remarks AS "doctorInfos.remarks", di.del_flag AS "doctorInfos.delFlag", di.cityid AS "doctorInfos.cityid", di.come_flag AS "doctorInfos.comeFlag", di.come_cost AS "doctorInfos.comeCost", di.own_flag AS "doctorInfos.ownFlag", di.first_count AS "doctorInfos.firstCount", di.star_lv AS "doctorInfos.starLv" FROM sys_tiaoli_order a LEFT JOIN sys_user_info dd ON a.userid = dd.id LEFT JOIN sys_doctor_info di ON a.docid = di.doctorid WHERE a.order_no = ? ORDER BY a.create_date DESC 
2019-07-09 10:04:03.674 DEBUG 4592 [io-8980-exec-10] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - ==> Parameters: 070910040393101(String)
2019-07-09 10:04:03.708 DEBUG 4592 [io-8980-exec-10] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - <==      Total: 1
2019-07-09 10:04:03.709 DEBUG 4592 [io-8980-exec-10] [c.j.c.m.m.provider.SelectSqlProvider   ] - 0毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.total_price AS "totalPrice", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag" FROM sys_member_order a WHERE a.order_no = #{sqlMap.where#order_no#EQ1} ORDER BY a.update_date DESC
2019-07-09 10:04:03.710 DEBUG 4592 [io-8980-exec-10] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@6e5df971] will not be managed by Spring
2019-07-09 10:04:03.711 DEBUG 4592 [io-8980-exec-10] [c.j.m.app.dao.MemberOrderDao.findList  ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.total_price AS "totalPrice", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag" FROM sys_member_order a WHERE a.order_no = ? ORDER BY a.update_date DESC 
2019-07-09 10:04:03.712 DEBUG 4592 [io-8980-exec-10] [c.j.m.app.dao.MemberOrderDao.findList  ] - ==> Parameters: 070910040393101(String)
2019-07-09 10:04:03.736 DEBUG 4592 [io-8980-exec-10] [c.j.m.app.dao.MemberOrderDao.findList  ] - <==      Total: 0
2019-07-09 10:04:03.736 DEBUG 4592 [io-8980-exec-10] [c.j.c.m.m.provider.SelectSqlProvider   ] - 0毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.total_price AS "totalPrice", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", a.doctor_user_id AS "doctorUserId" FROM sys_doctor_register_order a WHERE a.order_no = #{sqlMap.where#order_no#EQ1} ORDER BY a.update_date DESC
2019-07-09 10:04:03.737 DEBUG 4592 [io-8980-exec-10] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@6e5df971] will not be managed by Spring
2019-07-09 10:04:03.737 DEBUG 4592 [io-8980-exec-10] [c.j.m.a.d.D.findList                   ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.total_price AS "totalPrice", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", a.doctor_user_id AS "doctorUserId" FROM sys_doctor_register_order a WHERE a.order_no = ? ORDER BY a.update_date DESC 
2019-07-09 10:04:03.738 DEBUG 4592 [io-8980-exec-10] [c.j.m.a.d.D.findList                   ] - ==> Parameters: 070910040393101(String)
2019-07-09 10:04:03.760 DEBUG 4592 [io-8980-exec-10] [c.j.m.a.d.D.findList                   ] - <==      Total: 0
2019-07-09 10:04:03.761 DEBUG 4592 [io-8980-exec-10] [c.j.c.m.m.provider.SelectSqlProvider   ] - 0毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag" FROM sys_dashang_order a WHERE a.order_no = #{sqlMap.where#order_no#EQ1} ORDER BY a.update_date DESC
2019-07-09 10:04:03.762 DEBUG 4592 [io-8980-exec-10] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@6e5df971] will not be managed by Spring
2019-07-09 10:04:03.762 DEBUG 4592 [io-8980-exec-10] [c.j.m.app.dao.DashangOrderDao.findList ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag" FROM sys_dashang_order a WHERE a.order_no = ? ORDER BY a.update_date DESC 
2019-07-09 10:04:03.763 DEBUG 4592 [io-8980-exec-10] [c.j.m.app.dao.DashangOrderDao.findList ] - ==> Parameters: 070910040393101(String)
2019-07-09 10:04:03.786 DEBUG 4592 [io-8980-exec-10] [c.j.m.app.dao.DashangOrderDao.findList ] - <==      Total: 0
2019-07-09 10:04:03.811 DEBUG 4592 [io-8980-exec-10] [c.j.c.m.m.provider.UpdateSqlProvider   ] - 1毫秒: UPDATE sys_tiaoli_order SET `order_no` = #{orderNo}, `order_status` = #{orderStatus}, `count` = #{count}, `total_price` = #{totalPrice}, `come_cost` = #{comeCost}, `docid` = #{docid}, `userid` = #{userid}, `update_date` = #{updateDate}, `out_trade_no` = #{outTradeNo}, `del_flag` = #{delFlag} WHERE `id` = #{id}
2019-07-09 10:04:03.811 DEBUG 4592 [io-8980-exec-10] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@6e5df971] will be managed by Spring
2019-07-09 10:04:03.812 DEBUG 4592 [io-8980-exec-10] [c.j.m.app.dao.TiaoliOrderDao.update    ] - ==>  Preparing: UPDATE sys_tiaoli_order SET `order_no` = ?, `order_status` = ?, `count` = ?, `total_price` = ?, `come_cost` = ?, `docid` = ?, `userid` = ?, `update_date` = ?, `out_trade_no` = ?, `del_flag` = ? WHERE `id` = ? 
2019-07-09 10:04:03.812 DEBUG 4592 [io-8980-exec-10] [c.j.m.app.dao.TiaoliOrderDao.update    ] - ==> Parameters: 070910040393101(String), 0(String), 1(String), 1000(String), 1000(String), 0f2067603f1111e99752bcaec5595fa3(String), 32c6e1204fad11e9b780fa163e609e56(String), 2019-07-09 10:04:04.0(Timestamp), 2019070910040300002(String), 0(String), 1148412469819727872(String)
2019-07-09 10:04:03.860 DEBUG 4592 [io-8980-exec-10] [c.j.m.app.dao.TiaoliOrderDao.update    ] - <==    Updates: 1
2019-07-09 10:04:08.159 DEBUG 4592 [nio-8980-exec-3] [c.jeesite.modules.app.utils.AlipayUtil ] - 将要存入数据库的参数0.01,2019070910040300002,2019070922001497451057270404,
2019-07-09 10:04:08.160 DEBUG 4592 [nio-8980-exec-3] [c.j.c.m.m.provider.SelectSqlProvider   ] - 0毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.product_count AS "productCount", a.total_price AS "totalPrice", a.logistics_price AS "logisticsPrice", a.discount_price AS "discountPrice", a.really_price AS "reallyPrice", a.pay_channel AS "payChannel", a.out_trade_no AS "outTradeNo", a.create_date AS "createDate", a.update_date AS "updateDate", a.create_by AS "createBy", a.update_by AS "updateBy", a.pay_date AS "payDate", a.user_id AS "userId", a.address_id AS "addressId", a.logistics_id AS "logisticsId", a.delivery_date AS "deliveryDate", a.del_flag AS "delFlag", a.delivery_name AS "deliveryName", a.delivery_address AS "deliveryAddress", a.delivery_phone AS "deliveryPhone", a.total_count AS "totalCount", a.trade_no AS "tradeNo" FROM sys_order a WHERE a.out_trade_no = #{sqlMap.where#out_trade_no#EQ1} ORDER BY a.update_date DESC
2019-07-09 10:04:08.161 DEBUG 4592 [nio-8980-exec-3] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@6e5df971] will not be managed by Spring
2019-07-09 10:04:08.162 DEBUG 4592 [nio-8980-exec-3] [c.j.modules.app.dao.OrderDao.findList  ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.product_count AS "productCount", a.total_price AS "totalPrice", a.logistics_price AS "logisticsPrice", a.discount_price AS "discountPrice", a.really_price AS "reallyPrice", a.pay_channel AS "payChannel", a.out_trade_no AS "outTradeNo", a.create_date AS "createDate", a.update_date AS "updateDate", a.create_by AS "createBy", a.update_by AS "updateBy", a.pay_date AS "payDate", a.user_id AS "userId", a.address_id AS "addressId", a.logistics_id AS "logisticsId", a.delivery_date AS "deliveryDate", a.del_flag AS "delFlag", a.delivery_name AS "deliveryName", a.delivery_address AS "deliveryAddress", a.delivery_phone AS "deliveryPhone", a.total_count AS "totalCount", a.trade_no AS "tradeNo" FROM sys_order a WHERE a.out_trade_no = ? ORDER BY a.update_date DESC 
2019-07-09 10:04:08.162 DEBUG 4592 [nio-8980-exec-3] [c.j.modules.app.dao.OrderDao.findList  ] - ==> Parameters: 2019070910040300002(String)
2019-07-09 10:04:08.186 DEBUG 4592 [nio-8980-exec-3] [c.j.modules.app.dao.OrderDao.findList  ] - <==      Total: 0
2019-07-09 10:04:08.188 DEBUG 4592 [nio-8980-exec-3] [c.j.c.m.m.provider.SelectSqlProvider   ] - 1毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", dd.id AS "userInfo.id", dd.mobile AS "userInfo.mobile", dd.password AS "userInfo.password", dd.icon AS "userInfo.icon", dd.regtime AS "userInfo.regtime", dd.lastlogin AS "userInfo.lastlogin", dd.islock AS "userInfo.islock", dd.isauthentication AS "userInfo.isauthentication", dd.type AS "userInfo.type", dd.create_by AS "userInfo.createBy", dd.create_date AS "userInfo.createDate", dd.update_by AS "userInfo.updateBy", dd.update_date AS "userInfo.updateDate", dd.remarks AS "userInfo.remarks", dd.del_flag AS "userInfo.delFlag", dd.nike_name AS "userInfo.nikeName", dd.is_invite AS "userInfo.isInvite", dd.third_id AS "userInfo.thirdId", dd.third_type AS "userInfo.thirdType", dd.third_icon AS "userInfo.thirdIcon", dd.member_lv AS "userInfo.memberLv", dd.member_flag AS "userInfo.memberFlag", dd.member_start AS "userInfo.memberStart", dd.member_end AS "userInfo.memberEnd", di.id AS "doctorInfos.id", di.doctorid AS "doctorInfos.doctorid", di.doctornum AS "doctorInfos.doctornum", di.name AS "doctorInfos.name", di.sex AS "doctorInfos.sex", di.age AS "doctorInfos.age", di.telephone AS "doctorInfos.telephone", di.idcard AS "doctorInfos.idcard", di.adress AS "doctorInfos.adress", di.technical AS "doctorInfos.technical", di.classify AS "doctorInfos.classify", di.introduce AS "doctorInfos.introduce", di.create_by AS "doctorInfos.createBy", di.cost AS "doctorInfos.cost", di.create_date AS "doctorInfos.createDate", di.update_by AS "doctorInfos.updateBy", di.update_date AS "doctorInfos.updateDate", di.remarks AS "doctorInfos.remarks", di.del_flag AS "doctorInfos.delFlag", di.cityid AS "doctorInfos.cityid", di.come_flag AS "doctorInfos.comeFlag", di.come_cost AS "doctorInfos.comeCost", di.own_flag AS "doctorInfos.ownFlag", di.first_count AS "doctorInfos.firstCount", di.star_lv AS "doctorInfos.starLv" FROM sys_tiaoli_order a LEFT JOIN sys_user_info dd ON a.userid = dd.id LEFT JOIN sys_doctor_info di ON a.docid = di.doctorid WHERE a.out_trade_no = #{sqlMap.where#out_trade_no#EQ1} ORDER BY a.create_date DESC
2019-07-09 10:04:08.188 DEBUG 4592 [nio-8980-exec-3] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@6e5df971] will not be managed by Spring
2019-07-09 10:04:08.189 DEBUG 4592 [nio-8980-exec-3] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", dd.id AS "userInfo.id", dd.mobile AS "userInfo.mobile", dd.password AS "userInfo.password", dd.icon AS "userInfo.icon", dd.regtime AS "userInfo.regtime", dd.lastlogin AS "userInfo.lastlogin", dd.islock AS "userInfo.islock", dd.isauthentication AS "userInfo.isauthentication", dd.type AS "userInfo.type", dd.create_by AS "userInfo.createBy", dd.create_date AS "userInfo.createDate", dd.update_by AS "userInfo.updateBy", dd.update_date AS "userInfo.updateDate", dd.remarks AS "userInfo.remarks", dd.del_flag AS "userInfo.delFlag", dd.nike_name AS "userInfo.nikeName", dd.is_invite AS "userInfo.isInvite", dd.third_id AS "userInfo.thirdId", dd.third_type AS "userInfo.thirdType", dd.third_icon AS "userInfo.thirdIcon", dd.member_lv AS "userInfo.memberLv", dd.member_flag AS "userInfo.memberFlag", dd.member_start AS "userInfo.memberStart", dd.member_end AS "userInfo.memberEnd", di.id AS "doctorInfos.id", di.doctorid AS "doctorInfos.doctorid", di.doctornum AS "doctorInfos.doctornum", di.name AS "doctorInfos.name", di.sex AS "doctorInfos.sex", di.age AS "doctorInfos.age", di.telephone AS "doctorInfos.telephone", di.idcard AS "doctorInfos.idcard", di.adress AS "doctorInfos.adress", di.technical AS "doctorInfos.technical", di.classify AS "doctorInfos.classify", di.introduce AS "doctorInfos.introduce", di.create_by AS "doctorInfos.createBy", di.cost AS "doctorInfos.cost", di.create_date AS "doctorInfos.createDate", di.update_by AS "doctorInfos.updateBy", di.update_date AS "doctorInfos.updateDate", di.remarks AS "doctorInfos.remarks", di.del_flag AS "doctorInfos.delFlag", di.cityid AS "doctorInfos.cityid", di.come_flag AS "doctorInfos.comeFlag", di.come_cost AS "doctorInfos.comeCost", di.own_flag AS "doctorInfos.ownFlag", di.first_count AS "doctorInfos.firstCount", di.star_lv AS "doctorInfos.starLv" FROM sys_tiaoli_order a LEFT JOIN sys_user_info dd ON a.userid = dd.id LEFT JOIN sys_doctor_info di ON a.docid = di.doctorid WHERE a.out_trade_no = ? ORDER BY a.create_date DESC 
2019-07-09 10:04:08.190 DEBUG 4592 [nio-8980-exec-3] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - ==> Parameters: 2019070910040300002(String)
2019-07-09 10:04:08.218 DEBUG 4592 [nio-8980-exec-3] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - <==      Total: 1
2019-07-09 10:04:08.220 DEBUG 4592 [nio-8980-exec-3] [c.j.c.m.m.provider.SelectSqlProvider   ] - 1毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", dd.id AS "userInfo.id", dd.mobile AS "userInfo.mobile", dd.password AS "userInfo.password", dd.icon AS "userInfo.icon", dd.regtime AS "userInfo.regtime", dd.lastlogin AS "userInfo.lastlogin", dd.islock AS "userInfo.islock", dd.isauthentication AS "userInfo.isauthentication", dd.type AS "userInfo.type", dd.create_by AS "userInfo.createBy", dd.create_date AS "userInfo.createDate", dd.update_by AS "userInfo.updateBy", dd.update_date AS "userInfo.updateDate", dd.remarks AS "userInfo.remarks", dd.del_flag AS "userInfo.delFlag", dd.nike_name AS "userInfo.nikeName", dd.is_invite AS "userInfo.isInvite", dd.third_id AS "userInfo.thirdId", dd.third_type AS "userInfo.thirdType", dd.third_icon AS "userInfo.thirdIcon", dd.member_lv AS "userInfo.memberLv", dd.member_flag AS "userInfo.memberFlag", dd.member_start AS "userInfo.memberStart", dd.member_end AS "userInfo.memberEnd", di.id AS "doctorInfos.id", di.doctorid AS "doctorInfos.doctorid", di.doctornum AS "doctorInfos.doctornum", di.name AS "doctorInfos.name", di.sex AS "doctorInfos.sex", di.age AS "doctorInfos.age", di.telephone AS "doctorInfos.telephone", di.idcard AS "doctorInfos.idcard", di.adress AS "doctorInfos.adress", di.technical AS "doctorInfos.technical", di.classify AS "doctorInfos.classify", di.introduce AS "doctorInfos.introduce", di.create_by AS "doctorInfos.createBy", di.cost AS "doctorInfos.cost", di.create_date AS "doctorInfos.createDate", di.update_by AS "doctorInfos.updateBy", di.update_date AS "doctorInfos.updateDate", di.remarks AS "doctorInfos.remarks", di.del_flag AS "doctorInfos.delFlag", di.cityid AS "doctorInfos.cityid", di.come_flag AS "doctorInfos.comeFlag", di.come_cost AS "doctorInfos.comeCost", di.own_flag AS "doctorInfos.ownFlag", di.first_count AS "doctorInfos.firstCount", di.star_lv AS "doctorInfos.starLv" FROM sys_tiaoli_order a LEFT JOIN sys_user_info dd ON a.userid = dd.id LEFT JOIN sys_doctor_info di ON a.docid = di.doctorid WHERE a.out_trade_no = #{sqlMap.where#out_trade_no#EQ1} ORDER BY a.create_date DESC
2019-07-09 10:04:08.221 DEBUG 4592 [nio-8980-exec-3] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@6e5df971] will not be managed by Spring
2019-07-09 10:04:08.221 DEBUG 4592 [nio-8980-exec-3] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", dd.id AS "userInfo.id", dd.mobile AS "userInfo.mobile", dd.password AS "userInfo.password", dd.icon AS "userInfo.icon", dd.regtime AS "userInfo.regtime", dd.lastlogin AS "userInfo.lastlogin", dd.islock AS "userInfo.islock", dd.isauthentication AS "userInfo.isauthentication", dd.type AS "userInfo.type", dd.create_by AS "userInfo.createBy", dd.create_date AS "userInfo.createDate", dd.update_by AS "userInfo.updateBy", dd.update_date AS "userInfo.updateDate", dd.remarks AS "userInfo.remarks", dd.del_flag AS "userInfo.delFlag", dd.nike_name AS "userInfo.nikeName", dd.is_invite AS "userInfo.isInvite", dd.third_id AS "userInfo.thirdId", dd.third_type AS "userInfo.thirdType", dd.third_icon AS "userInfo.thirdIcon", dd.member_lv AS "userInfo.memberLv", dd.member_flag AS "userInfo.memberFlag", dd.member_start AS "userInfo.memberStart", dd.member_end AS "userInfo.memberEnd", di.id AS "doctorInfos.id", di.doctorid AS "doctorInfos.doctorid", di.doctornum AS "doctorInfos.doctornum", di.name AS "doctorInfos.name", di.sex AS "doctorInfos.sex", di.age AS "doctorInfos.age", di.telephone AS "doctorInfos.telephone", di.idcard AS "doctorInfos.idcard", di.adress AS "doctorInfos.adress", di.technical AS "doctorInfos.technical", di.classify AS "doctorInfos.classify", di.introduce AS "doctorInfos.introduce", di.create_by AS "doctorInfos.createBy", di.cost AS "doctorInfos.cost", di.create_date AS "doctorInfos.createDate", di.update_by AS "doctorInfos.updateBy", di.update_date AS "doctorInfos.updateDate", di.remarks AS "doctorInfos.remarks", di.del_flag AS "doctorInfos.delFlag", di.cityid AS "doctorInfos.cityid", di.come_flag AS "doctorInfos.comeFlag", di.come_cost AS "doctorInfos.comeCost", di.own_flag AS "doctorInfos.ownFlag", di.first_count AS "doctorInfos.firstCount", di.star_lv AS "doctorInfos.starLv" FROM sys_tiaoli_order a LEFT JOIN sys_user_info dd ON a.userid = dd.id LEFT JOIN sys_doctor_info di ON a.docid = di.doctorid WHERE a.out_trade_no = ? ORDER BY a.create_date DESC 
2019-07-09 10:04:08.222 DEBUG 4592 [nio-8980-exec-3] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - ==> Parameters: 2019070910040300002(String)
2019-07-09 10:04:08.248 DEBUG 4592 [nio-8980-exec-3] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - <==      Total: 1
2019-07-09 10:04:08.249 DEBUG 4592 [nio-8980-exec-3] [c.j.c.m.m.provider.SelectSqlProvider   ] - 0毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.total_price AS "totalPrice", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag" FROM sys_member_order a WHERE a.out_trade_no = #{sqlMap.where#out_trade_no#EQ1} ORDER BY a.update_date DESC
2019-07-09 10:04:08.250 DEBUG 4592 [nio-8980-exec-3] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@6e5df971] will not be managed by Spring
2019-07-09 10:04:08.250 DEBUG 4592 [nio-8980-exec-3] [c.j.m.app.dao.MemberOrderDao.findList  ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.total_price AS "totalPrice", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag" FROM sys_member_order a WHERE a.out_trade_no = ? ORDER BY a.update_date DESC 
2019-07-09 10:04:08.250 DEBUG 4592 [nio-8980-exec-3] [c.j.m.app.dao.MemberOrderDao.findList  ] - ==> Parameters: 2019070910040300002(String)
2019-07-09 10:04:08.274 DEBUG 4592 [nio-8980-exec-3] [c.j.m.app.dao.MemberOrderDao.findList  ] - <==      Total: 0
2019-07-09 10:04:08.275 DEBUG 4592 [nio-8980-exec-3] [c.j.c.m.m.provider.SelectSqlProvider   ] - 0毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.total_price AS "totalPrice", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", a.doctor_user_id AS "doctorUserId" FROM sys_doctor_register_order a WHERE a.out_trade_no = #{sqlMap.where#out_trade_no#EQ1} ORDER BY a.update_date DESC
2019-07-09 10:04:08.275 DEBUG 4592 [nio-8980-exec-3] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@6e5df971] will not be managed by Spring
2019-07-09 10:04:08.276 DEBUG 4592 [nio-8980-exec-3] [c.j.m.a.d.D.findList                   ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.total_price AS "totalPrice", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", a.doctor_user_id AS "doctorUserId" FROM sys_doctor_register_order a WHERE a.out_trade_no = ? ORDER BY a.update_date DESC 
2019-07-09 10:04:08.276 DEBUG 4592 [nio-8980-exec-3] [c.j.m.a.d.D.findList                   ] - ==> Parameters: 2019070910040300002(String)
2019-07-09 10:04:08.300 DEBUG 4592 [nio-8980-exec-3] [c.j.m.a.d.D.findList                   ] - <==      Total: 0
2019-07-09 10:04:08.301 DEBUG 4592 [nio-8980-exec-3] [c.j.c.m.m.provider.SelectSqlProvider   ] - 1毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag" FROM sys_dashang_order a WHERE a.out_trade_no = #{sqlMap.where#out_trade_no#EQ1} ORDER BY a.update_date DESC
2019-07-09 10:04:08.301 DEBUG 4592 [nio-8980-exec-3] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@6e5df971] will not be managed by Spring
2019-07-09 10:04:08.301 DEBUG 4592 [nio-8980-exec-3] [c.j.m.app.dao.DashangOrderDao.findList ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag" FROM sys_dashang_order a WHERE a.out_trade_no = ? ORDER BY a.update_date DESC 
2019-07-09 10:04:08.302 DEBUG 4592 [nio-8980-exec-3] [c.j.m.app.dao.DashangOrderDao.findList ] - ==> Parameters: 2019070910040300002(String)
2019-07-09 10:04:08.326 DEBUG 4592 [nio-8980-exec-3] [c.j.m.app.dao.DashangOrderDao.findList ] - <==      Total: 0
2019-07-09 10:04:08.350 DEBUG 4592 [nio-8980-exec-3] [c.j.c.m.m.provider.UpdateSqlProvider   ] - 1毫秒: UPDATE sys_tiaoli_order SET `order_no` = #{orderNo}, `order_status` = #{orderStatus}, `count` = #{count}, `total_price` = #{totalPrice}, `come_cost` = #{comeCost}, `docid` = #{docid}, `userid` = #{userid}, `update_date` = #{updateDate}, `out_trade_no` = #{outTradeNo}, `pay_date` = #{payDate}, `pay_channel` = #{payChannel}, `del_flag` = #{delFlag} WHERE `id` = #{id}
2019-07-09 10:04:08.350 DEBUG 4592 [nio-8980-exec-3] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@6e5df971] will be managed by Spring
2019-07-09 10:04:08.350 DEBUG 4592 [nio-8980-exec-3] [c.j.m.app.dao.TiaoliOrderDao.update    ] - ==>  Preparing: UPDATE sys_tiaoli_order SET `order_no` = ?, `order_status` = ?, `count` = ?, `total_price` = ?, `come_cost` = ?, `docid` = ?, `userid` = ?, `update_date` = ?, `out_trade_no` = ?, `pay_date` = ?, `pay_channel` = ?, `del_flag` = ? WHERE `id` = ? 
2019-07-09 10:04:08.352 DEBUG 4592 [nio-8980-exec-3] [c.j.m.app.dao.TiaoliOrderDao.update    ] - ==> Parameters: 070910040393101(String), 1(String), 1(String), 1000(String), 1000(String), 0f2067603f1111e99752bcaec5595fa3(String), 32c6e1204fad11e9b780fa163e609e56(String), 2019-07-09 10:04:04.0(Timestamp), 2019070910040300002(String), 2019-07-09 10:04:08.326(Timestamp), 支付宝(String), 0(String), 1148412469819727872(String)
2019-07-09 10:04:08.398 DEBUG 4592 [nio-8980-exec-3] [c.j.m.app.dao.TiaoliOrderDao.update    ] - <==    Updates: 1
2019-07-09 10:05:51.415 DEBUG 4592 [nio-8980-exec-7] [c.j.c.m.m.provider.SelectSqlProvider   ] - 1毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.product_count AS "productCount", a.total_price AS "totalPrice", a.logistics_price AS "logisticsPrice", a.discount_price AS "discountPrice", a.really_price AS "reallyPrice", a.pay_channel AS "payChannel", a.out_trade_no AS "outTradeNo", a.create_date AS "createDate", a.update_date AS "updateDate", a.create_by AS "createBy", a.update_by AS "updateBy", a.pay_date AS "payDate", a.user_id AS "userId", a.address_id AS "addressId", a.logistics_id AS "logisticsId", a.delivery_date AS "deliveryDate", a.del_flag AS "delFlag", a.delivery_name AS "deliveryName", a.delivery_address AS "deliveryAddress", a.delivery_phone AS "deliveryPhone", a.total_count AS "totalCount", a.trade_no AS "tradeNo" FROM sys_order a WHERE a.order_no = #{sqlMap.where#order_no#EQ1} ORDER BY a.update_date DESC
2019-07-09 10:05:51.439 DEBUG 4592 [nio-8980-exec-7] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@6e5df971] will not be managed by Spring
2019-07-09 10:05:51.440 DEBUG 4592 [nio-8980-exec-7] [c.j.modules.app.dao.OrderDao.findList  ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.product_count AS "productCount", a.total_price AS "totalPrice", a.logistics_price AS "logisticsPrice", a.discount_price AS "discountPrice", a.really_price AS "reallyPrice", a.pay_channel AS "payChannel", a.out_trade_no AS "outTradeNo", a.create_date AS "createDate", a.update_date AS "updateDate", a.create_by AS "createBy", a.update_by AS "updateBy", a.pay_date AS "payDate", a.user_id AS "userId", a.address_id AS "addressId", a.logistics_id AS "logisticsId", a.delivery_date AS "deliveryDate", a.del_flag AS "delFlag", a.delivery_name AS "deliveryName", a.delivery_address AS "deliveryAddress", a.delivery_phone AS "deliveryPhone", a.total_count AS "totalCount", a.trade_no AS "tradeNo" FROM sys_order a WHERE a.order_no = ? ORDER BY a.update_date DESC 
2019-07-09 10:05:51.440 DEBUG 4592 [nio-8980-exec-7] [c.j.modules.app.dao.OrderDao.findList  ] - ==> Parameters: 070910055174201(String)
2019-07-09 10:05:51.465 DEBUG 4592 [nio-8980-exec-7] [c.j.modules.app.dao.OrderDao.findList  ] - <==      Total: 0
2019-07-09 10:05:51.467 DEBUG 4592 [nio-8980-exec-7] [c.j.c.m.m.provider.SelectSqlProvider   ] - 1毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", dd.id AS "userInfo.id", dd.mobile AS "userInfo.mobile", dd.password AS "userInfo.password", dd.icon AS "userInfo.icon", dd.regtime AS "userInfo.regtime", dd.lastlogin AS "userInfo.lastlogin", dd.islock AS "userInfo.islock", dd.isauthentication AS "userInfo.isauthentication", dd.type AS "userInfo.type", dd.create_by AS "userInfo.createBy", dd.create_date AS "userInfo.createDate", dd.update_by AS "userInfo.updateBy", dd.update_date AS "userInfo.updateDate", dd.remarks AS "userInfo.remarks", dd.del_flag AS "userInfo.delFlag", dd.nike_name AS "userInfo.nikeName", dd.is_invite AS "userInfo.isInvite", dd.third_id AS "userInfo.thirdId", dd.third_type AS "userInfo.thirdType", dd.third_icon AS "userInfo.thirdIcon", dd.member_lv AS "userInfo.memberLv", dd.member_flag AS "userInfo.memberFlag", dd.member_start AS "userInfo.memberStart", dd.member_end AS "userInfo.memberEnd", di.id AS "doctorInfos.id", di.doctorid AS "doctorInfos.doctorid", di.doctornum AS "doctorInfos.doctornum", di.name AS "doctorInfos.name", di.sex AS "doctorInfos.sex", di.age AS "doctorInfos.age", di.telephone AS "doctorInfos.telephone", di.idcard AS "doctorInfos.idcard", di.adress AS "doctorInfos.adress", di.technical AS "doctorInfos.technical", di.classify AS "doctorInfos.classify", di.introduce AS "doctorInfos.introduce", di.create_by AS "doctorInfos.createBy", di.cost AS "doctorInfos.cost", di.create_date AS "doctorInfos.createDate", di.update_by AS "doctorInfos.updateBy", di.update_date AS "doctorInfos.updateDate", di.remarks AS "doctorInfos.remarks", di.del_flag AS "doctorInfos.delFlag", di.cityid AS "doctorInfos.cityid", di.come_flag AS "doctorInfos.comeFlag", di.come_cost AS "doctorInfos.comeCost", di.own_flag AS "doctorInfos.ownFlag", di.first_count AS "doctorInfos.firstCount", di.star_lv AS "doctorInfos.starLv" FROM sys_tiaoli_order a LEFT JOIN sys_user_info dd ON a.userid = dd.id LEFT JOIN sys_doctor_info di ON a.docid = di.doctorid WHERE a.order_no = #{sqlMap.where#order_no#EQ1} ORDER BY a.create_date DESC
2019-07-09 10:05:51.468 DEBUG 4592 [nio-8980-exec-7] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@6e5df971] will not be managed by Spring
2019-07-09 10:05:51.468 DEBUG 4592 [nio-8980-exec-7] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", dd.id AS "userInfo.id", dd.mobile AS "userInfo.mobile", dd.password AS "userInfo.password", dd.icon AS "userInfo.icon", dd.regtime AS "userInfo.regtime", dd.lastlogin AS "userInfo.lastlogin", dd.islock AS "userInfo.islock", dd.isauthentication AS "userInfo.isauthentication", dd.type AS "userInfo.type", dd.create_by AS "userInfo.createBy", dd.create_date AS "userInfo.createDate", dd.update_by AS "userInfo.updateBy", dd.update_date AS "userInfo.updateDate", dd.remarks AS "userInfo.remarks", dd.del_flag AS "userInfo.delFlag", dd.nike_name AS "userInfo.nikeName", dd.is_invite AS "userInfo.isInvite", dd.third_id AS "userInfo.thirdId", dd.third_type AS "userInfo.thirdType", dd.third_icon AS "userInfo.thirdIcon", dd.member_lv AS "userInfo.memberLv", dd.member_flag AS "userInfo.memberFlag", dd.member_start AS "userInfo.memberStart", dd.member_end AS "userInfo.memberEnd", di.id AS "doctorInfos.id", di.doctorid AS "doctorInfos.doctorid", di.doctornum AS "doctorInfos.doctornum", di.name AS "doctorInfos.name", di.sex AS "doctorInfos.sex", di.age AS "doctorInfos.age", di.telephone AS "doctorInfos.telephone", di.idcard AS "doctorInfos.idcard", di.adress AS "doctorInfos.adress", di.technical AS "doctorInfos.technical", di.classify AS "doctorInfos.classify", di.introduce AS "doctorInfos.introduce", di.create_by AS "doctorInfos.createBy", di.cost AS "doctorInfos.cost", di.create_date AS "doctorInfos.createDate", di.update_by AS "doctorInfos.updateBy", di.update_date AS "doctorInfos.updateDate", di.remarks AS "doctorInfos.remarks", di.del_flag AS "doctorInfos.delFlag", di.cityid AS "doctorInfos.cityid", di.come_flag AS "doctorInfos.comeFlag", di.come_cost AS "doctorInfos.comeCost", di.own_flag AS "doctorInfos.ownFlag", di.first_count AS "doctorInfos.firstCount", di.star_lv AS "doctorInfos.starLv" FROM sys_tiaoli_order a LEFT JOIN sys_user_info dd ON a.userid = dd.id LEFT JOIN sys_doctor_info di ON a.docid = di.doctorid WHERE a.order_no = ? ORDER BY a.create_date DESC 
2019-07-09 10:05:51.469 DEBUG 4592 [nio-8980-exec-7] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - ==> Parameters: 070910055174201(String)
2019-07-09 10:05:51.496 DEBUG 4592 [nio-8980-exec-7] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - <==      Total: 0
2019-07-09 10:05:51.497 DEBUG 4592 [nio-8980-exec-7] [c.j.c.m.m.provider.SelectSqlProvider   ] - 1毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", dd.id AS "userInfo.id", dd.mobile AS "userInfo.mobile", dd.password AS "userInfo.password", dd.icon AS "userInfo.icon", dd.regtime AS "userInfo.regtime", dd.lastlogin AS "userInfo.lastlogin", dd.islock AS "userInfo.islock", dd.isauthentication AS "userInfo.isauthentication", dd.type AS "userInfo.type", dd.create_by AS "userInfo.createBy", dd.create_date AS "userInfo.createDate", dd.update_by AS "userInfo.updateBy", dd.update_date AS "userInfo.updateDate", dd.remarks AS "userInfo.remarks", dd.del_flag AS "userInfo.delFlag", dd.nike_name AS "userInfo.nikeName", dd.is_invite AS "userInfo.isInvite", dd.third_id AS "userInfo.thirdId", dd.third_type AS "userInfo.thirdType", dd.third_icon AS "userInfo.thirdIcon", dd.member_lv AS "userInfo.memberLv", dd.member_flag AS "userInfo.memberFlag", dd.member_start AS "userInfo.memberStart", dd.member_end AS "userInfo.memberEnd", di.id AS "doctorInfos.id", di.doctorid AS "doctorInfos.doctorid", di.doctornum AS "doctorInfos.doctornum", di.name AS "doctorInfos.name", di.sex AS "doctorInfos.sex", di.age AS "doctorInfos.age", di.telephone AS "doctorInfos.telephone", di.idcard AS "doctorInfos.idcard", di.adress AS "doctorInfos.adress", di.technical AS "doctorInfos.technical", di.classify AS "doctorInfos.classify", di.introduce AS "doctorInfos.introduce", di.create_by AS "doctorInfos.createBy", di.cost AS "doctorInfos.cost", di.create_date AS "doctorInfos.createDate", di.update_by AS "doctorInfos.updateBy", di.update_date AS "doctorInfos.updateDate", di.remarks AS "doctorInfos.remarks", di.del_flag AS "doctorInfos.delFlag", di.cityid AS "doctorInfos.cityid", di.come_flag AS "doctorInfos.comeFlag", di.come_cost AS "doctorInfos.comeCost", di.own_flag AS "doctorInfos.ownFlag", di.first_count AS "doctorInfos.firstCount", di.star_lv AS "doctorInfos.starLv" FROM sys_tiaoli_order a LEFT JOIN sys_user_info dd ON a.userid = dd.id LEFT JOIN sys_doctor_info di ON a.docid = di.doctorid WHERE a.order_no = #{sqlMap.where#order_no#EQ1} ORDER BY a.create_date DESC
2019-07-09 10:05:51.498 DEBUG 4592 [nio-8980-exec-7] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@6e5df971] will not be managed by Spring
2019-07-09 10:05:51.498 DEBUG 4592 [nio-8980-exec-7] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", dd.id AS "userInfo.id", dd.mobile AS "userInfo.mobile", dd.password AS "userInfo.password", dd.icon AS "userInfo.icon", dd.regtime AS "userInfo.regtime", dd.lastlogin AS "userInfo.lastlogin", dd.islock AS "userInfo.islock", dd.isauthentication AS "userInfo.isauthentication", dd.type AS "userInfo.type", dd.create_by AS "userInfo.createBy", dd.create_date AS "userInfo.createDate", dd.update_by AS "userInfo.updateBy", dd.update_date AS "userInfo.updateDate", dd.remarks AS "userInfo.remarks", dd.del_flag AS "userInfo.delFlag", dd.nike_name AS "userInfo.nikeName", dd.is_invite AS "userInfo.isInvite", dd.third_id AS "userInfo.thirdId", dd.third_type AS "userInfo.thirdType", dd.third_icon AS "userInfo.thirdIcon", dd.member_lv AS "userInfo.memberLv", dd.member_flag AS "userInfo.memberFlag", dd.member_start AS "userInfo.memberStart", dd.member_end AS "userInfo.memberEnd", di.id AS "doctorInfos.id", di.doctorid AS "doctorInfos.doctorid", di.doctornum AS "doctorInfos.doctornum", di.name AS "doctorInfos.name", di.sex AS "doctorInfos.sex", di.age AS "doctorInfos.age", di.telephone AS "doctorInfos.telephone", di.idcard AS "doctorInfos.idcard", di.adress AS "doctorInfos.adress", di.technical AS "doctorInfos.technical", di.classify AS "doctorInfos.classify", di.introduce AS "doctorInfos.introduce", di.create_by AS "doctorInfos.createBy", di.cost AS "doctorInfos.cost", di.create_date AS "doctorInfos.createDate", di.update_by AS "doctorInfos.updateBy", di.update_date AS "doctorInfos.updateDate", di.remarks AS "doctorInfos.remarks", di.del_flag AS "doctorInfos.delFlag", di.cityid AS "doctorInfos.cityid", di.come_flag AS "doctorInfos.comeFlag", di.come_cost AS "doctorInfos.comeCost", di.own_flag AS "doctorInfos.ownFlag", di.first_count AS "doctorInfos.firstCount", di.star_lv AS "doctorInfos.starLv" FROM sys_tiaoli_order a LEFT JOIN sys_user_info dd ON a.userid = dd.id LEFT JOIN sys_doctor_info di ON a.docid = di.doctorid WHERE a.order_no = ? ORDER BY a.create_date DESC 
2019-07-09 10:05:51.499 DEBUG 4592 [nio-8980-exec-7] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - ==> Parameters: 070910055174201(String)
2019-07-09 10:05:51.525 DEBUG 4592 [nio-8980-exec-7] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - <==      Total: 0
2019-07-09 10:05:51.526 DEBUG 4592 [nio-8980-exec-7] [c.j.c.m.m.provider.SelectSqlProvider   ] - 1毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.total_price AS "totalPrice", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag" FROM sys_member_order a WHERE a.order_no = #{sqlMap.where#order_no#EQ1} ORDER BY a.update_date DESC
2019-07-09 10:05:51.526 DEBUG 4592 [nio-8980-exec-7] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@6e5df971] will not be managed by Spring
2019-07-09 10:05:51.527 DEBUG 4592 [nio-8980-exec-7] [c.j.m.app.dao.MemberOrderDao.findList  ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.total_price AS "totalPrice", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag" FROM sys_member_order a WHERE a.order_no = ? ORDER BY a.update_date DESC 
2019-07-09 10:05:51.527 DEBUG 4592 [nio-8980-exec-7] [c.j.m.app.dao.MemberOrderDao.findList  ] - ==> Parameters: 070910055174201(String)
2019-07-09 10:05:51.551 DEBUG 4592 [nio-8980-exec-7] [c.j.m.app.dao.MemberOrderDao.findList  ] - <==      Total: 0
2019-07-09 10:05:51.552 DEBUG 4592 [nio-8980-exec-7] [c.j.c.m.m.provider.SelectSqlProvider   ] - 1毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.total_price AS "totalPrice", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", a.doctor_user_id AS "doctorUserId" FROM sys_doctor_register_order a WHERE a.order_no = #{sqlMap.where#order_no#EQ1} ORDER BY a.update_date DESC
2019-07-09 10:05:51.552 DEBUG 4592 [nio-8980-exec-7] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@6e5df971] will not be managed by Spring
2019-07-09 10:05:51.553 DEBUG 4592 [nio-8980-exec-7] [c.j.m.a.d.D.findList                   ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.total_price AS "totalPrice", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", a.doctor_user_id AS "doctorUserId" FROM sys_doctor_register_order a WHERE a.order_no = ? ORDER BY a.update_date DESC 
2019-07-09 10:05:51.553 DEBUG 4592 [nio-8980-exec-7] [c.j.m.a.d.D.findList                   ] - ==> Parameters: 070910055174201(String)
2019-07-09 10:05:51.577 DEBUG 4592 [nio-8980-exec-7] [c.j.m.a.d.D.findList                   ] - <==      Total: 0
2019-07-09 10:05:51.578 DEBUG 4592 [nio-8980-exec-7] [c.j.c.m.m.provider.SelectSqlProvider   ] - 0毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag" FROM sys_dashang_order a WHERE a.order_no = #{sqlMap.where#order_no#EQ1} ORDER BY a.update_date DESC
2019-07-09 10:05:51.579 DEBUG 4592 [nio-8980-exec-7] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@6e5df971] will not be managed by Spring
2019-07-09 10:05:51.579 DEBUG 4592 [nio-8980-exec-7] [c.j.m.app.dao.DashangOrderDao.findList ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag" FROM sys_dashang_order a WHERE a.order_no = ? ORDER BY a.update_date DESC 
2019-07-09 10:05:51.579 DEBUG 4592 [nio-8980-exec-7] [c.j.m.app.dao.DashangOrderDao.findList ] - ==> Parameters: 070910055174201(String)
2019-07-09 10:05:51.604 DEBUG 4592 [nio-8980-exec-7] [c.j.m.app.dao.DashangOrderDao.findList ] - <==      Total: 1
2019-07-09 10:05:51.629 DEBUG 4592 [nio-8980-exec-7] [c.j.c.m.m.provider.UpdateSqlProvider   ] - 1毫秒: UPDATE sys_dashang_order SET `order_no` = #{orderNo}, `order_status` = #{orderStatus}, `total_price` = #{totalPrice}, `docid` = #{docid}, `userid` = #{userid}, `update_date` = #{updateDate}, `out_trade_no` = #{outTradeNo}, `del_flag` = #{delFlag} WHERE `id` = #{id}
2019-07-09 10:05:51.629 DEBUG 4592 [nio-8980-exec-7] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@6e5df971] will be managed by Spring
2019-07-09 10:05:51.629 DEBUG 4592 [nio-8980-exec-7] [c.j.m.app.dao.DashangOrderDao.update   ] - ==>  Preparing: UPDATE sys_dashang_order SET `order_no` = ?, `order_status` = ?, `total_price` = ?, `docid` = ?, `userid` = ?, `update_date` = ?, `out_trade_no` = ?, `del_flag` = ? WHERE `id` = ? 
2019-07-09 10:05:51.630 DEBUG 4592 [nio-8980-exec-7] [c.j.m.app.dao.DashangOrderDao.update   ] - ==> Parameters: 070910055174201(String), 0(String), 15(String), 60f82c4b925611e9b780fa163e609e56(String), 32c6e1204fad11e9b780fa163e609e56(String), 2019-07-09 10:05:52.0(Timestamp), 2019070910055100003(String), 0(String), 1148412922099916800(String)
2019-07-09 10:05:51.676 DEBUG 4592 [nio-8980-exec-7] [c.j.m.app.dao.DashangOrderDao.update   ] - <==    Updates: 1
2019-07-09 10:05:55.751 DEBUG 4592 [nio-8980-exec-6] [c.jeesite.modules.app.utils.AlipayUtil ] - 将要存入数据库的参数0.01,2019070910055100003,2019070922001497451057523483,
2019-07-09 10:05:55.752 DEBUG 4592 [nio-8980-exec-6] [c.j.c.m.m.provider.SelectSqlProvider   ] - 1毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.product_count AS "productCount", a.total_price AS "totalPrice", a.logistics_price AS "logisticsPrice", a.discount_price AS "discountPrice", a.really_price AS "reallyPrice", a.pay_channel AS "payChannel", a.out_trade_no AS "outTradeNo", a.create_date AS "createDate", a.update_date AS "updateDate", a.create_by AS "createBy", a.update_by AS "updateBy", a.pay_date AS "payDate", a.user_id AS "userId", a.address_id AS "addressId", a.logistics_id AS "logisticsId", a.delivery_date AS "deliveryDate", a.del_flag AS "delFlag", a.delivery_name AS "deliveryName", a.delivery_address AS "deliveryAddress", a.delivery_phone AS "deliveryPhone", a.total_count AS "totalCount", a.trade_no AS "tradeNo" FROM sys_order a WHERE a.out_trade_no = #{sqlMap.where#out_trade_no#EQ1} ORDER BY a.update_date DESC
2019-07-09 10:05:55.752 DEBUG 4592 [nio-8980-exec-6] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@6e5df971] will not be managed by Spring
2019-07-09 10:05:55.753 DEBUG 4592 [nio-8980-exec-6] [c.j.modules.app.dao.OrderDao.findList  ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.product_count AS "productCount", a.total_price AS "totalPrice", a.logistics_price AS "logisticsPrice", a.discount_price AS "discountPrice", a.really_price AS "reallyPrice", a.pay_channel AS "payChannel", a.out_trade_no AS "outTradeNo", a.create_date AS "createDate", a.update_date AS "updateDate", a.create_by AS "createBy", a.update_by AS "updateBy", a.pay_date AS "payDate", a.user_id AS "userId", a.address_id AS "addressId", a.logistics_id AS "logisticsId", a.delivery_date AS "deliveryDate", a.del_flag AS "delFlag", a.delivery_name AS "deliveryName", a.delivery_address AS "deliveryAddress", a.delivery_phone AS "deliveryPhone", a.total_count AS "totalCount", a.trade_no AS "tradeNo" FROM sys_order a WHERE a.out_trade_no = ? ORDER BY a.update_date DESC 
2019-07-09 10:05:55.753 DEBUG 4592 [nio-8980-exec-6] [c.j.modules.app.dao.OrderDao.findList  ] - ==> Parameters: 2019070910055100003(String)
2019-07-09 10:05:55.777 DEBUG 4592 [nio-8980-exec-6] [c.j.modules.app.dao.OrderDao.findList  ] - <==      Total: 0
2019-07-09 10:05:55.778 DEBUG 4592 [nio-8980-exec-6] [c.j.c.m.m.provider.SelectSqlProvider   ] - 0毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", dd.id AS "userInfo.id", dd.mobile AS "userInfo.mobile", dd.password AS "userInfo.password", dd.icon AS "userInfo.icon", dd.regtime AS "userInfo.regtime", dd.lastlogin AS "userInfo.lastlogin", dd.islock AS "userInfo.islock", dd.isauthentication AS "userInfo.isauthentication", dd.type AS "userInfo.type", dd.create_by AS "userInfo.createBy", dd.create_date AS "userInfo.createDate", dd.update_by AS "userInfo.updateBy", dd.update_date AS "userInfo.updateDate", dd.remarks AS "userInfo.remarks", dd.del_flag AS "userInfo.delFlag", dd.nike_name AS "userInfo.nikeName", dd.is_invite AS "userInfo.isInvite", dd.third_id AS "userInfo.thirdId", dd.third_type AS "userInfo.thirdType", dd.third_icon AS "userInfo.thirdIcon", dd.member_lv AS "userInfo.memberLv", dd.member_flag AS "userInfo.memberFlag", dd.member_start AS "userInfo.memberStart", dd.member_end AS "userInfo.memberEnd", di.id AS "doctorInfos.id", di.doctorid AS "doctorInfos.doctorid", di.doctornum AS "doctorInfos.doctornum", di.name AS "doctorInfos.name", di.sex AS "doctorInfos.sex", di.age AS "doctorInfos.age", di.telephone AS "doctorInfos.telephone", di.idcard AS "doctorInfos.idcard", di.adress AS "doctorInfos.adress", di.technical AS "doctorInfos.technical", di.classify AS "doctorInfos.classify", di.introduce AS "doctorInfos.introduce", di.create_by AS "doctorInfos.createBy", di.cost AS "doctorInfos.cost", di.create_date AS "doctorInfos.createDate", di.update_by AS "doctorInfos.updateBy", di.update_date AS "doctorInfos.updateDate", di.remarks AS "doctorInfos.remarks", di.del_flag AS "doctorInfos.delFlag", di.cityid AS "doctorInfos.cityid", di.come_flag AS "doctorInfos.comeFlag", di.come_cost AS "doctorInfos.comeCost", di.own_flag AS "doctorInfos.ownFlag", di.first_count AS "doctorInfos.firstCount", di.star_lv AS "doctorInfos.starLv" FROM sys_tiaoli_order a LEFT JOIN sys_user_info dd ON a.userid = dd.id LEFT JOIN sys_doctor_info di ON a.docid = di.doctorid WHERE a.out_trade_no = #{sqlMap.where#out_trade_no#EQ1} ORDER BY a.create_date DESC
2019-07-09 10:05:55.779 DEBUG 4592 [nio-8980-exec-6] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@6e5df971] will not be managed by Spring
2019-07-09 10:05:55.779 DEBUG 4592 [nio-8980-exec-6] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", dd.id AS "userInfo.id", dd.mobile AS "userInfo.mobile", dd.password AS "userInfo.password", dd.icon AS "userInfo.icon", dd.regtime AS "userInfo.regtime", dd.lastlogin AS "userInfo.lastlogin", dd.islock AS "userInfo.islock", dd.isauthentication AS "userInfo.isauthentication", dd.type AS "userInfo.type", dd.create_by AS "userInfo.createBy", dd.create_date AS "userInfo.createDate", dd.update_by AS "userInfo.updateBy", dd.update_date AS "userInfo.updateDate", dd.remarks AS "userInfo.remarks", dd.del_flag AS "userInfo.delFlag", dd.nike_name AS "userInfo.nikeName", dd.is_invite AS "userInfo.isInvite", dd.third_id AS "userInfo.thirdId", dd.third_type AS "userInfo.thirdType", dd.third_icon AS "userInfo.thirdIcon", dd.member_lv AS "userInfo.memberLv", dd.member_flag AS "userInfo.memberFlag", dd.member_start AS "userInfo.memberStart", dd.member_end AS "userInfo.memberEnd", di.id AS "doctorInfos.id", di.doctorid AS "doctorInfos.doctorid", di.doctornum AS "doctorInfos.doctornum", di.name AS "doctorInfos.name", di.sex AS "doctorInfos.sex", di.age AS "doctorInfos.age", di.telephone AS "doctorInfos.telephone", di.idcard AS "doctorInfos.idcard", di.adress AS "doctorInfos.adress", di.technical AS "doctorInfos.technical", di.classify AS "doctorInfos.classify", di.introduce AS "doctorInfos.introduce", di.create_by AS "doctorInfos.createBy", di.cost AS "doctorInfos.cost", di.create_date AS "doctorInfos.createDate", di.update_by AS "doctorInfos.updateBy", di.update_date AS "doctorInfos.updateDate", di.remarks AS "doctorInfos.remarks", di.del_flag AS "doctorInfos.delFlag", di.cityid AS "doctorInfos.cityid", di.come_flag AS "doctorInfos.comeFlag", di.come_cost AS "doctorInfos.comeCost", di.own_flag AS "doctorInfos.ownFlag", di.first_count AS "doctorInfos.firstCount", di.star_lv AS "doctorInfos.starLv" FROM sys_tiaoli_order a LEFT JOIN sys_user_info dd ON a.userid = dd.id LEFT JOIN sys_doctor_info di ON a.docid = di.doctorid WHERE a.out_trade_no = ? ORDER BY a.create_date DESC 
2019-07-09 10:05:55.780 DEBUG 4592 [nio-8980-exec-6] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - ==> Parameters: 2019070910055100003(String)
2019-07-09 10:05:55.806 DEBUG 4592 [nio-8980-exec-6] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - <==      Total: 0
2019-07-09 10:05:55.807 DEBUG 4592 [nio-8980-exec-6] [c.j.c.m.m.provider.SelectSqlProvider   ] - 1毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", dd.id AS "userInfo.id", dd.mobile AS "userInfo.mobile", dd.password AS "userInfo.password", dd.icon AS "userInfo.icon", dd.regtime AS "userInfo.regtime", dd.lastlogin AS "userInfo.lastlogin", dd.islock AS "userInfo.islock", dd.isauthentication AS "userInfo.isauthentication", dd.type AS "userInfo.type", dd.create_by AS "userInfo.createBy", dd.create_date AS "userInfo.createDate", dd.update_by AS "userInfo.updateBy", dd.update_date AS "userInfo.updateDate", dd.remarks AS "userInfo.remarks", dd.del_flag AS "userInfo.delFlag", dd.nike_name AS "userInfo.nikeName", dd.is_invite AS "userInfo.isInvite", dd.third_id AS "userInfo.thirdId", dd.third_type AS "userInfo.thirdType", dd.third_icon AS "userInfo.thirdIcon", dd.member_lv AS "userInfo.memberLv", dd.member_flag AS "userInfo.memberFlag", dd.member_start AS "userInfo.memberStart", dd.member_end AS "userInfo.memberEnd", di.id AS "doctorInfos.id", di.doctorid AS "doctorInfos.doctorid", di.doctornum AS "doctorInfos.doctornum", di.name AS "doctorInfos.name", di.sex AS "doctorInfos.sex", di.age AS "doctorInfos.age", di.telephone AS "doctorInfos.telephone", di.idcard AS "doctorInfos.idcard", di.adress AS "doctorInfos.adress", di.technical AS "doctorInfos.technical", di.classify AS "doctorInfos.classify", di.introduce AS "doctorInfos.introduce", di.create_by AS "doctorInfos.createBy", di.cost AS "doctorInfos.cost", di.create_date AS "doctorInfos.createDate", di.update_by AS "doctorInfos.updateBy", di.update_date AS "doctorInfos.updateDate", di.remarks AS "doctorInfos.remarks", di.del_flag AS "doctorInfos.delFlag", di.cityid AS "doctorInfos.cityid", di.come_flag AS "doctorInfos.comeFlag", di.come_cost AS "doctorInfos.comeCost", di.own_flag AS "doctorInfos.ownFlag", di.first_count AS "doctorInfos.firstCount", di.star_lv AS "doctorInfos.starLv" FROM sys_tiaoli_order a LEFT JOIN sys_user_info dd ON a.userid = dd.id LEFT JOIN sys_doctor_info di ON a.docid = di.doctorid WHERE a.out_trade_no = #{sqlMap.where#out_trade_no#EQ1} ORDER BY a.create_date DESC
2019-07-09 10:05:55.807 DEBUG 4592 [nio-8980-exec-6] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@6e5df971] will not be managed by Spring
2019-07-09 10:05:55.808 DEBUG 4592 [nio-8980-exec-6] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", dd.id AS "userInfo.id", dd.mobile AS "userInfo.mobile", dd.password AS "userInfo.password", dd.icon AS "userInfo.icon", dd.regtime AS "userInfo.regtime", dd.lastlogin AS "userInfo.lastlogin", dd.islock AS "userInfo.islock", dd.isauthentication AS "userInfo.isauthentication", dd.type AS "userInfo.type", dd.create_by AS "userInfo.createBy", dd.create_date AS "userInfo.createDate", dd.update_by AS "userInfo.updateBy", dd.update_date AS "userInfo.updateDate", dd.remarks AS "userInfo.remarks", dd.del_flag AS "userInfo.delFlag", dd.nike_name AS "userInfo.nikeName", dd.is_invite AS "userInfo.isInvite", dd.third_id AS "userInfo.thirdId", dd.third_type AS "userInfo.thirdType", dd.third_icon AS "userInfo.thirdIcon", dd.member_lv AS "userInfo.memberLv", dd.member_flag AS "userInfo.memberFlag", dd.member_start AS "userInfo.memberStart", dd.member_end AS "userInfo.memberEnd", di.id AS "doctorInfos.id", di.doctorid AS "doctorInfos.doctorid", di.doctornum AS "doctorInfos.doctornum", di.name AS "doctorInfos.name", di.sex AS "doctorInfos.sex", di.age AS "doctorInfos.age", di.telephone AS "doctorInfos.telephone", di.idcard AS "doctorInfos.idcard", di.adress AS "doctorInfos.adress", di.technical AS "doctorInfos.technical", di.classify AS "doctorInfos.classify", di.introduce AS "doctorInfos.introduce", di.create_by AS "doctorInfos.createBy", di.cost AS "doctorInfos.cost", di.create_date AS "doctorInfos.createDate", di.update_by AS "doctorInfos.updateBy", di.update_date AS "doctorInfos.updateDate", di.remarks AS "doctorInfos.remarks", di.del_flag AS "doctorInfos.delFlag", di.cityid AS "doctorInfos.cityid", di.come_flag AS "doctorInfos.comeFlag", di.come_cost AS "doctorInfos.comeCost", di.own_flag AS "doctorInfos.ownFlag", di.first_count AS "doctorInfos.firstCount", di.star_lv AS "doctorInfos.starLv" FROM sys_tiaoli_order a LEFT JOIN sys_user_info dd ON a.userid = dd.id LEFT JOIN sys_doctor_info di ON a.docid = di.doctorid WHERE a.out_trade_no = ? ORDER BY a.create_date DESC 
2019-07-09 10:05:55.808 DEBUG 4592 [nio-8980-exec-6] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - ==> Parameters: 2019070910055100003(String)
2019-07-09 10:05:55.835 DEBUG 4592 [nio-8980-exec-6] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - <==      Total: 0
2019-07-09 10:05:55.836 DEBUG 4592 [nio-8980-exec-6] [c.j.c.m.m.provider.SelectSqlProvider   ] - 0毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.total_price AS "totalPrice", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag" FROM sys_member_order a WHERE a.out_trade_no = #{sqlMap.where#out_trade_no#EQ1} ORDER BY a.update_date DESC
2019-07-09 10:05:55.837 DEBUG 4592 [nio-8980-exec-6] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@6e5df971] will not be managed by Spring
2019-07-09 10:05:55.838 DEBUG 4592 [nio-8980-exec-6] [c.j.m.app.dao.MemberOrderDao.findList  ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.total_price AS "totalPrice", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag" FROM sys_member_order a WHERE a.out_trade_no = ? ORDER BY a.update_date DESC 
2019-07-09 10:05:55.838 DEBUG 4592 [nio-8980-exec-6] [c.j.m.app.dao.MemberOrderDao.findList  ] - ==> Parameters: 2019070910055100003(String)
2019-07-09 10:05:55.861 DEBUG 4592 [nio-8980-exec-6] [c.j.m.app.dao.MemberOrderDao.findList  ] - <==      Total: 0
2019-07-09 10:05:55.862 DEBUG 4592 [nio-8980-exec-6] [c.j.c.m.m.provider.SelectSqlProvider   ] - 1毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.total_price AS "totalPrice", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", a.doctor_user_id AS "doctorUserId" FROM sys_doctor_register_order a WHERE a.out_trade_no = #{sqlMap.where#out_trade_no#EQ1} ORDER BY a.update_date DESC
2019-07-09 10:05:55.862 DEBUG 4592 [nio-8980-exec-6] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@6e5df971] will not be managed by Spring
2019-07-09 10:05:55.862 DEBUG 4592 [nio-8980-exec-6] [c.j.m.a.d.D.findList                   ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.total_price AS "totalPrice", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", a.doctor_user_id AS "doctorUserId" FROM sys_doctor_register_order a WHERE a.out_trade_no = ? ORDER BY a.update_date DESC 
2019-07-09 10:05:55.862 DEBUG 4592 [nio-8980-exec-6] [c.j.m.a.d.D.findList                   ] - ==> Parameters: 2019070910055100003(String)
2019-07-09 10:05:55.887 DEBUG 4592 [nio-8980-exec-6] [c.j.m.a.d.D.findList                   ] - <==      Total: 0
2019-07-09 10:05:55.887 DEBUG 4592 [nio-8980-exec-6] [c.j.c.m.m.provider.SelectSqlProvider   ] - 0毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag" FROM sys_dashang_order a WHERE a.out_trade_no = #{sqlMap.where#out_trade_no#EQ1} ORDER BY a.update_date DESC
2019-07-09 10:05:55.888 DEBUG 4592 [nio-8980-exec-6] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@6e5df971] will not be managed by Spring
2019-07-09 10:05:55.888 DEBUG 4592 [nio-8980-exec-6] [c.j.m.app.dao.DashangOrderDao.findList ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag" FROM sys_dashang_order a WHERE a.out_trade_no = ? ORDER BY a.update_date DESC 
2019-07-09 10:05:55.888 DEBUG 4592 [nio-8980-exec-6] [c.j.m.app.dao.DashangOrderDao.findList ] - ==> Parameters: 2019070910055100003(String)
2019-07-09 10:05:55.913 DEBUG 4592 [nio-8980-exec-6] [c.j.m.app.dao.DashangOrderDao.findList ] - <==      Total: 1
2019-07-09 10:05:55.936 DEBUG 4592 [nio-8980-exec-6] [c.j.c.m.m.provider.UpdateSqlProvider   ] - 0毫秒: UPDATE sys_dashang_order SET `order_no` = #{orderNo}, `order_status` = #{orderStatus}, `total_price` = #{totalPrice}, `docid` = #{docid}, `userid` = #{userid}, `update_date` = #{updateDate}, `out_trade_no` = #{outTradeNo}, `pay_date` = #{payDate}, `pay_channel` = #{payChannel}, `del_flag` = #{delFlag} WHERE `id` = #{id}
2019-07-09 10:05:55.936 DEBUG 4592 [nio-8980-exec-6] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@6e5df971] will be managed by Spring
2019-07-09 10:05:55.937 DEBUG 4592 [nio-8980-exec-6] [c.j.m.app.dao.DashangOrderDao.update   ] - ==>  Preparing: UPDATE sys_dashang_order SET `order_no` = ?, `order_status` = ?, `total_price` = ?, `docid` = ?, `userid` = ?, `update_date` = ?, `out_trade_no` = ?, `pay_date` = ?, `pay_channel` = ?, `del_flag` = ? WHERE `id` = ? 
2019-07-09 10:05:55.937 DEBUG 4592 [nio-8980-exec-6] [c.j.m.app.dao.DashangOrderDao.update   ] - ==> Parameters: 070910055174201(String), 1(String), 15(String), 60f82c4b925611e9b780fa163e609e56(String), 32c6e1204fad11e9b780fa163e609e56(String), 2019-07-09 10:05:52.0(Timestamp), 2019070910055100003(String), 2019-07-09 10:05:55.913(Timestamp), 微信(String), 0(String), 1148412922099916800(String)
2019-07-09 10:05:55.984 DEBUG 4592 [nio-8980-exec-6] [c.j.m.app.dao.DashangOrderDao.update   ] - <==    Updates: 1
2019-07-09 10:07:28.040 DEBUG 4592 [nio-8980-exec-1] [c.jeesite.modules.app.utils.AlipayUtil ] - 将要存入数据库的参数0.01,2019070910040300002,2019070922001497451057270404,
2019-07-09 10:07:28.041 DEBUG 4592 [nio-8980-exec-1] [c.j.c.m.m.provider.SelectSqlProvider   ] - 0毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.product_count AS "productCount", a.total_price AS "totalPrice", a.logistics_price AS "logisticsPrice", a.discount_price AS "discountPrice", a.really_price AS "reallyPrice", a.pay_channel AS "payChannel", a.out_trade_no AS "outTradeNo", a.create_date AS "createDate", a.update_date AS "updateDate", a.create_by AS "createBy", a.update_by AS "updateBy", a.pay_date AS "payDate", a.user_id AS "userId", a.address_id AS "addressId", a.logistics_id AS "logisticsId", a.delivery_date AS "deliveryDate", a.del_flag AS "delFlag", a.delivery_name AS "deliveryName", a.delivery_address AS "deliveryAddress", a.delivery_phone AS "deliveryPhone", a.total_count AS "totalCount", a.trade_no AS "tradeNo" FROM sys_order a WHERE a.out_trade_no = #{sqlMap.where#out_trade_no#EQ1} ORDER BY a.update_date DESC
2019-07-09 10:07:28.065 DEBUG 4592 [nio-8980-exec-1] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@6e5df971] will not be managed by Spring
2019-07-09 10:07:28.066 DEBUG 4592 [nio-8980-exec-1] [c.j.modules.app.dao.OrderDao.findList  ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.product_count AS "productCount", a.total_price AS "totalPrice", a.logistics_price AS "logisticsPrice", a.discount_price AS "discountPrice", a.really_price AS "reallyPrice", a.pay_channel AS "payChannel", a.out_trade_no AS "outTradeNo", a.create_date AS "createDate", a.update_date AS "updateDate", a.create_by AS "createBy", a.update_by AS "updateBy", a.pay_date AS "payDate", a.user_id AS "userId", a.address_id AS "addressId", a.logistics_id AS "logisticsId", a.delivery_date AS "deliveryDate", a.del_flag AS "delFlag", a.delivery_name AS "deliveryName", a.delivery_address AS "deliveryAddress", a.delivery_phone AS "deliveryPhone", a.total_count AS "totalCount", a.trade_no AS "tradeNo" FROM sys_order a WHERE a.out_trade_no = ? ORDER BY a.update_date DESC 
2019-07-09 10:07:28.066 DEBUG 4592 [nio-8980-exec-1] [c.j.modules.app.dao.OrderDao.findList  ] - ==> Parameters: 2019070910040300002(String)
2019-07-09 10:07:28.092 DEBUG 4592 [nio-8980-exec-1] [c.j.modules.app.dao.OrderDao.findList  ] - <==      Total: 0
2019-07-09 10:07:28.094 DEBUG 4592 [nio-8980-exec-1] [c.j.c.m.m.provider.SelectSqlProvider   ] - 2毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", dd.id AS "userInfo.id", dd.mobile AS "userInfo.mobile", dd.password AS "userInfo.password", dd.icon AS "userInfo.icon", dd.regtime AS "userInfo.regtime", dd.lastlogin AS "userInfo.lastlogin", dd.islock AS "userInfo.islock", dd.isauthentication AS "userInfo.isauthentication", dd.type AS "userInfo.type", dd.create_by AS "userInfo.createBy", dd.create_date AS "userInfo.createDate", dd.update_by AS "userInfo.updateBy", dd.update_date AS "userInfo.updateDate", dd.remarks AS "userInfo.remarks", dd.del_flag AS "userInfo.delFlag", dd.nike_name AS "userInfo.nikeName", dd.is_invite AS "userInfo.isInvite", dd.third_id AS "userInfo.thirdId", dd.third_type AS "userInfo.thirdType", dd.third_icon AS "userInfo.thirdIcon", dd.member_lv AS "userInfo.memberLv", dd.member_flag AS "userInfo.memberFlag", dd.member_start AS "userInfo.memberStart", dd.member_end AS "userInfo.memberEnd", di.id AS "doctorInfos.id", di.doctorid AS "doctorInfos.doctorid", di.doctornum AS "doctorInfos.doctornum", di.name AS "doctorInfos.name", di.sex AS "doctorInfos.sex", di.age AS "doctorInfos.age", di.telephone AS "doctorInfos.telephone", di.idcard AS "doctorInfos.idcard", di.adress AS "doctorInfos.adress", di.technical AS "doctorInfos.technical", di.classify AS "doctorInfos.classify", di.introduce AS "doctorInfos.introduce", di.create_by AS "doctorInfos.createBy", di.cost AS "doctorInfos.cost", di.create_date AS "doctorInfos.createDate", di.update_by AS "doctorInfos.updateBy", di.update_date AS "doctorInfos.updateDate", di.remarks AS "doctorInfos.remarks", di.del_flag AS "doctorInfos.delFlag", di.cityid AS "doctorInfos.cityid", di.come_flag AS "doctorInfos.comeFlag", di.come_cost AS "doctorInfos.comeCost", di.own_flag AS "doctorInfos.ownFlag", di.first_count AS "doctorInfos.firstCount", di.star_lv AS "doctorInfos.starLv" FROM sys_tiaoli_order a LEFT JOIN sys_user_info dd ON a.userid = dd.id LEFT JOIN sys_doctor_info di ON a.docid = di.doctorid WHERE a.out_trade_no = #{sqlMap.where#out_trade_no#EQ1} ORDER BY a.create_date DESC
2019-07-09 10:07:28.095 DEBUG 4592 [nio-8980-exec-1] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@6e5df971] will not be managed by Spring
2019-07-09 10:07:28.096 DEBUG 4592 [nio-8980-exec-1] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", dd.id AS "userInfo.id", dd.mobile AS "userInfo.mobile", dd.password AS "userInfo.password", dd.icon AS "userInfo.icon", dd.regtime AS "userInfo.regtime", dd.lastlogin AS "userInfo.lastlogin", dd.islock AS "userInfo.islock", dd.isauthentication AS "userInfo.isauthentication", dd.type AS "userInfo.type", dd.create_by AS "userInfo.createBy", dd.create_date AS "userInfo.createDate", dd.update_by AS "userInfo.updateBy", dd.update_date AS "userInfo.updateDate", dd.remarks AS "userInfo.remarks", dd.del_flag AS "userInfo.delFlag", dd.nike_name AS "userInfo.nikeName", dd.is_invite AS "userInfo.isInvite", dd.third_id AS "userInfo.thirdId", dd.third_type AS "userInfo.thirdType", dd.third_icon AS "userInfo.thirdIcon", dd.member_lv AS "userInfo.memberLv", dd.member_flag AS "userInfo.memberFlag", dd.member_start AS "userInfo.memberStart", dd.member_end AS "userInfo.memberEnd", di.id AS "doctorInfos.id", di.doctorid AS "doctorInfos.doctorid", di.doctornum AS "doctorInfos.doctornum", di.name AS "doctorInfos.name", di.sex AS "doctorInfos.sex", di.age AS "doctorInfos.age", di.telephone AS "doctorInfos.telephone", di.idcard AS "doctorInfos.idcard", di.adress AS "doctorInfos.adress", di.technical AS "doctorInfos.technical", di.classify AS "doctorInfos.classify", di.introduce AS "doctorInfos.introduce", di.create_by AS "doctorInfos.createBy", di.cost AS "doctorInfos.cost", di.create_date AS "doctorInfos.createDate", di.update_by AS "doctorInfos.updateBy", di.update_date AS "doctorInfos.updateDate", di.remarks AS "doctorInfos.remarks", di.del_flag AS "doctorInfos.delFlag", di.cityid AS "doctorInfos.cityid", di.come_flag AS "doctorInfos.comeFlag", di.come_cost AS "doctorInfos.comeCost", di.own_flag AS "doctorInfos.ownFlag", di.first_count AS "doctorInfos.firstCount", di.star_lv AS "doctorInfos.starLv" FROM sys_tiaoli_order a LEFT JOIN sys_user_info dd ON a.userid = dd.id LEFT JOIN sys_doctor_info di ON a.docid = di.doctorid WHERE a.out_trade_no = ? ORDER BY a.create_date DESC 
2019-07-09 10:07:28.096 DEBUG 4592 [nio-8980-exec-1] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - ==> Parameters: 2019070910040300002(String)
2019-07-09 10:07:28.125 DEBUG 4592 [nio-8980-exec-1] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - <==      Total: 1
2019-07-09 10:07:28.126 DEBUG 4592 [nio-8980-exec-1] [c.j.c.m.m.provider.SelectSqlProvider   ] - 1毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", dd.id AS "userInfo.id", dd.mobile AS "userInfo.mobile", dd.password AS "userInfo.password", dd.icon AS "userInfo.icon", dd.regtime AS "userInfo.regtime", dd.lastlogin AS "userInfo.lastlogin", dd.islock AS "userInfo.islock", dd.isauthentication AS "userInfo.isauthentication", dd.type AS "userInfo.type", dd.create_by AS "userInfo.createBy", dd.create_date AS "userInfo.createDate", dd.update_by AS "userInfo.updateBy", dd.update_date AS "userInfo.updateDate", dd.remarks AS "userInfo.remarks", dd.del_flag AS "userInfo.delFlag", dd.nike_name AS "userInfo.nikeName", dd.is_invite AS "userInfo.isInvite", dd.third_id AS "userInfo.thirdId", dd.third_type AS "userInfo.thirdType", dd.third_icon AS "userInfo.thirdIcon", dd.member_lv AS "userInfo.memberLv", dd.member_flag AS "userInfo.memberFlag", dd.member_start AS "userInfo.memberStart", dd.member_end AS "userInfo.memberEnd", di.id AS "doctorInfos.id", di.doctorid AS "doctorInfos.doctorid", di.doctornum AS "doctorInfos.doctornum", di.name AS "doctorInfos.name", di.sex AS "doctorInfos.sex", di.age AS "doctorInfos.age", di.telephone AS "doctorInfos.telephone", di.idcard AS "doctorInfos.idcard", di.adress AS "doctorInfos.adress", di.technical AS "doctorInfos.technical", di.classify AS "doctorInfos.classify", di.introduce AS "doctorInfos.introduce", di.create_by AS "doctorInfos.createBy", di.cost AS "doctorInfos.cost", di.create_date AS "doctorInfos.createDate", di.update_by AS "doctorInfos.updateBy", di.update_date AS "doctorInfos.updateDate", di.remarks AS "doctorInfos.remarks", di.del_flag AS "doctorInfos.delFlag", di.cityid AS "doctorInfos.cityid", di.come_flag AS "doctorInfos.comeFlag", di.come_cost AS "doctorInfos.comeCost", di.own_flag AS "doctorInfos.ownFlag", di.first_count AS "doctorInfos.firstCount", di.star_lv AS "doctorInfos.starLv" FROM sys_tiaoli_order a LEFT JOIN sys_user_info dd ON a.userid = dd.id LEFT JOIN sys_doctor_info di ON a.docid = di.doctorid WHERE a.out_trade_no = #{sqlMap.where#out_trade_no#EQ1} ORDER BY a.create_date DESC
2019-07-09 10:07:28.127 DEBUG 4592 [nio-8980-exec-1] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@6e5df971] will not be managed by Spring
2019-07-09 10:07:28.127 DEBUG 4592 [nio-8980-exec-1] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", dd.id AS "userInfo.id", dd.mobile AS "userInfo.mobile", dd.password AS "userInfo.password", dd.icon AS "userInfo.icon", dd.regtime AS "userInfo.regtime", dd.lastlogin AS "userInfo.lastlogin", dd.islock AS "userInfo.islock", dd.isauthentication AS "userInfo.isauthentication", dd.type AS "userInfo.type", dd.create_by AS "userInfo.createBy", dd.create_date AS "userInfo.createDate", dd.update_by AS "userInfo.updateBy", dd.update_date AS "userInfo.updateDate", dd.remarks AS "userInfo.remarks", dd.del_flag AS "userInfo.delFlag", dd.nike_name AS "userInfo.nikeName", dd.is_invite AS "userInfo.isInvite", dd.third_id AS "userInfo.thirdId", dd.third_type AS "userInfo.thirdType", dd.third_icon AS "userInfo.thirdIcon", dd.member_lv AS "userInfo.memberLv", dd.member_flag AS "userInfo.memberFlag", dd.member_start AS "userInfo.memberStart", dd.member_end AS "userInfo.memberEnd", di.id AS "doctorInfos.id", di.doctorid AS "doctorInfos.doctorid", di.doctornum AS "doctorInfos.doctornum", di.name AS "doctorInfos.name", di.sex AS "doctorInfos.sex", di.age AS "doctorInfos.age", di.telephone AS "doctorInfos.telephone", di.idcard AS "doctorInfos.idcard", di.adress AS "doctorInfos.adress", di.technical AS "doctorInfos.technical", di.classify AS "doctorInfos.classify", di.introduce AS "doctorInfos.introduce", di.create_by AS "doctorInfos.createBy", di.cost AS "doctorInfos.cost", di.create_date AS "doctorInfos.createDate", di.update_by AS "doctorInfos.updateBy", di.update_date AS "doctorInfos.updateDate", di.remarks AS "doctorInfos.remarks", di.del_flag AS "doctorInfos.delFlag", di.cityid AS "doctorInfos.cityid", di.come_flag AS "doctorInfos.comeFlag", di.come_cost AS "doctorInfos.comeCost", di.own_flag AS "doctorInfos.ownFlag", di.first_count AS "doctorInfos.firstCount", di.star_lv AS "doctorInfos.starLv" FROM sys_tiaoli_order a LEFT JOIN sys_user_info dd ON a.userid = dd.id LEFT JOIN sys_doctor_info di ON a.docid = di.doctorid WHERE a.out_trade_no = ? ORDER BY a.create_date DESC 
2019-07-09 10:07:28.128 DEBUG 4592 [nio-8980-exec-1] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - ==> Parameters: 2019070910040300002(String)
2019-07-09 10:07:28.155 DEBUG 4592 [nio-8980-exec-1] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - <==      Total: 1
2019-07-09 10:07:28.156 DEBUG 4592 [nio-8980-exec-1] [c.j.c.m.m.provider.SelectSqlProvider   ] - 1毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.total_price AS "totalPrice", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag" FROM sys_member_order a WHERE a.out_trade_no = #{sqlMap.where#out_trade_no#EQ1} ORDER BY a.update_date DESC
2019-07-09 10:07:28.156 DEBUG 4592 [nio-8980-exec-1] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@6e5df971] will not be managed by Spring
2019-07-09 10:07:28.157 DEBUG 4592 [nio-8980-exec-1] [c.j.m.app.dao.MemberOrderDao.findList  ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.total_price AS "totalPrice", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag" FROM sys_member_order a WHERE a.out_trade_no = ? ORDER BY a.update_date DESC 
2019-07-09 10:07:28.157 DEBUG 4592 [nio-8980-exec-1] [c.j.m.app.dao.MemberOrderDao.findList  ] - ==> Parameters: 2019070910040300002(String)
2019-07-09 10:07:28.181 DEBUG 4592 [nio-8980-exec-1] [c.j.m.app.dao.MemberOrderDao.findList  ] - <==      Total: 0
2019-07-09 10:07:28.182 DEBUG 4592 [nio-8980-exec-1] [c.j.c.m.m.provider.SelectSqlProvider   ] - 1毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.total_price AS "totalPrice", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", a.doctor_user_id AS "doctorUserId" FROM sys_doctor_register_order a WHERE a.out_trade_no = #{sqlMap.where#out_trade_no#EQ1} ORDER BY a.update_date DESC
2019-07-09 10:07:28.182 DEBUG 4592 [nio-8980-exec-1] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@6e5df971] will not be managed by Spring
2019-07-09 10:07:28.182 DEBUG 4592 [nio-8980-exec-1] [c.j.m.a.d.D.findList                   ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.total_price AS "totalPrice", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", a.doctor_user_id AS "doctorUserId" FROM sys_doctor_register_order a WHERE a.out_trade_no = ? ORDER BY a.update_date DESC 
2019-07-09 10:07:28.183 DEBUG 4592 [nio-8980-exec-1] [c.j.m.a.d.D.findList                   ] - ==> Parameters: 2019070910040300002(String)
2019-07-09 10:07:28.207 DEBUG 4592 [nio-8980-exec-1] [c.j.m.a.d.D.findList                   ] - <==      Total: 0
2019-07-09 10:07:28.208 DEBUG 4592 [nio-8980-exec-1] [c.j.c.m.m.provider.SelectSqlProvider   ] - 1毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag" FROM sys_dashang_order a WHERE a.out_trade_no = #{sqlMap.where#out_trade_no#EQ1} ORDER BY a.update_date DESC
2019-07-09 10:07:28.209 DEBUG 4592 [nio-8980-exec-1] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@6e5df971] will not be managed by Spring
2019-07-09 10:07:28.209 DEBUG 4592 [nio-8980-exec-1] [c.j.m.app.dao.DashangOrderDao.findList ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag" FROM sys_dashang_order a WHERE a.out_trade_no = ? ORDER BY a.update_date DESC 
2019-07-09 10:07:28.209 DEBUG 4592 [nio-8980-exec-1] [c.j.m.app.dao.DashangOrderDao.findList ] - ==> Parameters: 2019070910040300002(String)
2019-07-09 10:07:28.233 DEBUG 4592 [nio-8980-exec-1] [c.j.m.app.dao.DashangOrderDao.findList ] - <==      Total: 0
2019-07-09 10:08:03.385 DEBUG 4592 [nio-8980-exec-8] [c.jeesite.modules.app.utils.AlipayUtil ] - 将要存入数据库的参数0.01,2019070910055100003,2019070922001497451057523483,
2019-07-09 10:08:03.386 DEBUG 4592 [nio-8980-exec-8] [c.j.c.m.m.provider.SelectSqlProvider   ] - 1毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.product_count AS "productCount", a.total_price AS "totalPrice", a.logistics_price AS "logisticsPrice", a.discount_price AS "discountPrice", a.really_price AS "reallyPrice", a.pay_channel AS "payChannel", a.out_trade_no AS "outTradeNo", a.create_date AS "createDate", a.update_date AS "updateDate", a.create_by AS "createBy", a.update_by AS "updateBy", a.pay_date AS "payDate", a.user_id AS "userId", a.address_id AS "addressId", a.logistics_id AS "logisticsId", a.delivery_date AS "deliveryDate", a.del_flag AS "delFlag", a.delivery_name AS "deliveryName", a.delivery_address AS "deliveryAddress", a.delivery_phone AS "deliveryPhone", a.total_count AS "totalCount", a.trade_no AS "tradeNo" FROM sys_order a WHERE a.out_trade_no = #{sqlMap.where#out_trade_no#EQ1} ORDER BY a.update_date DESC
2019-07-09 10:08:03.387 DEBUG 4592 [nio-8980-exec-8] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@6e5df971] will not be managed by Spring
2019-07-09 10:08:03.388 DEBUG 4592 [nio-8980-exec-8] [c.j.modules.app.dao.OrderDao.findList  ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.product_count AS "productCount", a.total_price AS "totalPrice", a.logistics_price AS "logisticsPrice", a.discount_price AS "discountPrice", a.really_price AS "reallyPrice", a.pay_channel AS "payChannel", a.out_trade_no AS "outTradeNo", a.create_date AS "createDate", a.update_date AS "updateDate", a.create_by AS "createBy", a.update_by AS "updateBy", a.pay_date AS "payDate", a.user_id AS "userId", a.address_id AS "addressId", a.logistics_id AS "logisticsId", a.delivery_date AS "deliveryDate", a.del_flag AS "delFlag", a.delivery_name AS "deliveryName", a.delivery_address AS "deliveryAddress", a.delivery_phone AS "deliveryPhone", a.total_count AS "totalCount", a.trade_no AS "tradeNo" FROM sys_order a WHERE a.out_trade_no = ? ORDER BY a.update_date DESC 
2019-07-09 10:08:03.388 DEBUG 4592 [nio-8980-exec-8] [c.j.modules.app.dao.OrderDao.findList  ] - ==> Parameters: 2019070910055100003(String)
2019-07-09 10:08:03.413 DEBUG 4592 [nio-8980-exec-8] [c.j.modules.app.dao.OrderDao.findList  ] - <==      Total: 0
2019-07-09 10:08:03.414 DEBUG 4592 [nio-8980-exec-8] [c.j.c.m.m.provider.SelectSqlProvider   ] - 1毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", dd.id AS "userInfo.id", dd.mobile AS "userInfo.mobile", dd.password AS "userInfo.password", dd.icon AS "userInfo.icon", dd.regtime AS "userInfo.regtime", dd.lastlogin AS "userInfo.lastlogin", dd.islock AS "userInfo.islock", dd.isauthentication AS "userInfo.isauthentication", dd.type AS "userInfo.type", dd.create_by AS "userInfo.createBy", dd.create_date AS "userInfo.createDate", dd.update_by AS "userInfo.updateBy", dd.update_date AS "userInfo.updateDate", dd.remarks AS "userInfo.remarks", dd.del_flag AS "userInfo.delFlag", dd.nike_name AS "userInfo.nikeName", dd.is_invite AS "userInfo.isInvite", dd.third_id AS "userInfo.thirdId", dd.third_type AS "userInfo.thirdType", dd.third_icon AS "userInfo.thirdIcon", dd.member_lv AS "userInfo.memberLv", dd.member_flag AS "userInfo.memberFlag", dd.member_start AS "userInfo.memberStart", dd.member_end AS "userInfo.memberEnd", di.id AS "doctorInfos.id", di.doctorid AS "doctorInfos.doctorid", di.doctornum AS "doctorInfos.doctornum", di.name AS "doctorInfos.name", di.sex AS "doctorInfos.sex", di.age AS "doctorInfos.age", di.telephone AS "doctorInfos.telephone", di.idcard AS "doctorInfos.idcard", di.adress AS "doctorInfos.adress", di.technical AS "doctorInfos.technical", di.classify AS "doctorInfos.classify", di.introduce AS "doctorInfos.introduce", di.create_by AS "doctorInfos.createBy", di.cost AS "doctorInfos.cost", di.create_date AS "doctorInfos.createDate", di.update_by AS "doctorInfos.updateBy", di.update_date AS "doctorInfos.updateDate", di.remarks AS "doctorInfos.remarks", di.del_flag AS "doctorInfos.delFlag", di.cityid AS "doctorInfos.cityid", di.come_flag AS "doctorInfos.comeFlag", di.come_cost AS "doctorInfos.comeCost", di.own_flag AS "doctorInfos.ownFlag", di.first_count AS "doctorInfos.firstCount", di.star_lv AS "doctorInfos.starLv" FROM sys_tiaoli_order a LEFT JOIN sys_user_info dd ON a.userid = dd.id LEFT JOIN sys_doctor_info di ON a.docid = di.doctorid WHERE a.out_trade_no = #{sqlMap.where#out_trade_no#EQ1} ORDER BY a.create_date DESC
2019-07-09 10:08:03.415 DEBUG 4592 [nio-8980-exec-8] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@6e5df971] will not be managed by Spring
2019-07-09 10:08:03.416 DEBUG 4592 [nio-8980-exec-8] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", dd.id AS "userInfo.id", dd.mobile AS "userInfo.mobile", dd.password AS "userInfo.password", dd.icon AS "userInfo.icon", dd.regtime AS "userInfo.regtime", dd.lastlogin AS "userInfo.lastlogin", dd.islock AS "userInfo.islock", dd.isauthentication AS "userInfo.isauthentication", dd.type AS "userInfo.type", dd.create_by AS "userInfo.createBy", dd.create_date AS "userInfo.createDate", dd.update_by AS "userInfo.updateBy", dd.update_date AS "userInfo.updateDate", dd.remarks AS "userInfo.remarks", dd.del_flag AS "userInfo.delFlag", dd.nike_name AS "userInfo.nikeName", dd.is_invite AS "userInfo.isInvite", dd.third_id AS "userInfo.thirdId", dd.third_type AS "userInfo.thirdType", dd.third_icon AS "userInfo.thirdIcon", dd.member_lv AS "userInfo.memberLv", dd.member_flag AS "userInfo.memberFlag", dd.member_start AS "userInfo.memberStart", dd.member_end AS "userInfo.memberEnd", di.id AS "doctorInfos.id", di.doctorid AS "doctorInfos.doctorid", di.doctornum AS "doctorInfos.doctornum", di.name AS "doctorInfos.name", di.sex AS "doctorInfos.sex", di.age AS "doctorInfos.age", di.telephone AS "doctorInfos.telephone", di.idcard AS "doctorInfos.idcard", di.adress AS "doctorInfos.adress", di.technical AS "doctorInfos.technical", di.classify AS "doctorInfos.classify", di.introduce AS "doctorInfos.introduce", di.create_by AS "doctorInfos.createBy", di.cost AS "doctorInfos.cost", di.create_date AS "doctorInfos.createDate", di.update_by AS "doctorInfos.updateBy", di.update_date AS "doctorInfos.updateDate", di.remarks AS "doctorInfos.remarks", di.del_flag AS "doctorInfos.delFlag", di.cityid AS "doctorInfos.cityid", di.come_flag AS "doctorInfos.comeFlag", di.come_cost AS "doctorInfos.comeCost", di.own_flag AS "doctorInfos.ownFlag", di.first_count AS "doctorInfos.firstCount", di.star_lv AS "doctorInfos.starLv" FROM sys_tiaoli_order a LEFT JOIN sys_user_info dd ON a.userid = dd.id LEFT JOIN sys_doctor_info di ON a.docid = di.doctorid WHERE a.out_trade_no = ? ORDER BY a.create_date DESC 
2019-07-09 10:08:03.417 DEBUG 4592 [nio-8980-exec-8] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - ==> Parameters: 2019070910055100003(String)
2019-07-09 10:08:03.444 DEBUG 4592 [nio-8980-exec-8] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - <==      Total: 0
2019-07-09 10:08:03.446 DEBUG 4592 [nio-8980-exec-8] [c.j.c.m.m.provider.SelectSqlProvider   ] - 1毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", dd.id AS "userInfo.id", dd.mobile AS "userInfo.mobile", dd.password AS "userInfo.password", dd.icon AS "userInfo.icon", dd.regtime AS "userInfo.regtime", dd.lastlogin AS "userInfo.lastlogin", dd.islock AS "userInfo.islock", dd.isauthentication AS "userInfo.isauthentication", dd.type AS "userInfo.type", dd.create_by AS "userInfo.createBy", dd.create_date AS "userInfo.createDate", dd.update_by AS "userInfo.updateBy", dd.update_date AS "userInfo.updateDate", dd.remarks AS "userInfo.remarks", dd.del_flag AS "userInfo.delFlag", dd.nike_name AS "userInfo.nikeName", dd.is_invite AS "userInfo.isInvite", dd.third_id AS "userInfo.thirdId", dd.third_type AS "userInfo.thirdType", dd.third_icon AS "userInfo.thirdIcon", dd.member_lv AS "userInfo.memberLv", dd.member_flag AS "userInfo.memberFlag", dd.member_start AS "userInfo.memberStart", dd.member_end AS "userInfo.memberEnd", di.id AS "doctorInfos.id", di.doctorid AS "doctorInfos.doctorid", di.doctornum AS "doctorInfos.doctornum", di.name AS "doctorInfos.name", di.sex AS "doctorInfos.sex", di.age AS "doctorInfos.age", di.telephone AS "doctorInfos.telephone", di.idcard AS "doctorInfos.idcard", di.adress AS "doctorInfos.adress", di.technical AS "doctorInfos.technical", di.classify AS "doctorInfos.classify", di.introduce AS "doctorInfos.introduce", di.create_by AS "doctorInfos.createBy", di.cost AS "doctorInfos.cost", di.create_date AS "doctorInfos.createDate", di.update_by AS "doctorInfos.updateBy", di.update_date AS "doctorInfos.updateDate", di.remarks AS "doctorInfos.remarks", di.del_flag AS "doctorInfos.delFlag", di.cityid AS "doctorInfos.cityid", di.come_flag AS "doctorInfos.comeFlag", di.come_cost AS "doctorInfos.comeCost", di.own_flag AS "doctorInfos.ownFlag", di.first_count AS "doctorInfos.firstCount", di.star_lv AS "doctorInfos.starLv" FROM sys_tiaoli_order a LEFT JOIN sys_user_info dd ON a.userid = dd.id LEFT JOIN sys_doctor_info di ON a.docid = di.doctorid WHERE a.out_trade_no = #{sqlMap.where#out_trade_no#EQ1} ORDER BY a.create_date DESC
2019-07-09 10:08:03.447 DEBUG 4592 [nio-8980-exec-8] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@6e5df971] will not be managed by Spring
2019-07-09 10:08:03.448 DEBUG 4592 [nio-8980-exec-8] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", dd.id AS "userInfo.id", dd.mobile AS "userInfo.mobile", dd.password AS "userInfo.password", dd.icon AS "userInfo.icon", dd.regtime AS "userInfo.regtime", dd.lastlogin AS "userInfo.lastlogin", dd.islock AS "userInfo.islock", dd.isauthentication AS "userInfo.isauthentication", dd.type AS "userInfo.type", dd.create_by AS "userInfo.createBy", dd.create_date AS "userInfo.createDate", dd.update_by AS "userInfo.updateBy", dd.update_date AS "userInfo.updateDate", dd.remarks AS "userInfo.remarks", dd.del_flag AS "userInfo.delFlag", dd.nike_name AS "userInfo.nikeName", dd.is_invite AS "userInfo.isInvite", dd.third_id AS "userInfo.thirdId", dd.third_type AS "userInfo.thirdType", dd.third_icon AS "userInfo.thirdIcon", dd.member_lv AS "userInfo.memberLv", dd.member_flag AS "userInfo.memberFlag", dd.member_start AS "userInfo.memberStart", dd.member_end AS "userInfo.memberEnd", di.id AS "doctorInfos.id", di.doctorid AS "doctorInfos.doctorid", di.doctornum AS "doctorInfos.doctornum", di.name AS "doctorInfos.name", di.sex AS "doctorInfos.sex", di.age AS "doctorInfos.age", di.telephone AS "doctorInfos.telephone", di.idcard AS "doctorInfos.idcard", di.adress AS "doctorInfos.adress", di.technical AS "doctorInfos.technical", di.classify AS "doctorInfos.classify", di.introduce AS "doctorInfos.introduce", di.create_by AS "doctorInfos.createBy", di.cost AS "doctorInfos.cost", di.create_date AS "doctorInfos.createDate", di.update_by AS "doctorInfos.updateBy", di.update_date AS "doctorInfos.updateDate", di.remarks AS "doctorInfos.remarks", di.del_flag AS "doctorInfos.delFlag", di.cityid AS "doctorInfos.cityid", di.come_flag AS "doctorInfos.comeFlag", di.come_cost AS "doctorInfos.comeCost", di.own_flag AS "doctorInfos.ownFlag", di.first_count AS "doctorInfos.firstCount", di.star_lv AS "doctorInfos.starLv" FROM sys_tiaoli_order a LEFT JOIN sys_user_info dd ON a.userid = dd.id LEFT JOIN sys_doctor_info di ON a.docid = di.doctorid WHERE a.out_trade_no = ? ORDER BY a.create_date DESC 
2019-07-09 10:08:03.448 DEBUG 4592 [nio-8980-exec-8] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - ==> Parameters: 2019070910055100003(String)
2019-07-09 10:08:03.473 DEBUG 4592 [nio-8980-exec-8] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - <==      Total: 0
2019-07-09 10:08:03.474 DEBUG 4592 [nio-8980-exec-8] [c.j.c.m.m.provider.SelectSqlProvider   ] - 1毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.total_price AS "totalPrice", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag" FROM sys_member_order a WHERE a.out_trade_no = #{sqlMap.where#out_trade_no#EQ1} ORDER BY a.update_date DESC
2019-07-09 10:08:03.474 DEBUG 4592 [nio-8980-exec-8] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@6e5df971] will not be managed by Spring
2019-07-09 10:08:03.474 DEBUG 4592 [nio-8980-exec-8] [c.j.m.app.dao.MemberOrderDao.findList  ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.total_price AS "totalPrice", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag" FROM sys_member_order a WHERE a.out_trade_no = ? ORDER BY a.update_date DESC 
2019-07-09 10:08:03.475 DEBUG 4592 [nio-8980-exec-8] [c.j.m.app.dao.MemberOrderDao.findList  ] - ==> Parameters: 2019070910055100003(String)
2019-07-09 10:08:03.498 DEBUG 4592 [nio-8980-exec-8] [c.j.m.app.dao.MemberOrderDao.findList  ] - <==      Total: 0
2019-07-09 10:08:03.499 DEBUG 4592 [nio-8980-exec-8] [c.j.c.m.m.provider.SelectSqlProvider   ] - 0毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.total_price AS "totalPrice", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", a.doctor_user_id AS "doctorUserId" FROM sys_doctor_register_order a WHERE a.out_trade_no = #{sqlMap.where#out_trade_no#EQ1} ORDER BY a.update_date DESC
2019-07-09 10:08:03.499 DEBUG 4592 [nio-8980-exec-8] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@6e5df971] will not be managed by Spring
2019-07-09 10:08:03.500 DEBUG 4592 [nio-8980-exec-8] [c.j.m.a.d.D.findList                   ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.total_price AS "totalPrice", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", a.doctor_user_id AS "doctorUserId" FROM sys_doctor_register_order a WHERE a.out_trade_no = ? ORDER BY a.update_date DESC 
2019-07-09 10:08:03.500 DEBUG 4592 [nio-8980-exec-8] [c.j.m.a.d.D.findList                   ] - ==> Parameters: 2019070910055100003(String)
2019-07-09 10:08:03.525 DEBUG 4592 [nio-8980-exec-8] [c.j.m.a.d.D.findList                   ] - <==      Total: 0
2019-07-09 10:08:03.526 DEBUG 4592 [nio-8980-exec-8] [c.j.c.m.m.provider.SelectSqlProvider   ] - 1毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag" FROM sys_dashang_order a WHERE a.out_trade_no = #{sqlMap.where#out_trade_no#EQ1} ORDER BY a.update_date DESC
2019-07-09 10:08:03.526 DEBUG 4592 [nio-8980-exec-8] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@6e5df971] will not be managed by Spring
2019-07-09 10:08:03.527 DEBUG 4592 [nio-8980-exec-8] [c.j.m.app.dao.DashangOrderDao.findList ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag" FROM sys_dashang_order a WHERE a.out_trade_no = ? ORDER BY a.update_date DESC 
2019-07-09 10:08:03.527 DEBUG 4592 [nio-8980-exec-8] [c.j.m.app.dao.DashangOrderDao.findList ] - ==> Parameters: 2019070910055100003(String)
2019-07-09 10:08:03.551 DEBUG 4592 [nio-8980-exec-8] [c.j.m.app.dao.DashangOrderDao.findList ] - <==      Total: 1
2019-07-09 10:17:16.850 INFO  9972 [           main] [com.jeesite.modules.Application        ] - Starting Application on DESKTOP-FVHI4E5 with PID 9972 (E:\gitlabHome\HaoLangZhongProject\HaoLangZhong\src\main\webapp\WEB-INF\classes started by 1111111 in E:\gitlabHome\HaoLangZhongProject\HaoLangZhong)
2019-07-09 10:17:16.855 DEBUG 9972 [           main] [com.jeesite.modules.Application        ] - Running with Spring Boot v2.0.6.RELEASE, Spring v5.0.10.RELEASE
2019-07-09 10:17:16.855 INFO  9972 [           main] [com.jeesite.modules.Application        ] - The following profiles are active: default
2019-07-09 10:17:18.985 INFO  9972 [           main] [com.jeesite.common.config.Global       ] - Config files: [classpath:config/jeesite-core.yml, classpath:config/application.yml]
2019-07-09 10:17:18.986 INFO  9972 [           main] [com.jeesite.common.config.Global       ] - Spring cache cluster mode: false, session manager name: J1CacheSession
2019-07-09 10:17:19.605 INFO  9972 [           main] [com.jeesite.common.config.Global       ] - user.home: C:/Users/15040
2019-07-09 10:17:19.606 INFO  9972 [           main] [com.jeesite.common.config.Global       ] - user.dir: E:/gitlabHome/HaoLangZhongProject/HaoLangZhong
2019-07-09 10:17:19.606 INFO  9972 [           main] [com.jeesite.common.config.Global       ] - logPath: E:/gitlabHome/HaoLangZhongProject/HaoLangZhong/src/main/webapp/WEB-INF/classes

   _____        ___  _   _           ___
  |_   _|      / __'(_)_| |_        /   |
  _ | | __  __ \___ | |_   _| __   / /| |
 ( .| |/__\/__\ ___)| | | |_ /__\ / /_| |_
  \___|\__.\__.|____|_| \___)\__.(____   _|  :: JeeSite V4.1.3 :: 
======================================|_|==========================

    欢迎使用 JeeSite Demo V4.1

    您当前的版本为社区版，官方网站：http://jeesite.com

    机器码是：6c59ab5175477606a72e1628bfd13f1a
    产品名称：JeeSite Demo
    公司名称：ThinkGem

===================================================================

2019-07-09 10:17:20.896 INFO  9972 [           main] [o.s.b.w.embedded.tomcat.TomcatWebServer] - Tomcat initialized with port(s): 8980 (http)
2019-07-09 10:17:22.080 DEBUG 9972 [           main] [c.j.common.datasource.RoutingDataSource] - Set default target data source success.
2019-07-09 10:17:27.998 DEBUG 9972 [           main] [com.jeesite.common.beetl.BeetlUtils    ] - Beetl config files: [classpath:/config/beetl-core.properties, classpath:/config/beetl.properties]
2019-07-09 10:17:28.282 DEBUG 9972 [           main] [c.j.c.m.m.provider.SelectSqlProvider   ] - 2毫秒: SELECT a.status AS "status", a.create_by AS "createBy", a.create_date AS "createDate", a.update_by AS "updateBy", a.update_date AS "updateDate", a.remarks AS "remarks", a.module_code AS "moduleCode", a.module_name AS "moduleName", a.description AS "description", a.main_class_name AS "mainClassName", a.current_version AS "currentVersion", a.upgrade_info AS "upgradeInfo" FROM js_sys_module a WHERE a.status = #{sqlMap.where#status#EQ1} ORDER BY a.update_date DESC
2019-07-09 10:17:28.299 DEBUG 9972 [           main] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@3e8995cc] will not be managed by Spring
2019-07-09 10:17:28.310 DEBUG 9972 [           main] [c.j.modules.sys.dao.ModuleDao.findList ] - ==>  Preparing: SELECT a.status AS "status", a.create_by AS "createBy", a.create_date AS "createDate", a.update_by AS "updateBy", a.update_date AS "updateDate", a.remarks AS "remarks", a.module_code AS "moduleCode", a.module_name AS "moduleName", a.description AS "description", a.main_class_name AS "mainClassName", a.current_version AS "currentVersion", a.upgrade_info AS "upgradeInfo" FROM js_sys_module a WHERE a.status = ? ORDER BY a.update_date DESC 
2019-07-09 10:17:28.336 DEBUG 9972 [           main] [c.j.modules.sys.dao.ModuleDao.findList ] - ==> Parameters: 0(String)
2019-07-09 10:17:28.377 DEBUG 9972 [           main] [c.j.modules.sys.dao.ModuleDao.findList ] - <==      Total: 2
2019-07-09 10:17:28.498 DEBUG 9972 [           main] [c.j.c.m.m.provider.SelectSqlProvider   ] - 0毫秒: SELECT a.corp_code AS "corpCode", a.corp_name AS "corpName", a.status AS "status", a.create_by AS "createBy", a.create_date AS "createDate", a.update_by AS "updateBy", a.update_date AS "updateDate", a.remarks AS "remarks", a.user_code AS "userCode", a.login_code AS "loginCode", a.user_name AS "userName", a.password AS "password", a.email AS "email", a.mobile AS "mobile", a.phone AS "phone", a.sex AS "sex", a.avatar AS "avatar", a.sign AS "sign", a.wx_openid AS "wxOpenid", a.mobile_imei AS "mobileImei", a.user_type AS "userType", a.ref_code AS "refCode", a.ref_name AS "refName", a.mgr_type AS "mgrType", a.pwd_security_level AS "pwdSecurityLevel", a.pwd_update_date AS "pwdUpdateDate", a.pwd_update_record AS "pwdUpdateRecord", a.pwd_question AS "pwdQuestion", a.pwd_question_answer AS "pwdQuestionAnswer", a.pwd_question_2 AS "pwdQuestion2", a.pwd_question_answer_2 AS "pwdQuestionAnswer2", a.pwd_question_3 AS "pwdQuestion3", a.pwd_question_answer_3 AS "pwdQuestionAnswer3", a.pwd_quest_update_date AS "pwdQuestUpdateDate", a.last_login_ip AS "lastLoginIp", a.last_login_date AS "lastLoginDate", a.freeze_date AS "freezeDate", a.freeze_cause AS "freezeCause", a.user_weight AS "userWeight", a.extend_s1 AS "extend.extendS1", a.extend_s2 AS "extend.extendS2", a.extend_s3 AS "extend.extendS3", a.extend_s4 AS "extend.extendS4", a.extend_s5 AS "extend.extendS5", a.extend_s6 AS "extend.extendS6", a.extend_s7 AS "extend.extendS7", a.extend_s8 AS "extend.extendS8", a.extend_i1 AS "extend.extendI1", a.extend_i2 AS "extend.extendI2", a.extend_i3 AS "extend.extendI3", a.extend_i4 AS "extend.extendI4", a.extend_f1 AS "extend.extendF1", a.extend_f2 AS "extend.extendF2", a.extend_f3 AS "extend.extendF3", a.extend_f4 AS "extend.extendF4", a.extend_d1 AS "extend.extendD1", a.extend_d2 AS "extend.extendD2", a.extend_d3 AS "extend.extendD3", a.extend_d4 AS "extend.extendD4" FROM js_sys_user a WHERE a.`user_code` = #{userCode}
2019-07-09 10:17:28.500 DEBUG 9972 [           main] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@3e8995cc] will be managed by Spring
2019-07-09 10:17:28.500 DEBUG 9972 [           main] [com.jeesite.modules.sys.dao.UserDao.get] - ==>  Preparing: SELECT a.corp_code AS "corpCode", a.corp_name AS "corpName", a.status AS "status", a.create_by AS "createBy", a.create_date AS "createDate", a.update_by AS "updateBy", a.update_date AS "updateDate", a.remarks AS "remarks", a.user_code AS "userCode", a.login_code AS "loginCode", a.user_name AS "userName", a.password AS "password", a.email AS "email", a.mobile AS "mobile", a.phone AS "phone", a.sex AS "sex", a.avatar AS "avatar", a.sign AS "sign", a.wx_openid AS "wxOpenid", a.mobile_imei AS "mobileImei", a.user_type AS "userType", a.ref_code AS "refCode", a.ref_name AS "refName", a.mgr_type AS "mgrType", a.pwd_security_level AS "pwdSecurityLevel", a.pwd_update_date AS "pwdUpdateDate", a.pwd_update_record AS "pwdUpdateRecord", a.pwd_question AS "pwdQuestion", a.pwd_question_answer AS "pwdQuestionAnswer", a.pwd_question_2 AS "pwdQuestion2", a.pwd_question_answer_2 AS "pwdQuestionAnswer2", a.pwd_question_3 AS "pwdQuestion3", a.pwd_question_answer_3 AS "pwdQuestionAnswer3", a.pwd_quest_update_date AS "pwdQuestUpdateDate", a.last_login_ip AS "lastLoginIp", a.last_login_date AS "lastLoginDate", a.freeze_date AS "freezeDate", a.freeze_cause AS "freezeCause", a.user_weight AS "userWeight", a.extend_s1 AS "extend.extendS1", a.extend_s2 AS "extend.extendS2", a.extend_s3 AS "extend.extendS3", a.extend_s4 AS "extend.extendS4", a.extend_s5 AS "extend.extendS5", a.extend_s6 AS "extend.extendS6", a.extend_s7 AS "extend.extendS7", a.extend_s8 AS "extend.extendS8", a.extend_i1 AS "extend.extendI1", a.extend_i2 AS "extend.extendI2", a.extend_i3 AS "extend.extendI3", a.extend_i4 AS "extend.extendI4", a.extend_f1 AS "extend.extendF1", a.extend_f2 AS "extend.extendF2", a.extend_f3 AS "extend.extendF3", a.extend_f4 AS "extend.extendF4", a.extend_d1 AS "extend.extendD1", a.extend_d2 AS "extend.extendD2", a.extend_d3 AS "extend.extendD3", a.extend_d4 AS "extend.extendD4" FROM js_sys_user a WHERE a.`user_code` = ? 
2019-07-09 10:17:28.501 DEBUG 9972 [           main] [com.jeesite.modules.sys.dao.UserDao.get] - ==> Parameters: system(String)
2019-07-09 10:17:28.529 DEBUG 9972 [           main] [com.jeesite.modules.sys.dao.UserDao.get] - <==      Total: 1
2019-07-09 10:17:28.573 DEBUG 9972 [           main] [c.j.m.s.dao.RoleDao.findListByUserCode ] - ==>  Preparing: SELECT a.corp_code AS "corpCode", a.corp_name AS "corpName", a.status AS "status", a.create_by AS "createBy", a.create_date AS "createDate", a.update_by AS "updateBy", a.update_date AS "updateDate", a.remarks AS "remarks", a.role_code AS "roleCode", a.role_name AS "roleName", a.role_type AS "roleType", a.role_sort AS "roleSort", a.is_sys AS "isSys", a.user_type AS "userType", a.data_scope AS "dataScope" FROM js_sys_role a JOIN js_sys_user_role ur ON a.role_code = ur.role_code WHERE a.status = ? AND ur.user_code = ? ORDER BY a.role_sort ASC 
2019-07-09 10:17:28.573 DEBUG 9972 [           main] [c.j.m.s.dao.RoleDao.findListByUserCode ] - ==> Parameters: 0(String), system(String)
2019-07-09 10:17:28.598 DEBUG 9972 [           main] [c.j.m.s.dao.RoleDao.findListByUserCode ] - <==      Total: 0
2019-07-09 10:17:28.649 DEBUG 9972 [           main] [c.j.c.m.m.provider.UpdateSqlProvider   ] - 208毫秒: UPDATE js_sys_menu SET `status` = #{param1.status}, `update_by` = #{param1.updateBy}, `update_date` = #{param1.updateDate} WHERE status != #{param2.STATUS_DELETE} AND module_codes LIKE #{param2.sqlMap.where#module_codes#LIKE1}
2019-07-09 10:17:28.650 DEBUG 9972 [           main] [c.j.m.s.d.MenuDao.updateStatusByEntity ] - ==>  Preparing: UPDATE js_sys_menu SET `status` = ?, `update_by` = ?, `update_date` = ? WHERE status != ? AND module_codes LIKE ? 
2019-07-09 10:17:28.653 DEBUG 9972 [           main] [c.j.m.s.d.MenuDao.updateStatusByEntity ] - ==> Parameters: 2(String), system(String), 2019-07-09 10:17:28.649(Timestamp), 1(String), %cms%(String)
2019-07-09 10:17:28.701 DEBUG 9972 [           main] [c.j.m.s.d.MenuDao.updateStatusByEntity ] - <==    Updates: 7
2019-07-09 10:17:28.816 DEBUG 9972 [           main] [c.j.c.m.m.provider.UpdateSqlProvider   ] - 6毫秒: UPDATE js_sys_menu SET `status` = #{param1.status}, `update_by` = #{param1.updateBy}, `update_date` = #{param1.updateDate} WHERE status != #{param2.STATUS_DELETE} AND module_codes LIKE #{param2.sqlMap.where#module_codes#LIKE1}
2019-07-09 10:17:28.817 DEBUG 9972 [           main] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@3e8995cc] will be managed by Spring
2019-07-09 10:17:28.817 DEBUG 9972 [           main] [c.j.m.s.d.MenuDao.updateStatusByEntity ] - ==>  Preparing: UPDATE js_sys_menu SET `status` = ?, `update_by` = ?, `update_date` = ? WHERE status != ? AND module_codes LIKE ? 
2019-07-09 10:17:28.817 DEBUG 9972 [           main] [c.j.m.s.d.MenuDao.updateStatusByEntity ] - ==> Parameters: 0(String), system(String), 2019-07-09 10:17:28.815(Timestamp), 1(String), %core%(String)
2019-07-09 10:17:28.865 DEBUG 9972 [           main] [c.j.m.s.d.MenuDao.updateStatusByEntity ] - <==    Updates: 70
2019-07-09 10:17:30.591 ERROR 9972 [           main] [o.apache.catalina.core.StandardService ] - Failed to start connector [Connector[HTTP/1.1-8980]]

org.apache.catalina.LifecycleException: Failed to start component [Connector[HTTP/1.1-8980]]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:167)
	at org.apache.catalina.core.StandardService.addConnector(StandardService.java:225)
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.addPreviouslyRemovedConnectors(TomcatWebServer.java:261)
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.start(TomcatWebServer.java:198)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.startWebServer(ServletWebServerApplicationContext.java:300)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.finishRefresh(ServletWebServerApplicationContext.java:162)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:551)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:140)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:754)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:386)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:307)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1242)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1230)
	at com.jeesite.modules.Application.main(Application.java:20)
Caused by: org.apache.catalina.LifecycleException: Protocol handler start failed
	at org.apache.catalina.connector.Connector.startInternal(Connector.java:1020)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:150)
	... 13 common frames omitted
Caused by: java.net.BindException: Address already in use: bind
	at sun.nio.ch.Net.bind0(Native Method)
	at sun.nio.ch.Net.bind(Net.java:433)
	at sun.nio.ch.Net.bind(Net.java:425)
	at sun.nio.ch.ServerSocketChannelImpl.bind(ServerSocketChannelImpl.java:223)
	at sun.nio.ch.ServerSocketAdaptor.bind(ServerSocketAdaptor.java:74)
	at org.apache.tomcat.util.net.NioEndpoint.bind(NioEndpoint.java:219)
	at org.apache.tomcat.util.net.AbstractEndpoint.start(AbstractEndpoint.java:1151)
	at org.apache.coyote.AbstractProtocol.start(AbstractProtocol.java:591)
	at org.apache.catalina.connector.Connector.startInternal(Connector.java:1018)
	... 14 common frames omitted

2019-07-09 10:17:30.615 ERROR 9972 [           main] [o.s.b.d.LoggingFailureAnalysisReporter ] - 

***************************
APPLICATION FAILED TO START
***************************

Description:

The Tomcat connector configured to listen on port 8980 failed to start. The port may already be in use or the connector may be misconfigured.

Action:

Verify the connector's configuration, identify and stop any process that's listening on port 8980, or configure this application to listen on another port.

2019-07-09 10:17:30.647 DEBUG 9972 [           main] [com.jeesite.common.utils.SpringUtils   ] - Clear ApplicationContext:org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@44e3760b: startup date [Tue Jul 09 10:17:16 GMT+08:00 2019]; root of context hierarchy
2019-07-09 10:17:50.642 INFO  4904 [           main] [com.jeesite.modules.Application        ] - Starting Application on DESKTOP-FVHI4E5 with PID 4904 (E:\gitlabHome\HaoLangZhongProject\HaoLangZhong\src\main\webapp\WEB-INF\classes started by 1111111 in E:\gitlabHome\HaoLangZhongProject\HaoLangZhong)
2019-07-09 10:17:50.646 DEBUG 4904 [           main] [com.jeesite.modules.Application        ] - Running with Spring Boot v2.0.6.RELEASE, Spring v5.0.10.RELEASE
2019-07-09 10:17:50.646 INFO  4904 [           main] [com.jeesite.modules.Application        ] - The following profiles are active: default
2019-07-09 10:17:52.669 INFO  4904 [           main] [com.jeesite.common.config.Global       ] - Config files: [classpath:config/jeesite-core.yml, classpath:config/application.yml]
2019-07-09 10:17:52.670 INFO  4904 [           main] [com.jeesite.common.config.Global       ] - Spring cache cluster mode: false, session manager name: J1CacheSession
2019-07-09 10:17:53.192 INFO  4904 [           main] [com.jeesite.common.config.Global       ] - user.home: C:/Users/15040
2019-07-09 10:17:53.193 INFO  4904 [           main] [com.jeesite.common.config.Global       ] - user.dir: E:/gitlabHome/HaoLangZhongProject/HaoLangZhong
2019-07-09 10:17:53.193 INFO  4904 [           main] [com.jeesite.common.config.Global       ] - logPath: E:/gitlabHome/HaoLangZhongProject/HaoLangZhong/src/main/webapp/WEB-INF/classes

   _____        ___  _   _           ___
  |_   _|      / __'(_)_| |_        /   |
  _ | | __  __ \___ | |_   _| __   / /| |
 ( .| |/__\/__\ ___)| | | |_ /__\ / /_| |_
  \___|\__.\__.|____|_| \___)\__.(____   _|  :: JeeSite V4.1.3 :: 
======================================|_|==========================

    欢迎使用 JeeSite Demo V4.1

    您当前的版本为社区版，官方网站：http://jeesite.com

    机器码是：6c59ab5175477606a72e1628bfd13f1a
    产品名称：JeeSite Demo
    公司名称：ThinkGem

===================================================================

2019-07-09 10:17:54.371 INFO  4904 [           main] [o.s.b.w.embedded.tomcat.TomcatWebServer] - Tomcat initialized with port(s): 8980 (http)
2019-07-09 10:17:55.436 DEBUG 4904 [           main] [c.j.common.datasource.RoutingDataSource] - Set default target data source success.
2019-07-09 10:18:01.543 DEBUG 4904 [           main] [com.jeesite.common.beetl.BeetlUtils    ] - Beetl config files: [classpath:/config/beetl-core.properties, classpath:/config/beetl.properties]
2019-07-09 10:18:01.808 DEBUG 4904 [           main] [c.j.c.m.m.provider.SelectSqlProvider   ] - 2毫秒: SELECT a.status AS "status", a.create_by AS "createBy", a.create_date AS "createDate", a.update_by AS "updateBy", a.update_date AS "updateDate", a.remarks AS "remarks", a.module_code AS "moduleCode", a.module_name AS "moduleName", a.description AS "description", a.main_class_name AS "mainClassName", a.current_version AS "currentVersion", a.upgrade_info AS "upgradeInfo" FROM js_sys_module a WHERE a.status = #{sqlMap.where#status#EQ1} ORDER BY a.update_date DESC
2019-07-09 10:18:01.827 DEBUG 4904 [           main] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@528ef230] will not be managed by Spring
2019-07-09 10:18:01.839 DEBUG 4904 [           main] [c.j.modules.sys.dao.ModuleDao.findList ] - ==>  Preparing: SELECT a.status AS "status", a.create_by AS "createBy", a.create_date AS "createDate", a.update_by AS "updateBy", a.update_date AS "updateDate", a.remarks AS "remarks", a.module_code AS "moduleCode", a.module_name AS "moduleName", a.description AS "description", a.main_class_name AS "mainClassName", a.current_version AS "currentVersion", a.upgrade_info AS "upgradeInfo" FROM js_sys_module a WHERE a.status = ? ORDER BY a.update_date DESC 
2019-07-09 10:18:01.866 DEBUG 4904 [           main] [c.j.modules.sys.dao.ModuleDao.findList ] - ==> Parameters: 0(String)
2019-07-09 10:18:01.905 DEBUG 4904 [           main] [c.j.modules.sys.dao.ModuleDao.findList ] - <==      Total: 2
2019-07-09 10:18:02.024 DEBUG 4904 [           main] [c.j.c.m.m.provider.SelectSqlProvider   ] - 1毫秒: SELECT a.corp_code AS "corpCode", a.corp_name AS "corpName", a.status AS "status", a.create_by AS "createBy", a.create_date AS "createDate", a.update_by AS "updateBy", a.update_date AS "updateDate", a.remarks AS "remarks", a.user_code AS "userCode", a.login_code AS "loginCode", a.user_name AS "userName", a.password AS "password", a.email AS "email", a.mobile AS "mobile", a.phone AS "phone", a.sex AS "sex", a.avatar AS "avatar", a.sign AS "sign", a.wx_openid AS "wxOpenid", a.mobile_imei AS "mobileImei", a.user_type AS "userType", a.ref_code AS "refCode", a.ref_name AS "refName", a.mgr_type AS "mgrType", a.pwd_security_level AS "pwdSecurityLevel", a.pwd_update_date AS "pwdUpdateDate", a.pwd_update_record AS "pwdUpdateRecord", a.pwd_question AS "pwdQuestion", a.pwd_question_answer AS "pwdQuestionAnswer", a.pwd_question_2 AS "pwdQuestion2", a.pwd_question_answer_2 AS "pwdQuestionAnswer2", a.pwd_question_3 AS "pwdQuestion3", a.pwd_question_answer_3 AS "pwdQuestionAnswer3", a.pwd_quest_update_date AS "pwdQuestUpdateDate", a.last_login_ip AS "lastLoginIp", a.last_login_date AS "lastLoginDate", a.freeze_date AS "freezeDate", a.freeze_cause AS "freezeCause", a.user_weight AS "userWeight", a.extend_s1 AS "extend.extendS1", a.extend_s2 AS "extend.extendS2", a.extend_s3 AS "extend.extendS3", a.extend_s4 AS "extend.extendS4", a.extend_s5 AS "extend.extendS5", a.extend_s6 AS "extend.extendS6", a.extend_s7 AS "extend.extendS7", a.extend_s8 AS "extend.extendS8", a.extend_i1 AS "extend.extendI1", a.extend_i2 AS "extend.extendI2", a.extend_i3 AS "extend.extendI3", a.extend_i4 AS "extend.extendI4", a.extend_f1 AS "extend.extendF1", a.extend_f2 AS "extend.extendF2", a.extend_f3 AS "extend.extendF3", a.extend_f4 AS "extend.extendF4", a.extend_d1 AS "extend.extendD1", a.extend_d2 AS "extend.extendD2", a.extend_d3 AS "extend.extendD3", a.extend_d4 AS "extend.extendD4" FROM js_sys_user a WHERE a.`user_code` = #{userCode}
2019-07-09 10:18:02.026 DEBUG 4904 [           main] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@528ef230] will be managed by Spring
2019-07-09 10:18:02.026 DEBUG 4904 [           main] [com.jeesite.modules.sys.dao.UserDao.get] - ==>  Preparing: SELECT a.corp_code AS "corpCode", a.corp_name AS "corpName", a.status AS "status", a.create_by AS "createBy", a.create_date AS "createDate", a.update_by AS "updateBy", a.update_date AS "updateDate", a.remarks AS "remarks", a.user_code AS "userCode", a.login_code AS "loginCode", a.user_name AS "userName", a.password AS "password", a.email AS "email", a.mobile AS "mobile", a.phone AS "phone", a.sex AS "sex", a.avatar AS "avatar", a.sign AS "sign", a.wx_openid AS "wxOpenid", a.mobile_imei AS "mobileImei", a.user_type AS "userType", a.ref_code AS "refCode", a.ref_name AS "refName", a.mgr_type AS "mgrType", a.pwd_security_level AS "pwdSecurityLevel", a.pwd_update_date AS "pwdUpdateDate", a.pwd_update_record AS "pwdUpdateRecord", a.pwd_question AS "pwdQuestion", a.pwd_question_answer AS "pwdQuestionAnswer", a.pwd_question_2 AS "pwdQuestion2", a.pwd_question_answer_2 AS "pwdQuestionAnswer2", a.pwd_question_3 AS "pwdQuestion3", a.pwd_question_answer_3 AS "pwdQuestionAnswer3", a.pwd_quest_update_date AS "pwdQuestUpdateDate", a.last_login_ip AS "lastLoginIp", a.last_login_date AS "lastLoginDate", a.freeze_date AS "freezeDate", a.freeze_cause AS "freezeCause", a.user_weight AS "userWeight", a.extend_s1 AS "extend.extendS1", a.extend_s2 AS "extend.extendS2", a.extend_s3 AS "extend.extendS3", a.extend_s4 AS "extend.extendS4", a.extend_s5 AS "extend.extendS5", a.extend_s6 AS "extend.extendS6", a.extend_s7 AS "extend.extendS7", a.extend_s8 AS "extend.extendS8", a.extend_i1 AS "extend.extendI1", a.extend_i2 AS "extend.extendI2", a.extend_i3 AS "extend.extendI3", a.extend_i4 AS "extend.extendI4", a.extend_f1 AS "extend.extendF1", a.extend_f2 AS "extend.extendF2", a.extend_f3 AS "extend.extendF3", a.extend_f4 AS "extend.extendF4", a.extend_d1 AS "extend.extendD1", a.extend_d2 AS "extend.extendD2", a.extend_d3 AS "extend.extendD3", a.extend_d4 AS "extend.extendD4" FROM js_sys_user a WHERE a.`user_code` = ? 
2019-07-09 10:18:02.027 DEBUG 4904 [           main] [com.jeesite.modules.sys.dao.UserDao.get] - ==> Parameters: system(String)
2019-07-09 10:18:02.056 DEBUG 4904 [           main] [com.jeesite.modules.sys.dao.UserDao.get] - <==      Total: 1
2019-07-09 10:18:02.098 DEBUG 4904 [           main] [c.j.m.s.dao.RoleDao.findListByUserCode ] - ==>  Preparing: SELECT a.corp_code AS "corpCode", a.corp_name AS "corpName", a.status AS "status", a.create_by AS "createBy", a.create_date AS "createDate", a.update_by AS "updateBy", a.update_date AS "updateDate", a.remarks AS "remarks", a.role_code AS "roleCode", a.role_name AS "roleName", a.role_type AS "roleType", a.role_sort AS "roleSort", a.is_sys AS "isSys", a.user_type AS "userType", a.data_scope AS "dataScope" FROM js_sys_role a JOIN js_sys_user_role ur ON a.role_code = ur.role_code WHERE a.status = ? AND ur.user_code = ? ORDER BY a.role_sort ASC 
2019-07-09 10:18:02.099 DEBUG 4904 [           main] [c.j.m.s.dao.RoleDao.findListByUserCode ] - ==> Parameters: 0(String), system(String)
2019-07-09 10:18:02.122 DEBUG 4904 [           main] [c.j.m.s.dao.RoleDao.findListByUserCode ] - <==      Total: 0
2019-07-09 10:18:02.160 DEBUG 4904 [           main] [c.j.c.m.m.provider.UpdateSqlProvider   ] - 192毫秒: UPDATE js_sys_menu SET `status` = #{param1.status}, `update_by` = #{param1.updateBy}, `update_date` = #{param1.updateDate} WHERE status != #{param2.STATUS_DELETE} AND module_codes LIKE #{param2.sqlMap.where#module_codes#LIKE1}
2019-07-09 10:18:02.161 DEBUG 4904 [           main] [c.j.m.s.d.MenuDao.updateStatusByEntity ] - ==>  Preparing: UPDATE js_sys_menu SET `status` = ?, `update_by` = ?, `update_date` = ? WHERE status != ? AND module_codes LIKE ? 
2019-07-09 10:18:02.163 DEBUG 4904 [           main] [c.j.m.s.d.MenuDao.updateStatusByEntity ] - ==> Parameters: 2(String), system(String), 2019-07-09 10:18:02.16(Timestamp), 1(String), %cms%(String)
2019-07-09 10:18:02.209 DEBUG 4904 [           main] [c.j.m.s.d.MenuDao.updateStatusByEntity ] - <==    Updates: 7
2019-07-09 10:18:02.316 DEBUG 4904 [           main] [c.j.c.m.m.provider.UpdateSqlProvider   ] - 4毫秒: UPDATE js_sys_menu SET `status` = #{param1.status}, `update_by` = #{param1.updateBy}, `update_date` = #{param1.updateDate} WHERE status != #{param2.STATUS_DELETE} AND module_codes LIKE #{param2.sqlMap.where#module_codes#LIKE1}
2019-07-09 10:18:02.317 DEBUG 4904 [           main] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@528ef230] will be managed by Spring
2019-07-09 10:18:02.317 DEBUG 4904 [           main] [c.j.m.s.d.MenuDao.updateStatusByEntity ] - ==>  Preparing: UPDATE js_sys_menu SET `status` = ?, `update_by` = ?, `update_date` = ? WHERE status != ? AND module_codes LIKE ? 
2019-07-09 10:18:02.318 DEBUG 4904 [           main] [c.j.m.s.d.MenuDao.updateStatusByEntity ] - ==> Parameters: 0(String), system(String), 2019-07-09 10:18:02.315(Timestamp), 1(String), %core%(String)
2019-07-09 10:18:02.363 DEBUG 4904 [           main] [c.j.m.s.d.MenuDao.updateStatusByEntity ] - <==    Updates: 70
2019-07-09 10:18:04.235 INFO  4904 [           main] [o.s.b.w.embedded.tomcat.TomcatWebServer] - Tomcat started on port(s): 8980 (http) with context path '/js'
2019-07-09 10:18:04.239 INFO  4904 [           main] [com.jeesite.modules.Application        ] - Started Application in 14.284 seconds (JVM running for 14.957)
2019-07-09 10:18:07.629 DEBUG 4904 [nio-8980-exec-1] [c.jeesite.modules.app.utils.AlipayUtil ] - 将要存入数据库的参数0.01,2019070910040300002,2019070922001497451057270404,
2019-07-09 10:18:07.646 DEBUG 4904 [nio-8980-exec-1] [c.j.c.m.m.provider.SelectSqlProvider   ] - 2毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.product_count AS "productCount", a.total_price AS "totalPrice", a.logistics_price AS "logisticsPrice", a.discount_price AS "discountPrice", a.really_price AS "reallyPrice", a.pay_channel AS "payChannel", a.out_trade_no AS "outTradeNo", a.create_date AS "createDate", a.update_date AS "updateDate", a.create_by AS "createBy", a.update_by AS "updateBy", a.pay_date AS "payDate", a.user_id AS "userId", a.address_id AS "addressId", a.logistics_id AS "logisticsId", a.delivery_date AS "deliveryDate", a.del_flag AS "delFlag", a.delivery_name AS "deliveryName", a.delivery_address AS "deliveryAddress", a.delivery_phone AS "deliveryPhone", a.total_count AS "totalCount", a.trade_no AS "tradeNo" FROM sys_order a WHERE a.out_trade_no = #{sqlMap.where#out_trade_no#EQ1} ORDER BY a.update_date DESC
2019-07-09 10:18:07.649 DEBUG 4904 [nio-8980-exec-1] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@528ef230] will not be managed by Spring
2019-07-09 10:18:07.651 DEBUG 4904 [nio-8980-exec-1] [c.j.modules.app.dao.OrderDao.findList  ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.product_count AS "productCount", a.total_price AS "totalPrice", a.logistics_price AS "logisticsPrice", a.discount_price AS "discountPrice", a.really_price AS "reallyPrice", a.pay_channel AS "payChannel", a.out_trade_no AS "outTradeNo", a.create_date AS "createDate", a.update_date AS "updateDate", a.create_by AS "createBy", a.update_by AS "updateBy", a.pay_date AS "payDate", a.user_id AS "userId", a.address_id AS "addressId", a.logistics_id AS "logisticsId", a.delivery_date AS "deliveryDate", a.del_flag AS "delFlag", a.delivery_name AS "deliveryName", a.delivery_address AS "deliveryAddress", a.delivery_phone AS "deliveryPhone", a.total_count AS "totalCount", a.trade_no AS "tradeNo" FROM sys_order a WHERE a.out_trade_no = ? ORDER BY a.update_date DESC 
2019-07-09 10:18:07.653 DEBUG 4904 [nio-8980-exec-1] [c.j.modules.app.dao.OrderDao.findList  ] - ==> Parameters: 2019070910040300002(String)
2019-07-09 10:18:07.678 DEBUG 4904 [nio-8980-exec-1] [c.j.modules.app.dao.OrderDao.findList  ] - <==      Total: 0
2019-07-09 10:18:07.697 DEBUG 4904 [nio-8980-exec-1] [c.j.c.m.m.provider.SelectSqlProvider   ] - 3毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", dd.id AS "userInfo.id", dd.mobile AS "userInfo.mobile", dd.password AS "userInfo.password", dd.icon AS "userInfo.icon", dd.regtime AS "userInfo.regtime", dd.lastlogin AS "userInfo.lastlogin", dd.islock AS "userInfo.islock", dd.isauthentication AS "userInfo.isauthentication", dd.type AS "userInfo.type", dd.create_by AS "userInfo.createBy", dd.create_date AS "userInfo.createDate", dd.update_by AS "userInfo.updateBy", dd.update_date AS "userInfo.updateDate", dd.remarks AS "userInfo.remarks", dd.del_flag AS "userInfo.delFlag", dd.nike_name AS "userInfo.nikeName", dd.is_invite AS "userInfo.isInvite", dd.third_id AS "userInfo.thirdId", dd.third_type AS "userInfo.thirdType", dd.third_icon AS "userInfo.thirdIcon", dd.member_lv AS "userInfo.memberLv", dd.member_flag AS "userInfo.memberFlag", dd.member_start AS "userInfo.memberStart", dd.member_end AS "userInfo.memberEnd", di.id AS "doctorInfos.id", di.doctorid AS "doctorInfos.doctorid", di.doctornum AS "doctorInfos.doctornum", di.name AS "doctorInfos.name", di.sex AS "doctorInfos.sex", di.age AS "doctorInfos.age", di.telephone AS "doctorInfos.telephone", di.idcard AS "doctorInfos.idcard", di.adress AS "doctorInfos.adress", di.technical AS "doctorInfos.technical", di.classify AS "doctorInfos.classify", di.introduce AS "doctorInfos.introduce", di.create_by AS "doctorInfos.createBy", di.cost AS "doctorInfos.cost", di.create_date AS "doctorInfos.createDate", di.update_by AS "doctorInfos.updateBy", di.update_date AS "doctorInfos.updateDate", di.remarks AS "doctorInfos.remarks", di.del_flag AS "doctorInfos.delFlag", di.cityid AS "doctorInfos.cityid", di.come_flag AS "doctorInfos.comeFlag", di.come_cost AS "doctorInfos.comeCost", di.own_flag AS "doctorInfos.ownFlag", di.first_count AS "doctorInfos.firstCount", di.star_lv AS "doctorInfos.starLv" FROM sys_tiaoli_order a LEFT JOIN sys_user_info dd ON a.userid = dd.id LEFT JOIN sys_doctor_info di ON a.docid = di.doctorid WHERE a.out_trade_no = #{sqlMap.where#out_trade_no#EQ1} ORDER BY a.create_date DESC
2019-07-09 10:18:07.705 DEBUG 4904 [nio-8980-exec-1] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@528ef230] will not be managed by Spring
2019-07-09 10:18:07.707 DEBUG 4904 [nio-8980-exec-1] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", dd.id AS "userInfo.id", dd.mobile AS "userInfo.mobile", dd.password AS "userInfo.password", dd.icon AS "userInfo.icon", dd.regtime AS "userInfo.regtime", dd.lastlogin AS "userInfo.lastlogin", dd.islock AS "userInfo.islock", dd.isauthentication AS "userInfo.isauthentication", dd.type AS "userInfo.type", dd.create_by AS "userInfo.createBy", dd.create_date AS "userInfo.createDate", dd.update_by AS "userInfo.updateBy", dd.update_date AS "userInfo.updateDate", dd.remarks AS "userInfo.remarks", dd.del_flag AS "userInfo.delFlag", dd.nike_name AS "userInfo.nikeName", dd.is_invite AS "userInfo.isInvite", dd.third_id AS "userInfo.thirdId", dd.third_type AS "userInfo.thirdType", dd.third_icon AS "userInfo.thirdIcon", dd.member_lv AS "userInfo.memberLv", dd.member_flag AS "userInfo.memberFlag", dd.member_start AS "userInfo.memberStart", dd.member_end AS "userInfo.memberEnd", di.id AS "doctorInfos.id", di.doctorid AS "doctorInfos.doctorid", di.doctornum AS "doctorInfos.doctornum", di.name AS "doctorInfos.name", di.sex AS "doctorInfos.sex", di.age AS "doctorInfos.age", di.telephone AS "doctorInfos.telephone", di.idcard AS "doctorInfos.idcard", di.adress AS "doctorInfos.adress", di.technical AS "doctorInfos.technical", di.classify AS "doctorInfos.classify", di.introduce AS "doctorInfos.introduce", di.create_by AS "doctorInfos.createBy", di.cost AS "doctorInfos.cost", di.create_date AS "doctorInfos.createDate", di.update_by AS "doctorInfos.updateBy", di.update_date AS "doctorInfos.updateDate", di.remarks AS "doctorInfos.remarks", di.del_flag AS "doctorInfos.delFlag", di.cityid AS "doctorInfos.cityid", di.come_flag AS "doctorInfos.comeFlag", di.come_cost AS "doctorInfos.comeCost", di.own_flag AS "doctorInfos.ownFlag", di.first_count AS "doctorInfos.firstCount", di.star_lv AS "doctorInfos.starLv" FROM sys_tiaoli_order a LEFT JOIN sys_user_info dd ON a.userid = dd.id LEFT JOIN sys_doctor_info di ON a.docid = di.doctorid WHERE a.out_trade_no = ? ORDER BY a.create_date DESC 
2019-07-09 10:18:07.708 DEBUG 4904 [nio-8980-exec-1] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - ==> Parameters: 2019070910040300002(String)
2019-07-09 10:18:07.754 DEBUG 4904 [nio-8980-exec-1] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - <==      Total: 1
2019-07-09 10:18:07.757 DEBUG 4904 [nio-8980-exec-1] [c.j.c.m.m.provider.SelectSqlProvider   ] - 1毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", dd.id AS "userInfo.id", dd.mobile AS "userInfo.mobile", dd.password AS "userInfo.password", dd.icon AS "userInfo.icon", dd.regtime AS "userInfo.regtime", dd.lastlogin AS "userInfo.lastlogin", dd.islock AS "userInfo.islock", dd.isauthentication AS "userInfo.isauthentication", dd.type AS "userInfo.type", dd.create_by AS "userInfo.createBy", dd.create_date AS "userInfo.createDate", dd.update_by AS "userInfo.updateBy", dd.update_date AS "userInfo.updateDate", dd.remarks AS "userInfo.remarks", dd.del_flag AS "userInfo.delFlag", dd.nike_name AS "userInfo.nikeName", dd.is_invite AS "userInfo.isInvite", dd.third_id AS "userInfo.thirdId", dd.third_type AS "userInfo.thirdType", dd.third_icon AS "userInfo.thirdIcon", dd.member_lv AS "userInfo.memberLv", dd.member_flag AS "userInfo.memberFlag", dd.member_start AS "userInfo.memberStart", dd.member_end AS "userInfo.memberEnd", di.id AS "doctorInfos.id", di.doctorid AS "doctorInfos.doctorid", di.doctornum AS "doctorInfos.doctornum", di.name AS "doctorInfos.name", di.sex AS "doctorInfos.sex", di.age AS "doctorInfos.age", di.telephone AS "doctorInfos.telephone", di.idcard AS "doctorInfos.idcard", di.adress AS "doctorInfos.adress", di.technical AS "doctorInfos.technical", di.classify AS "doctorInfos.classify", di.introduce AS "doctorInfos.introduce", di.create_by AS "doctorInfos.createBy", di.cost AS "doctorInfos.cost", di.create_date AS "doctorInfos.createDate", di.update_by AS "doctorInfos.updateBy", di.update_date AS "doctorInfos.updateDate", di.remarks AS "doctorInfos.remarks", di.del_flag AS "doctorInfos.delFlag", di.cityid AS "doctorInfos.cityid", di.come_flag AS "doctorInfos.comeFlag", di.come_cost AS "doctorInfos.comeCost", di.own_flag AS "doctorInfos.ownFlag", di.first_count AS "doctorInfos.firstCount", di.star_lv AS "doctorInfos.starLv" FROM sys_tiaoli_order a LEFT JOIN sys_user_info dd ON a.userid = dd.id LEFT JOIN sys_doctor_info di ON a.docid = di.doctorid WHERE a.out_trade_no = #{sqlMap.where#out_trade_no#EQ1} ORDER BY a.create_date DESC
2019-07-09 10:18:07.758 DEBUG 4904 [nio-8980-exec-1] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@528ef230] will not be managed by Spring
2019-07-09 10:18:07.761 DEBUG 4904 [nio-8980-exec-1] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", dd.id AS "userInfo.id", dd.mobile AS "userInfo.mobile", dd.password AS "userInfo.password", dd.icon AS "userInfo.icon", dd.regtime AS "userInfo.regtime", dd.lastlogin AS "userInfo.lastlogin", dd.islock AS "userInfo.islock", dd.isauthentication AS "userInfo.isauthentication", dd.type AS "userInfo.type", dd.create_by AS "userInfo.createBy", dd.create_date AS "userInfo.createDate", dd.update_by AS "userInfo.updateBy", dd.update_date AS "userInfo.updateDate", dd.remarks AS "userInfo.remarks", dd.del_flag AS "userInfo.delFlag", dd.nike_name AS "userInfo.nikeName", dd.is_invite AS "userInfo.isInvite", dd.third_id AS "userInfo.thirdId", dd.third_type AS "userInfo.thirdType", dd.third_icon AS "userInfo.thirdIcon", dd.member_lv AS "userInfo.memberLv", dd.member_flag AS "userInfo.memberFlag", dd.member_start AS "userInfo.memberStart", dd.member_end AS "userInfo.memberEnd", di.id AS "doctorInfos.id", di.doctorid AS "doctorInfos.doctorid", di.doctornum AS "doctorInfos.doctornum", di.name AS "doctorInfos.name", di.sex AS "doctorInfos.sex", di.age AS "doctorInfos.age", di.telephone AS "doctorInfos.telephone", di.idcard AS "doctorInfos.idcard", di.adress AS "doctorInfos.adress", di.technical AS "doctorInfos.technical", di.classify AS "doctorInfos.classify", di.introduce AS "doctorInfos.introduce", di.create_by AS "doctorInfos.createBy", di.cost AS "doctorInfos.cost", di.create_date AS "doctorInfos.createDate", di.update_by AS "doctorInfos.updateBy", di.update_date AS "doctorInfos.updateDate", di.remarks AS "doctorInfos.remarks", di.del_flag AS "doctorInfos.delFlag", di.cityid AS "doctorInfos.cityid", di.come_flag AS "doctorInfos.comeFlag", di.come_cost AS "doctorInfos.comeCost", di.own_flag AS "doctorInfos.ownFlag", di.first_count AS "doctorInfos.firstCount", di.star_lv AS "doctorInfos.starLv" FROM sys_tiaoli_order a LEFT JOIN sys_user_info dd ON a.userid = dd.id LEFT JOIN sys_doctor_info di ON a.docid = di.doctorid WHERE a.out_trade_no = ? ORDER BY a.create_date DESC 
2019-07-09 10:18:07.762 DEBUG 4904 [nio-8980-exec-1] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - ==> Parameters: 2019070910040300002(String)
2019-07-09 10:18:07.795 DEBUG 4904 [nio-8980-exec-1] [c.j.m.app.dao.TiaoliOrderDao.findList  ] - <==      Total: 1
2019-07-09 10:18:07.810 DEBUG 4904 [nio-8980-exec-1] [c.j.c.m.m.provider.SelectSqlProvider   ] - 0毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.total_price AS "totalPrice", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag" FROM sys_member_order a WHERE a.out_trade_no = #{sqlMap.where#out_trade_no#EQ1} ORDER BY a.update_date DESC
2019-07-09 10:18:07.812 DEBUG 4904 [nio-8980-exec-1] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@528ef230] will not be managed by Spring
2019-07-09 10:18:07.813 DEBUG 4904 [nio-8980-exec-1] [c.j.m.app.dao.MemberOrderDao.findList  ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.total_price AS "totalPrice", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag" FROM sys_member_order a WHERE a.out_trade_no = ? ORDER BY a.update_date DESC 
2019-07-09 10:18:07.814 DEBUG 4904 [nio-8980-exec-1] [c.j.m.app.dao.MemberOrderDao.findList  ] - ==> Parameters: 2019070910040300002(String)
2019-07-09 10:18:07.838 DEBUG 4904 [nio-8980-exec-1] [c.j.m.app.dao.MemberOrderDao.findList  ] - <==      Total: 0
2019-07-09 10:18:07.849 DEBUG 4904 [nio-8980-exec-1] [c.j.c.m.m.provider.SelectSqlProvider   ] - 0毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.total_price AS "totalPrice", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", a.doctor_user_id AS "doctorUserId" FROM sys_doctor_register_order a WHERE a.out_trade_no = #{sqlMap.where#out_trade_no#EQ1} ORDER BY a.update_date DESC
2019-07-09 10:18:07.851 DEBUG 4904 [nio-8980-exec-1] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@528ef230] will not be managed by Spring
2019-07-09 10:18:07.851 DEBUG 4904 [nio-8980-exec-1] [c.j.m.a.d.D.findList                   ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.total_price AS "totalPrice", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag", a.doctor_user_id AS "doctorUserId" FROM sys_doctor_register_order a WHERE a.out_trade_no = ? ORDER BY a.update_date DESC 
2019-07-09 10:18:07.852 DEBUG 4904 [nio-8980-exec-1] [c.j.m.a.d.D.findList                   ] - ==> Parameters: 2019070910040300002(String)
2019-07-09 10:18:07.874 DEBUG 4904 [nio-8980-exec-1] [c.j.m.a.d.D.findList                   ] - <==      Total: 0
2019-07-09 10:18:07.886 DEBUG 4904 [nio-8980-exec-1] [c.j.c.m.m.provider.SelectSqlProvider   ] - 2毫秒: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag" FROM sys_dashang_order a WHERE a.out_trade_no = #{sqlMap.where#out_trade_no#EQ1} ORDER BY a.update_date DESC
2019-07-09 10:18:07.887 DEBUG 4904 [nio-8980-exec-1] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@528ef230] will not be managed by Spring
2019-07-09 10:18:07.888 DEBUG 4904 [nio-8980-exec-1] [c.j.m.app.dao.DashangOrderDao.findList ] - ==>  Preparing: SELECT a.id AS "id", a.order_no AS "orderNo", a.order_status AS "orderStatus", a.count AS "count", a.total_price AS "totalPrice", a.come_cost AS "comeCost", a.docid AS "docid", a.userid AS "userid", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.out_trade_no AS "outTradeNo", a.pay_date AS "payDate", a.trade_no AS "tradeNo", a.pay_channel AS "payChannel", a.del_flag AS "delFlag" FROM sys_dashang_order a WHERE a.out_trade_no = ? ORDER BY a.update_date DESC 
2019-07-09 10:18:07.888 DEBUG 4904 [nio-8980-exec-1] [c.j.m.app.dao.DashangOrderDao.findList ] - ==> Parameters: 2019070910040300002(String)
2019-07-09 10:18:07.912 DEBUG 4904 [nio-8980-exec-1] [c.j.m.app.dao.DashangOrderDao.findList ] - <==      Total: 0
2019-07-09 10:18:16.966 ERROR 4904 [io-8980-exec-10] [c.j.m.app.web.AirPharmacyController    ] - 1

java.lang.ArrayIndexOutOfBoundsException: 1
	at com.jeesite.modules.app.web.AirPharmacyController.uploadPrescription(AirPharmacyController.java:305)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:209)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:891)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:797)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:991)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:925)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:974)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:877)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:661)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:851)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:96)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)
	at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)
	at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)
	at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)
	at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:387)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)
	at com.jeesite.common.shiro.web.b.doFilterInternal(ks:41)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:493)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:800)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:806)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1498)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2019-07-09 10:20:31.001 INFO  3740 [           main] [com.jeesite.modules.Application        ] - Starting Application on DESKTOP-FVHI4E5 with PID 3740 (E:\gitlabHome\HaoLangZhongProject\HaoLangZhong\src\main\webapp\WEB-INF\classes started by 1111111 in E:\gitlabHome\HaoLangZhongProject\HaoLangZhong)
2019-07-09 10:20:31.006 DEBUG 3740 [           main] [com.jeesite.modules.Application        ] - Running with Spring Boot v2.0.6.RELEASE, Spring v5.0.10.RELEASE
2019-07-09 10:20:31.006 INFO  3740 [           main] [com.jeesite.modules.Application        ] - The following profiles are active: default
2019-07-09 10:20:33.084 INFO  3740 [           main] [com.jeesite.common.config.Global       ] - Config files: [classpath:config/jeesite-core.yml, classpath:config/application.yml]
2019-07-09 10:20:33.085 INFO  3740 [           main] [com.jeesite.common.config.Global       ] - Spring cache cluster mode: false, session manager name: J1CacheSession
2019-07-09 10:20:33.602 INFO  3740 [           main] [com.jeesite.common.config.Global       ] - user.home: C:/Users/15040
2019-07-09 10:20:33.603 INFO  3740 [           main] [com.jeesite.common.config.Global       ] - user.dir: E:/gitlabHome/HaoLangZhongProject/HaoLangZhong
2019-07-09 10:20:33.603 INFO  3740 [           main] [com.jeesite.common.config.Global       ] - logPath: E:/gitlabHome/HaoLangZhongProject/HaoLangZhong/src/main/webapp/WEB-INF/classes

   _____        ___  _   _           ___
  |_   _|      / __'(_)_| |_        /   |
  _ | | __  __ \___ | |_   _| __   / /| |
 ( .| |/__\/__\ ___)| | | |_ /__\ / /_| |_
  \___|\__.\__.|____|_| \___)\__.(____   _|  :: JeeSite V4.1.3 :: 
======================================|_|==========================

    欢迎使用 JeeSite Demo V4.1

    您当前的版本为社区版，官方网站：http://jeesite.com

    机器码是：6c59ab5175477606a72e1628bfd13f1a
    产品名称：JeeSite Demo
    公司名称：ThinkGem

===================================================================

2019-07-09 10:20:34.738 INFO  3740 [           main] [o.s.b.w.embedded.tomcat.TomcatWebServer] - Tomcat initialized with port(s): 8980 (http)
2019-07-09 10:20:35.799 DEBUG 3740 [           main] [c.j.common.datasource.RoutingDataSource] - Set default target data source success.
2019-07-09 10:20:42.186 DEBUG 3740 [           main] [com.jeesite.common.beetl.BeetlUtils    ] - Beetl config files: [classpath:/config/beetl-core.properties, classpath:/config/beetl.properties]
2019-07-09 10:20:42.466 DEBUG 3740 [           main] [c.j.c.m.m.provider.SelectSqlProvider   ] - 2毫秒: SELECT a.status AS "status", a.create_by AS "createBy", a.create_date AS "createDate", a.update_by AS "updateBy", a.update_date AS "updateDate", a.remarks AS "remarks", a.module_code AS "moduleCode", a.module_name AS "moduleName", a.description AS "description", a.main_class_name AS "mainClassName", a.current_version AS "currentVersion", a.upgrade_info AS "upgradeInfo" FROM js_sys_module a WHERE a.status = #{sqlMap.where#status#EQ1} ORDER BY a.update_date DESC
2019-07-09 10:20:42.487 DEBUG 3740 [           main] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@7af2ee23] will not be managed by Spring
2019-07-09 10:20:42.500 DEBUG 3740 [           main] [c.j.modules.sys.dao.ModuleDao.findList ] - ==>  Preparing: SELECT a.status AS "status", a.create_by AS "createBy", a.create_date AS "createDate", a.update_by AS "updateBy", a.update_date AS "updateDate", a.remarks AS "remarks", a.module_code AS "moduleCode", a.module_name AS "moduleName", a.description AS "description", a.main_class_name AS "mainClassName", a.current_version AS "currentVersion", a.upgrade_info AS "upgradeInfo" FROM js_sys_module a WHERE a.status = ? ORDER BY a.update_date DESC 
2019-07-09 10:20:42.526 DEBUG 3740 [           main] [c.j.modules.sys.dao.ModuleDao.findList ] - ==> Parameters: 0(String)
2019-07-09 10:20:42.566 DEBUG 3740 [           main] [c.j.modules.sys.dao.ModuleDao.findList ] - <==      Total: 2
2019-07-09 10:20:42.692 DEBUG 3740 [           main] [c.j.c.m.m.provider.SelectSqlProvider   ] - 0毫秒: SELECT a.corp_code AS "corpCode", a.corp_name AS "corpName", a.status AS "status", a.create_by AS "createBy", a.create_date AS "createDate", a.update_by AS "updateBy", a.update_date AS "updateDate", a.remarks AS "remarks", a.user_code AS "userCode", a.login_code AS "loginCode", a.user_name AS "userName", a.password AS "password", a.email AS "email", a.mobile AS "mobile", a.phone AS "phone", a.sex AS "sex", a.avatar AS "avatar", a.sign AS "sign", a.wx_openid AS "wxOpenid", a.mobile_imei AS "mobileImei", a.user_type AS "userType", a.ref_code AS "refCode", a.ref_name AS "refName", a.mgr_type AS "mgrType", a.pwd_security_level AS "pwdSecurityLevel", a.pwd_update_date AS "pwdUpdateDate", a.pwd_update_record AS "pwdUpdateRecord", a.pwd_question AS "pwdQuestion", a.pwd_question_answer AS "pwdQuestionAnswer", a.pwd_question_2 AS "pwdQuestion2", a.pwd_question_answer_2 AS "pwdQuestionAnswer2", a.pwd_question_3 AS "pwdQuestion3", a.pwd_question_answer_3 AS "pwdQuestionAnswer3", a.pwd_quest_update_date AS "pwdQuestUpdateDate", a.last_login_ip AS "lastLoginIp", a.last_login_date AS "lastLoginDate", a.freeze_date AS "freezeDate", a.freeze_cause AS "freezeCause", a.user_weight AS "userWeight", a.extend_s1 AS "extend.extendS1", a.extend_s2 AS "extend.extendS2", a.extend_s3 AS "extend.extendS3", a.extend_s4 AS "extend.extendS4", a.extend_s5 AS "extend.extendS5", a.extend_s6 AS "extend.extendS6", a.extend_s7 AS "extend.extendS7", a.extend_s8 AS "extend.extendS8", a.extend_i1 AS "extend.extendI1", a.extend_i2 AS "extend.extendI2", a.extend_i3 AS "extend.extendI3", a.extend_i4 AS "extend.extendI4", a.extend_f1 AS "extend.extendF1", a.extend_f2 AS "extend.extendF2", a.extend_f3 AS "extend.extendF3", a.extend_f4 AS "extend.extendF4", a.extend_d1 AS "extend.extendD1", a.extend_d2 AS "extend.extendD2", a.extend_d3 AS "extend.extendD3", a.extend_d4 AS "extend.extendD4" FROM js_sys_user a WHERE a.`user_code` = #{userCode}
2019-07-09 10:20:42.694 DEBUG 3740 [           main] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@7af2ee23] will be managed by Spring
2019-07-09 10:20:42.694 DEBUG 3740 [           main] [com.jeesite.modules.sys.dao.UserDao.get] - ==>  Preparing: SELECT a.corp_code AS "corpCode", a.corp_name AS "corpName", a.status AS "status", a.create_by AS "createBy", a.create_date AS "createDate", a.update_by AS "updateBy", a.update_date AS "updateDate", a.remarks AS "remarks", a.user_code AS "userCode", a.login_code AS "loginCode", a.user_name AS "userName", a.password AS "password", a.email AS "email", a.mobile AS "mobile", a.phone AS "phone", a.sex AS "sex", a.avatar AS "avatar", a.sign AS "sign", a.wx_openid AS "wxOpenid", a.mobile_imei AS "mobileImei", a.user_type AS "userType", a.ref_code AS "refCode", a.ref_name AS "refName", a.mgr_type AS "mgrType", a.pwd_security_level AS "pwdSecurityLevel", a.pwd_update_date AS "pwdUpdateDate", a.pwd_update_record AS "pwdUpdateRecord", a.pwd_question AS "pwdQuestion", a.pwd_question_answer AS "pwdQuestionAnswer", a.pwd_question_2 AS "pwdQuestion2", a.pwd_question_answer_2 AS "pwdQuestionAnswer2", a.pwd_question_3 AS "pwdQuestion3", a.pwd_question_answer_3 AS "pwdQuestionAnswer3", a.pwd_quest_update_date AS "pwdQuestUpdateDate", a.last_login_ip AS "lastLoginIp", a.last_login_date AS "lastLoginDate", a.freeze_date AS "freezeDate", a.freeze_cause AS "freezeCause", a.user_weight AS "userWeight", a.extend_s1 AS "extend.extendS1", a.extend_s2 AS "extend.extendS2", a.extend_s3 AS "extend.extendS3", a.extend_s4 AS "extend.extendS4", a.extend_s5 AS "extend.extendS5", a.extend_s6 AS "extend.extendS6", a.extend_s7 AS "extend.extendS7", a.extend_s8 AS "extend.extendS8", a.extend_i1 AS "extend.extendI1", a.extend_i2 AS "extend.extendI2", a.extend_i3 AS "extend.extendI3", a.extend_i4 AS "extend.extendI4", a.extend_f1 AS "extend.extendF1", a.extend_f2 AS "extend.extendF2", a.extend_f3 AS "extend.extendF3", a.extend_f4 AS "extend.extendF4", a.extend_d1 AS "extend.extendD1", a.extend_d2 AS "extend.extendD2", a.extend_d3 AS "extend.extendD3", a.extend_d4 AS "extend.extendD4" FROM js_sys_user a WHERE a.`user_code` = ? 
2019-07-09 10:20:42.695 DEBUG 3740 [           main] [com.jeesite.modules.sys.dao.UserDao.get] - ==> Parameters: system(String)
2019-07-09 10:20:42.723 DEBUG 3740 [           main] [com.jeesite.modules.sys.dao.UserDao.get] - <==      Total: 1
2019-07-09 10:20:42.765 DEBUG 3740 [           main] [c.j.m.s.dao.RoleDao.findListByUserCode ] - ==>  Preparing: SELECT a.corp_code AS "corpCode", a.corp_name AS "corpName", a.status AS "status", a.create_by AS "createBy", a.create_date AS "createDate", a.update_by AS "updateBy", a.update_date AS "updateDate", a.remarks AS "remarks", a.role_code AS "roleCode", a.role_name AS "roleName", a.role_type AS "roleType", a.role_sort AS "roleSort", a.is_sys AS "isSys", a.user_type AS "userType", a.data_scope AS "dataScope" FROM js_sys_role a JOIN js_sys_user_role ur ON a.role_code = ur.role_code WHERE a.status = ? AND ur.user_code = ? ORDER BY a.role_sort ASC 
2019-07-09 10:20:42.766 DEBUG 3740 [           main] [c.j.m.s.dao.RoleDao.findListByUserCode ] - ==> Parameters: 0(String), system(String)
2019-07-09 10:20:42.791 DEBUG 3740 [           main] [c.j.m.s.dao.RoleDao.findListByUserCode ] - <==      Total: 0
2019-07-09 10:20:42.827 DEBUG 3740 [           main] [c.j.c.m.m.provider.UpdateSqlProvider   ] - 193毫秒: UPDATE js_sys_menu SET `status` = #{param1.status}, `update_by` = #{param1.updateBy}, `update_date` = #{param1.updateDate} WHERE status != #{param2.STATUS_DELETE} AND module_codes LIKE #{param2.sqlMap.where#module_codes#LIKE1}
2019-07-09 10:20:42.828 DEBUG 3740 [           main] [c.j.m.s.d.MenuDao.updateStatusByEntity ] - ==>  Preparing: UPDATE js_sys_menu SET `status` = ?, `update_by` = ?, `update_date` = ? WHERE status != ? AND module_codes LIKE ? 
2019-07-09 10:20:42.830 DEBUG 3740 [           main] [c.j.m.s.d.MenuDao.updateStatusByEntity ] - ==> Parameters: 2(String), system(String), 2019-07-09 10:20:42.827(Timestamp), 1(String), %cms%(String)
2019-07-09 10:20:42.878 DEBUG 3740 [           main] [c.j.m.s.d.MenuDao.updateStatusByEntity ] - <==    Updates: 7
2019-07-09 10:20:42.995 DEBUG 3740 [           main] [c.j.c.m.m.provider.UpdateSqlProvider   ] - 5毫秒: UPDATE js_sys_menu SET `status` = #{param1.status}, `update_by` = #{param1.updateBy}, `update_date` = #{param1.updateDate} WHERE status != #{param2.STATUS_DELETE} AND module_codes LIKE #{param2.sqlMap.where#module_codes#LIKE1}
2019-07-09 10:20:42.995 DEBUG 3740 [           main] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@7af2ee23] will be managed by Spring
2019-07-09 10:20:42.995 DEBUG 3740 [           main] [c.j.m.s.d.MenuDao.updateStatusByEntity ] - ==>  Preparing: UPDATE js_sys_menu SET `status` = ?, `update_by` = ?, `update_date` = ? WHERE status != ? AND module_codes LIKE ? 
2019-07-09 10:20:42.996 DEBUG 3740 [           main] [c.j.m.s.d.MenuDao.updateStatusByEntity ] - ==> Parameters: 0(String), system(String), 2019-07-09 10:20:42.994(Timestamp), 1(String), %core%(String)
2019-07-09 10:20:43.045 DEBUG 3740 [           main] [c.j.m.s.d.MenuDao.updateStatusByEntity ] - <==    Updates: 70
2019-07-09 10:20:44.901 INFO  3740 [           main] [o.s.b.w.embedded.tomcat.TomcatWebServer] - Tomcat started on port(s): 8980 (http) with context path '/js'
2019-07-09 10:20:44.907 INFO  3740 [           main] [com.jeesite.modules.Application        ] - Started Application in 14.6 seconds (JVM running for 15.294)
2019-07-09 10:20:55.243 DEBUG 3740 [nio-8980-exec-1] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@7af2ee23] will be managed by Spring
2019-07-09 10:20:55.244 DEBUG 3740 [nio-8980-exec-1] [c.j.m.a.d.A.insertAirPrescription      ] - ==>  Preparing: INSERT INTO sys_air_prescription ( content, pic1, check_state, user_id, create_date, create_by, del_flag ) values ( ?, ?, ?, ?, NOW(), ?, ? ) 
2019-07-09 10:20:55.245 DEBUG 3740 [nio-8980-exec-1] [c.j.m.a.d.A.insertAirPrescription      ] - ==> Parameters: wwqeewq(String), (String), 0(String), 123(String), 创建人(String), 0(String)
2019-07-09 10:20:55.293 DEBUG 3740 [nio-8980-exec-1] [c.j.m.a.d.A.insertAirPrescription      ] - <==    Updates: 1
2019-07-09 10:34:25.454 INFO  5504 [           main] [com.jeesite.modules.Application        ] - Starting Application on DESKTOP-FVHI4E5 with PID 5504 (E:\gitlabHome\HaoLangZhongProject\HaoLangZhong\src\main\webapp\WEB-INF\classes started by 1111111 in E:\gitlabHome\HaoLangZhongProject\HaoLangZhong)
2019-07-09 10:34:25.459 DEBUG 5504 [           main] [com.jeesite.modules.Application        ] - Running with Spring Boot v2.0.6.RELEASE, Spring v5.0.10.RELEASE
2019-07-09 10:34:25.459 INFO  5504 [           main] [com.jeesite.modules.Application        ] - The following profiles are active: default
2019-07-09 10:34:27.611 INFO  5504 [           main] [com.jeesite.common.config.Global       ] - Config files: [classpath:config/jeesite-core.yml, classpath:config/application.yml]
2019-07-09 10:34:27.612 INFO  5504 [           main] [com.jeesite.common.config.Global       ] - Spring cache cluster mode: false, session manager name: J1CacheSession
2019-07-09 10:34:28.133 INFO  5504 [           main] [com.jeesite.common.config.Global       ] - user.home: C:/Users/15040
2019-07-09 10:34:28.134 INFO  5504 [           main] [com.jeesite.common.config.Global       ] - user.dir: E:/gitlabHome/HaoLangZhongProject/HaoLangZhong
2019-07-09 10:34:28.134 INFO  5504 [           main] [com.jeesite.common.config.Global       ] - logPath: E:/gitlabHome/HaoLangZhongProject/HaoLangZhong/src/main/webapp/WEB-INF/classes

   _____        ___  _   _           ___
  |_   _|      / __'(_)_| |_        /   |
  _ | | __  __ \___ | |_   _| __   / /| |
 ( .| |/__\/__\ ___)| | | |_ /__\ / /_| |_
  \___|\__.\__.|____|_| \___)\__.(____   _|  :: JeeSite V4.1.3 :: 
======================================|_|==========================

    欢迎使用 JeeSite Demo V4.1

    您当前的版本为社区版，官方网站：http://jeesite.com

    机器码是：6c59ab5175477606a72e1628bfd13f1a
    产品名称：JeeSite Demo
    公司名称：ThinkGem

===================================================================

2019-07-09 10:34:29.331 INFO  5504 [           main] [o.s.b.w.embedded.tomcat.TomcatWebServer] - Tomcat initialized with port(s): 8980 (http)
2019-07-09 10:34:30.420 DEBUG 5504 [           main] [c.j.common.datasource.RoutingDataSource] - Set default target data source success.
2019-07-09 10:34:36.524 DEBUG 5504 [           main] [com.jeesite.common.beetl.BeetlUtils    ] - Beetl config files: [classpath:/config/beetl-core.properties, classpath:/config/beetl.properties]
2019-07-09 10:34:36.755 DEBUG 5504 [           main] [c.j.c.m.m.provider.SelectSqlProvider   ] - 2毫秒: SELECT a.status AS "status", a.create_by AS "createBy", a.create_date AS "createDate", a.update_by AS "updateBy", a.update_date AS "updateDate", a.remarks AS "remarks", a.module_code AS "moduleCode", a.module_name AS "moduleName", a.description AS "description", a.main_class_name AS "mainClassName", a.current_version AS "currentVersion", a.upgrade_info AS "upgradeInfo" FROM js_sys_module a WHERE a.status = #{sqlMap.where#status#EQ1} ORDER BY a.update_date DESC
2019-07-09 10:34:36.778 DEBUG 5504 [           main] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@25630ede] will not be managed by Spring
2019-07-09 10:34:36.789 DEBUG 5504 [           main] [c.j.modules.sys.dao.ModuleDao.findList ] - ==>  Preparing: SELECT a.status AS "status", a.create_by AS "createBy", a.create_date AS "createDate", a.update_by AS "updateBy", a.update_date AS "updateDate", a.remarks AS "remarks", a.module_code AS "moduleCode", a.module_name AS "moduleName", a.description AS "description", a.main_class_name AS "mainClassName", a.current_version AS "currentVersion", a.upgrade_info AS "upgradeInfo" FROM js_sys_module a WHERE a.status = ? ORDER BY a.update_date DESC 
2019-07-09 10:34:36.814 DEBUG 5504 [           main] [c.j.modules.sys.dao.ModuleDao.findList ] - ==> Parameters: 0(String)
2019-07-09 10:34:36.854 DEBUG 5504 [           main] [c.j.modules.sys.dao.ModuleDao.findList ] - <==      Total: 2
2019-07-09 10:34:36.978 DEBUG 5504 [           main] [c.j.c.m.m.provider.SelectSqlProvider   ] - 1毫秒: SELECT a.corp_code AS "corpCode", a.corp_name AS "corpName", a.status AS "status", a.create_by AS "createBy", a.create_date AS "createDate", a.update_by AS "updateBy", a.update_date AS "updateDate", a.remarks AS "remarks", a.user_code AS "userCode", a.login_code AS "loginCode", a.user_name AS "userName", a.password AS "password", a.email AS "email", a.mobile AS "mobile", a.phone AS "phone", a.sex AS "sex", a.avatar AS "avatar", a.sign AS "sign", a.wx_openid AS "wxOpenid", a.mobile_imei AS "mobileImei", a.user_type AS "userType", a.ref_code AS "refCode", a.ref_name AS "refName", a.mgr_type AS "mgrType", a.pwd_security_level AS "pwdSecurityLevel", a.pwd_update_date AS "pwdUpdateDate", a.pwd_update_record AS "pwdUpdateRecord", a.pwd_question AS "pwdQuestion", a.pwd_question_answer AS "pwdQuestionAnswer", a.pwd_question_2 AS "pwdQuestion2", a.pwd_question_answer_2 AS "pwdQuestionAnswer2", a.pwd_question_3 AS "pwdQuestion3", a.pwd_question_answer_3 AS "pwdQuestionAnswer3", a.pwd_quest_update_date AS "pwdQuestUpdateDate", a.last_login_ip AS "lastLoginIp", a.last_login_date AS "lastLoginDate", a.freeze_date AS "freezeDate", a.freeze_cause AS "freezeCause", a.user_weight AS "userWeight", a.extend_s1 AS "extend.extendS1", a.extend_s2 AS "extend.extendS2", a.extend_s3 AS "extend.extendS3", a.extend_s4 AS "extend.extendS4", a.extend_s5 AS "extend.extendS5", a.extend_s6 AS "extend.extendS6", a.extend_s7 AS "extend.extendS7", a.extend_s8 AS "extend.extendS8", a.extend_i1 AS "extend.extendI1", a.extend_i2 AS "extend.extendI2", a.extend_i3 AS "extend.extendI3", a.extend_i4 AS "extend.extendI4", a.extend_f1 AS "extend.extendF1", a.extend_f2 AS "extend.extendF2", a.extend_f3 AS "extend.extendF3", a.extend_f4 AS "extend.extendF4", a.extend_d1 AS "extend.extendD1", a.extend_d2 AS "extend.extendD2", a.extend_d3 AS "extend.extendD3", a.extend_d4 AS "extend.extendD4" FROM js_sys_user a WHERE a.`user_code` = #{userCode}
2019-07-09 10:34:36.979 DEBUG 5504 [           main] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@25630ede] will be managed by Spring
2019-07-09 10:34:36.980 DEBUG 5504 [           main] [com.jeesite.modules.sys.dao.UserDao.get] - ==>  Preparing: SELECT a.corp_code AS "corpCode", a.corp_name AS "corpName", a.status AS "status", a.create_by AS "createBy", a.create_date AS "createDate", a.update_by AS "updateBy", a.update_date AS "updateDate", a.remarks AS "remarks", a.user_code AS "userCode", a.login_code AS "loginCode", a.user_name AS "userName", a.password AS "password", a.email AS "email", a.mobile AS "mobile", a.phone AS "phone", a.sex AS "sex", a.avatar AS "avatar", a.sign AS "sign", a.wx_openid AS "wxOpenid", a.mobile_imei AS "mobileImei", a.user_type AS "userType", a.ref_code AS "refCode", a.ref_name AS "refName", a.mgr_type AS "mgrType", a.pwd_security_level AS "pwdSecurityLevel", a.pwd_update_date AS "pwdUpdateDate", a.pwd_update_record AS "pwdUpdateRecord", a.pwd_question AS "pwdQuestion", a.pwd_question_answer AS "pwdQuestionAnswer", a.pwd_question_2 AS "pwdQuestion2", a.pwd_question_answer_2 AS "pwdQuestionAnswer2", a.pwd_question_3 AS "pwdQuestion3", a.pwd_question_answer_3 AS "pwdQuestionAnswer3", a.pwd_quest_update_date AS "pwdQuestUpdateDate", a.last_login_ip AS "lastLoginIp", a.last_login_date AS "lastLoginDate", a.freeze_date AS "freezeDate", a.freeze_cause AS "freezeCause", a.user_weight AS "userWeight", a.extend_s1 AS "extend.extendS1", a.extend_s2 AS "extend.extendS2", a.extend_s3 AS "extend.extendS3", a.extend_s4 AS "extend.extendS4", a.extend_s5 AS "extend.extendS5", a.extend_s6 AS "extend.extendS6", a.extend_s7 AS "extend.extendS7", a.extend_s8 AS "extend.extendS8", a.extend_i1 AS "extend.extendI1", a.extend_i2 AS "extend.extendI2", a.extend_i3 AS "extend.extendI3", a.extend_i4 AS "extend.extendI4", a.extend_f1 AS "extend.extendF1", a.extend_f2 AS "extend.extendF2", a.extend_f3 AS "extend.extendF3", a.extend_f4 AS "extend.extendF4", a.extend_d1 AS "extend.extendD1", a.extend_d2 AS "extend.extendD2", a.extend_d3 AS "extend.extendD3", a.extend_d4 AS "extend.extendD4" FROM js_sys_user a WHERE a.`user_code` = ? 
2019-07-09 10:34:36.981 DEBUG 5504 [           main] [com.jeesite.modules.sys.dao.UserDao.get] - ==> Parameters: system(String)
2019-07-09 10:34:37.008 DEBUG 5504 [           main] [com.jeesite.modules.sys.dao.UserDao.get] - <==      Total: 1
2019-07-09 10:34:37.049 DEBUG 5504 [           main] [c.j.m.s.dao.RoleDao.findListByUserCode ] - ==>  Preparing: SELECT a.corp_code AS "corpCode", a.corp_name AS "corpName", a.status AS "status", a.create_by AS "createBy", a.create_date AS "createDate", a.update_by AS "updateBy", a.update_date AS "updateDate", a.remarks AS "remarks", a.role_code AS "roleCode", a.role_name AS "roleName", a.role_type AS "roleType", a.role_sort AS "roleSort", a.is_sys AS "isSys", a.user_type AS "userType", a.data_scope AS "dataScope" FROM js_sys_role a JOIN js_sys_user_role ur ON a.role_code = ur.role_code WHERE a.status = ? AND ur.user_code = ? ORDER BY a.role_sort ASC 
2019-07-09 10:34:37.050 DEBUG 5504 [           main] [c.j.m.s.dao.RoleDao.findListByUserCode ] - ==> Parameters: 0(String), system(String)
2019-07-09 10:34:37.073 DEBUG 5504 [           main] [c.j.m.s.dao.RoleDao.findListByUserCode ] - <==      Total: 0
2019-07-09 10:34:37.106 DEBUG 5504 [           main] [c.j.c.m.m.provider.UpdateSqlProvider   ] - 187毫秒: UPDATE js_sys_menu SET `status` = #{param1.status}, `update_by` = #{param1.updateBy}, `update_date` = #{param1.updateDate} WHERE status != #{param2.STATUS_DELETE} AND module_codes LIKE #{param2.sqlMap.where#module_codes#LIKE1}
2019-07-09 10:34:37.107 DEBUG 5504 [           main] [c.j.m.s.d.MenuDao.updateStatusByEntity ] - ==>  Preparing: UPDATE js_sys_menu SET `status` = ?, `update_by` = ?, `update_date` = ? WHERE status != ? AND module_codes LIKE ? 
2019-07-09 10:34:37.109 DEBUG 5504 [           main] [c.j.m.s.d.MenuDao.updateStatusByEntity ] - ==> Parameters: 2(String), system(String), 2019-07-09 10:34:37.106(Timestamp), 1(String), %cms%(String)
2019-07-09 10:34:37.155 DEBUG 5504 [           main] [c.j.m.s.d.MenuDao.updateStatusByEntity ] - <==    Updates: 7
2019-07-09 10:34:37.268 DEBUG 5504 [           main] [c.j.c.m.m.provider.UpdateSqlProvider   ] - 7毫秒: UPDATE js_sys_menu SET `status` = #{param1.status}, `update_by` = #{param1.updateBy}, `update_date` = #{param1.updateDate} WHERE status != #{param2.STATUS_DELETE} AND module_codes LIKE #{param2.sqlMap.where#module_codes#LIKE1}
2019-07-09 10:34:37.269 DEBUG 5504 [           main] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@25630ede] will be managed by Spring
2019-07-09 10:34:37.270 DEBUG 5504 [           main] [c.j.m.s.d.MenuDao.updateStatusByEntity ] - ==>  Preparing: UPDATE js_sys_menu SET `status` = ?, `update_by` = ?, `update_date` = ? WHERE status != ? AND module_codes LIKE ? 
2019-07-09 10:34:37.271 DEBUG 5504 [           main] [c.j.m.s.d.MenuDao.updateStatusByEntity ] - ==> Parameters: 0(String), system(String), 2019-07-09 10:34:37.267(Timestamp), 1(String), %core%(String)
2019-07-09 10:34:37.320 DEBUG 5504 [           main] [c.j.m.s.d.MenuDao.updateStatusByEntity ] - <==    Updates: 70
2019-07-09 10:34:39.091 INFO  5504 [           main] [o.s.b.w.embedded.tomcat.TomcatWebServer] - Tomcat started on port(s): 8980 (http) with context path '/js'
2019-07-09 10:34:39.096 INFO  5504 [           main] [com.jeesite.modules.Application        ] - Started Application in 14.331 seconds (JVM running for 15.019)
2019-07-09 10:36:58.227 DEBUG 5504 [nio-8980-exec-8] [c.j.c.m.m.provider.SelectSqlProvider   ] - 1毫秒: SELECT a.id AS "id", a.content AS "content", a.pic1 AS "pic1", a.pic2 AS "pic2", a.pic3 AS "pic3", a.check_state AS "checkState", a.user_id AS "userId", a.pay_price AS "payPrice", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.create_by AS "createBy", a.update_by AS "updateBy", a.del_flag AS "delFlag" FROM sys_air_prescription a WHERE a.user_id = #{sqlMap.where#user_id#EQ1} ORDER BY a.update_date DESC
2019-07-09 10:36:59.113 DEBUG 5504 [nio-8980-exec-8] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@25630ede] will not be managed by Spring
2019-07-09 10:36:59.114 DEBUG 5504 [nio-8980-exec-8] [c.j.m.a.dao.AirPrescriptionDao.findList] - ==>  Preparing: SELECT a.id AS "id", a.content AS "content", a.pic1 AS "pic1", a.pic2 AS "pic2", a.pic3 AS "pic3", a.check_state AS "checkState", a.user_id AS "userId", a.pay_price AS "payPrice", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.create_by AS "createBy", a.update_by AS "updateBy", a.del_flag AS "delFlag" FROM sys_air_prescription a WHERE a.user_id = ? ORDER BY a.update_date DESC 
2019-07-09 10:36:59.114 DEBUG 5504 [nio-8980-exec-8] [c.j.m.a.dao.AirPrescriptionDao.findList] - ==> Parameters: 123(String)
2019-07-09 10:36:59.144 DEBUG 5504 [nio-8980-exec-8] [c.j.m.a.dao.AirPrescriptionDao.findList] - <==      Total: 6
2019-07-09 10:40:21.031 DEBUG 5504 [nio-8980-exec-1] [c.j.c.m.m.provider.SelectSqlProvider   ] - 1毫秒: SELECT a.id AS "id", a.content AS "content", a.pic1 AS "pic1", a.pic2 AS "pic2", a.pic3 AS "pic3", a.check_state AS "checkState", a.user_id AS "userId", a.pay_price AS "payPrice", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.create_by AS "createBy", a.update_by AS "updateBy", a.del_flag AS "delFlag" FROM sys_air_prescription a WHERE a.user_id = #{sqlMap.where#user_id#EQ1} ORDER BY a.update_date DESC
2019-07-09 10:40:21.054 DEBUG 5504 [nio-8980-exec-1] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@25630ede] will not be managed by Spring
2019-07-09 10:40:21.055 DEBUG 5504 [nio-8980-exec-1] [c.j.m.a.dao.AirPrescriptionDao.findList] - ==>  Preparing: SELECT a.id AS "id", a.content AS "content", a.pic1 AS "pic1", a.pic2 AS "pic2", a.pic3 AS "pic3", a.check_state AS "checkState", a.user_id AS "userId", a.pay_price AS "payPrice", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.create_by AS "createBy", a.update_by AS "updateBy", a.del_flag AS "delFlag" FROM sys_air_prescription a WHERE a.user_id = ? ORDER BY a.update_date DESC 
2019-07-09 10:40:21.055 DEBUG 5504 [nio-8980-exec-1] [c.j.m.a.dao.AirPrescriptionDao.findList] - ==> Parameters: 123(String)
2019-07-09 10:40:21.081 DEBUG 5504 [nio-8980-exec-1] [c.j.m.a.dao.AirPrescriptionDao.findList] - <==      Total: 6
2019-07-09 10:40:48.169 DEBUG 5504 [nio-8980-exec-8] [c.j.c.m.m.provider.SelectSqlProvider   ] - 1毫秒: SELECT a.id AS "id", a.content AS "content", a.pic1 AS "pic1", a.pic2 AS "pic2", a.pic3 AS "pic3", a.check_state AS "checkState", a.user_id AS "userId", a.pay_price AS "payPrice", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.create_by AS "createBy", a.update_by AS "updateBy", a.del_flag AS "delFlag" FROM sys_air_prescription a WHERE a.user_id = #{sqlMap.where#user_id#EQ1} ORDER BY a.update_date DESC
2019-07-09 10:40:48.170 DEBUG 5504 [nio-8980-exec-8] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@25630ede] will not be managed by Spring
2019-07-09 10:40:48.171 DEBUG 5504 [nio-8980-exec-8] [c.j.m.a.dao.AirPrescriptionDao.findList] - ==>  Preparing: SELECT a.id AS "id", a.content AS "content", a.pic1 AS "pic1", a.pic2 AS "pic2", a.pic3 AS "pic3", a.check_state AS "checkState", a.user_id AS "userId", a.pay_price AS "payPrice", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.create_by AS "createBy", a.update_by AS "updateBy", a.del_flag AS "delFlag" FROM sys_air_prescription a WHERE a.user_id = ? ORDER BY a.update_date DESC 
2019-07-09 10:40:48.172 DEBUG 5504 [nio-8980-exec-8] [c.j.m.a.dao.AirPrescriptionDao.findList] - ==> Parameters: 123(String)
2019-07-09 10:40:48.200 DEBUG 5504 [nio-8980-exec-8] [c.j.m.a.dao.AirPrescriptionDao.findList] - <==      Total: 6
2019-07-09 10:41:59.005 DEBUG 5504 [nio-8980-exec-1] [c.j.c.m.m.provider.SelectSqlProvider   ] - 1毫秒: SELECT a.id AS "id", a.content AS "content", a.pic1 AS "pic1", a.pic2 AS "pic2", a.pic3 AS "pic3", a.check_state AS "checkState", a.user_id AS "userId", a.pay_price AS "payPrice", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.create_by AS "createBy", a.update_by AS "updateBy", a.del_flag AS "delFlag" FROM sys_air_prescription a WHERE a.user_id = #{sqlMap.where#user_id#EQ1} ORDER BY a.update_date DESC
2019-07-09 10:41:59.030 DEBUG 5504 [nio-8980-exec-1] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@25630ede] will not be managed by Spring
2019-07-09 10:41:59.031 DEBUG 5504 [nio-8980-exec-1] [c.j.m.a.dao.AirPrescriptionDao.findList] - ==>  Preparing: SELECT a.id AS "id", a.content AS "content", a.pic1 AS "pic1", a.pic2 AS "pic2", a.pic3 AS "pic3", a.check_state AS "checkState", a.user_id AS "userId", a.pay_price AS "payPrice", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.create_by AS "createBy", a.update_by AS "updateBy", a.del_flag AS "delFlag" FROM sys_air_prescription a WHERE a.user_id = ? ORDER BY a.update_date DESC 
2019-07-09 10:41:59.032 DEBUG 5504 [nio-8980-exec-1] [c.j.m.a.dao.AirPrescriptionDao.findList] - ==> Parameters: 123(String)
2019-07-09 10:41:59.059 DEBUG 5504 [nio-8980-exec-1] [c.j.m.a.dao.AirPrescriptionDao.findList] - <==      Total: 6
2019-07-09 11:27:52.874 DEBUG 5504 [nio-8980-exec-1] [c.j.c.m.m.provider.SelectSqlProvider   ] - 3毫秒: SELECT a.id AS "id", a.content AS "content", a.pic1 AS "pic1", a.pic2 AS "pic2", a.pic3 AS "pic3", a.check_state AS "checkState", a.user_id AS "userId", a.pay_price AS "payPrice", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.create_by AS "createBy", a.update_by AS "updateBy", a.del_flag AS "delFlag" FROM sys_air_prescription a WHERE a.user_id = #{sqlMap.where#user_id#EQ1} ORDER BY a.create_date DESC
2019-07-09 11:27:53.115 DEBUG 5504 [nio-8980-exec-1] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@3aec11bb] will not be managed by Spring
2019-07-09 11:27:53.116 DEBUG 5504 [nio-8980-exec-1] [c.j.m.a.dao.AirPrescriptionDao.findList] - ==>  Preparing: SELECT a.id AS "id", a.content AS "content", a.pic1 AS "pic1", a.pic2 AS "pic2", a.pic3 AS "pic3", a.check_state AS "checkState", a.user_id AS "userId", a.pay_price AS "payPrice", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.create_by AS "createBy", a.update_by AS "updateBy", a.del_flag AS "delFlag" FROM sys_air_prescription a WHERE a.user_id = ? ORDER BY a.create_date DESC 
2019-07-09 11:27:53.118 DEBUG 5504 [nio-8980-exec-1] [c.j.m.a.dao.AirPrescriptionDao.findList] - ==> Parameters: 123(String)
2019-07-09 11:27:53.144 DEBUG 5504 [nio-8980-exec-1] [c.j.m.a.dao.AirPrescriptionDao.findList] - <==      Total: 6
2019-07-09 11:27:58.688 DEBUG 5504 [nio-8980-exec-6] [c.j.c.m.m.provider.SelectSqlProvider   ] - 1毫秒: SELECT a.id AS "id", a.content AS "content", a.pic1 AS "pic1", a.pic2 AS "pic2", a.pic3 AS "pic3", a.check_state AS "checkState", a.user_id AS "userId", a.pay_price AS "payPrice", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.create_by AS "createBy", a.update_by AS "updateBy", a.del_flag AS "delFlag" FROM sys_air_prescription a WHERE a.user_id = #{sqlMap.where#user_id#EQ1} ORDER BY a.create_date DESC
2019-07-09 11:27:58.688 DEBUG 5504 [nio-8980-exec-6] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@3aec11bb] will not be managed by Spring
2019-07-09 11:27:58.689 DEBUG 5504 [nio-8980-exec-6] [c.j.m.a.dao.AirPrescriptionDao.findList] - ==>  Preparing: SELECT a.id AS "id", a.content AS "content", a.pic1 AS "pic1", a.pic2 AS "pic2", a.pic3 AS "pic3", a.check_state AS "checkState", a.user_id AS "userId", a.pay_price AS "payPrice", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.create_by AS "createBy", a.update_by AS "updateBy", a.del_flag AS "delFlag" FROM sys_air_prescription a WHERE a.user_id = ? ORDER BY a.create_date DESC 
2019-07-09 11:27:58.690 DEBUG 5504 [nio-8980-exec-6] [c.j.m.a.dao.AirPrescriptionDao.findList] - ==> Parameters: 123(String)
2019-07-09 11:27:58.716 DEBUG 5504 [nio-8980-exec-6] [c.j.m.a.dao.AirPrescriptionDao.findList] - <==      Total: 6
2019-07-09 11:33:39.628 DEBUG 5504 [io-8980-exec-10] [c.j.c.m.m.provider.SelectSqlProvider   ] - 1毫秒: SELECT a.id AS "id", a.content AS "content", a.pic1 AS "pic1", a.pic2 AS "pic2", a.pic3 AS "pic3", a.check_state AS "checkState", a.user_id AS "userId", a.pay_price AS "payPrice", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.create_by AS "createBy", a.update_by AS "updateBy", a.del_flag AS "delFlag" FROM sys_air_prescription a WHERE a.user_id = #{sqlMap.where#user_id#EQ1} ORDER BY a.create_date DESC
2019-07-09 11:33:39.652 DEBUG 5504 [io-8980-exec-10] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@3aec11bb] will not be managed by Spring
2019-07-09 11:33:39.653 DEBUG 5504 [io-8980-exec-10] [c.j.m.a.dao.AirPrescriptionDao.findList] - ==>  Preparing: SELECT a.id AS "id", a.content AS "content", a.pic1 AS "pic1", a.pic2 AS "pic2", a.pic3 AS "pic3", a.check_state AS "checkState", a.user_id AS "userId", a.pay_price AS "payPrice", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.create_by AS "createBy", a.update_by AS "updateBy", a.del_flag AS "delFlag" FROM sys_air_prescription a WHERE a.user_id = ? ORDER BY a.create_date DESC 
2019-07-09 11:33:39.653 DEBUG 5504 [io-8980-exec-10] [c.j.m.a.dao.AirPrescriptionDao.findList] - ==> Parameters: 123(String)
2019-07-09 11:33:39.678 DEBUG 5504 [io-8980-exec-10] [c.j.m.a.dao.AirPrescriptionDao.findList] - <==      Total: 6
2019-07-09 13:28:58.589 INFO  15852 [           main] [com.jeesite.modules.Application        ] - Starting Application on DESKTOP-FVHI4E5 with PID 15852 (E:\gitlabHome\HaoLangZhongProject\HaoLangZhong\src\main\webapp\WEB-INF\classes started by 1111111 in E:\gitlabHome\HaoLangZhongProject\HaoLangZhong)
2019-07-09 13:28:58.593 DEBUG 15852 [           main] [com.jeesite.modules.Application        ] - Running with Spring Boot v2.0.6.RELEASE, Spring v5.0.10.RELEASE
2019-07-09 13:28:58.594 INFO  15852 [           main] [com.jeesite.modules.Application        ] - The following profiles are active: default
2019-07-09 13:29:01.408 INFO  15852 [           main] [com.jeesite.common.config.Global       ] - Config files: [classpath:config/jeesite-core.yml, classpath:config/application.yml]
2019-07-09 13:29:01.409 INFO  15852 [           main] [com.jeesite.common.config.Global       ] - Spring cache cluster mode: false, session manager name: J1CacheSession
2019-07-09 13:29:02.123 INFO  15852 [           main] [com.jeesite.common.config.Global       ] - user.home: C:/Users/15040
2019-07-09 13:29:02.124 INFO  15852 [           main] [com.jeesite.common.config.Global       ] - user.dir: E:/gitlabHome/HaoLangZhongProject/HaoLangZhong
2019-07-09 13:29:02.124 INFO  15852 [           main] [com.jeesite.common.config.Global       ] - logPath: E:/gitlabHome/HaoLangZhongProject/HaoLangZhong/src/main/webapp/WEB-INF/classes

   _____        ___  _   _           ___
  |_   _|      / __'(_)_| |_        /   |
  _ | | __  __ \___ | |_   _| __   / /| |
 ( .| |/__\/__\ ___)| | | |_ /__\ / /_| |_
  \___|\__.\__.|____|_| \___)\__.(____   _|  :: JeeSite V4.1.3 :: 
======================================|_|==========================

    欢迎使用 JeeSite Demo V4.1

    您当前的版本为社区版，官方网站：http://jeesite.com

    机器码是：6c59ab5175477606a72e1628bfd13f1a
    产品名称：JeeSite Demo
    公司名称：ThinkGem

===================================================================

2019-07-09 13:29:03.677 INFO  15852 [           main] [o.s.b.w.embedded.tomcat.TomcatWebServer] - Tomcat initialized with port(s): 8980 (http)
2019-07-09 13:29:04.888 DEBUG 15852 [           main] [c.j.common.datasource.RoutingDataSource] - Set default target data source success.
2019-07-09 13:29:12.030 DEBUG 15852 [           main] [com.jeesite.common.beetl.BeetlUtils    ] - Beetl config files: [classpath:/config/beetl-core.properties, classpath:/config/beetl.properties]
2019-07-09 13:29:12.443 DEBUG 15852 [           main] [c.j.c.m.m.provider.SelectSqlProvider   ] - 3毫秒: SELECT a.status AS "status", a.create_by AS "createBy", a.create_date AS "createDate", a.update_by AS "updateBy", a.update_date AS "updateDate", a.remarks AS "remarks", a.module_code AS "moduleCode", a.module_name AS "moduleName", a.description AS "description", a.main_class_name AS "mainClassName", a.current_version AS "currentVersion", a.upgrade_info AS "upgradeInfo" FROM js_sys_module a WHERE a.status = #{sqlMap.where#status#EQ1} ORDER BY a.update_date DESC
2019-07-09 13:29:12.483 DEBUG 15852 [           main] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@471d6571] will not be managed by Spring
2019-07-09 13:29:12.499 DEBUG 15852 [           main] [c.j.modules.sys.dao.ModuleDao.findList ] - ==>  Preparing: SELECT a.status AS "status", a.create_by AS "createBy", a.create_date AS "createDate", a.update_by AS "updateBy", a.update_date AS "updateDate", a.remarks AS "remarks", a.module_code AS "moduleCode", a.module_name AS "moduleName", a.description AS "description", a.main_class_name AS "mainClassName", a.current_version AS "currentVersion", a.upgrade_info AS "upgradeInfo" FROM js_sys_module a WHERE a.status = ? ORDER BY a.update_date DESC 
2019-07-09 13:29:12.543 DEBUG 15852 [           main] [c.j.modules.sys.dao.ModuleDao.findList ] - ==> Parameters: 0(String)
2019-07-09 13:29:12.592 DEBUG 15852 [           main] [c.j.modules.sys.dao.ModuleDao.findList ] - <==      Total: 2
2019-07-09 13:29:12.745 DEBUG 15852 [           main] [c.j.c.m.m.provider.SelectSqlProvider   ] - 0毫秒: SELECT a.corp_code AS "corpCode", a.corp_name AS "corpName", a.status AS "status", a.create_by AS "createBy", a.create_date AS "createDate", a.update_by AS "updateBy", a.update_date AS "updateDate", a.remarks AS "remarks", a.user_code AS "userCode", a.login_code AS "loginCode", a.user_name AS "userName", a.password AS "password", a.email AS "email", a.mobile AS "mobile", a.phone AS "phone", a.sex AS "sex", a.avatar AS "avatar", a.sign AS "sign", a.wx_openid AS "wxOpenid", a.mobile_imei AS "mobileImei", a.user_type AS "userType", a.ref_code AS "refCode", a.ref_name AS "refName", a.mgr_type AS "mgrType", a.pwd_security_level AS "pwdSecurityLevel", a.pwd_update_date AS "pwdUpdateDate", a.pwd_update_record AS "pwdUpdateRecord", a.pwd_question AS "pwdQuestion", a.pwd_question_answer AS "pwdQuestionAnswer", a.pwd_question_2 AS "pwdQuestion2", a.pwd_question_answer_2 AS "pwdQuestionAnswer2", a.pwd_question_3 AS "pwdQuestion3", a.pwd_question_answer_3 AS "pwdQuestionAnswer3", a.pwd_quest_update_date AS "pwdQuestUpdateDate", a.last_login_ip AS "lastLoginIp", a.last_login_date AS "lastLoginDate", a.freeze_date AS "freezeDate", a.freeze_cause AS "freezeCause", a.user_weight AS "userWeight", a.extend_s1 AS "extend.extendS1", a.extend_s2 AS "extend.extendS2", a.extend_s3 AS "extend.extendS3", a.extend_s4 AS "extend.extendS4", a.extend_s5 AS "extend.extendS5", a.extend_s6 AS "extend.extendS6", a.extend_s7 AS "extend.extendS7", a.extend_s8 AS "extend.extendS8", a.extend_i1 AS "extend.extendI1", a.extend_i2 AS "extend.extendI2", a.extend_i3 AS "extend.extendI3", a.extend_i4 AS "extend.extendI4", a.extend_f1 AS "extend.extendF1", a.extend_f2 AS "extend.extendF2", a.extend_f3 AS "extend.extendF3", a.extend_f4 AS "extend.extendF4", a.extend_d1 AS "extend.extendD1", a.extend_d2 AS "extend.extendD2", a.extend_d3 AS "extend.extendD3", a.extend_d4 AS "extend.extendD4" FROM js_sys_user a WHERE a.`user_code` = #{userCode}
2019-07-09 13:29:12.748 DEBUG 15852 [           main] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@471d6571] will be managed by Spring
2019-07-09 13:29:12.749 DEBUG 15852 [           main] [com.jeesite.modules.sys.dao.UserDao.get] - ==>  Preparing: SELECT a.corp_code AS "corpCode", a.corp_name AS "corpName", a.status AS "status", a.create_by AS "createBy", a.create_date AS "createDate", a.update_by AS "updateBy", a.update_date AS "updateDate", a.remarks AS "remarks", a.user_code AS "userCode", a.login_code AS "loginCode", a.user_name AS "userName", a.password AS "password", a.email AS "email", a.mobile AS "mobile", a.phone AS "phone", a.sex AS "sex", a.avatar AS "avatar", a.sign AS "sign", a.wx_openid AS "wxOpenid", a.mobile_imei AS "mobileImei", a.user_type AS "userType", a.ref_code AS "refCode", a.ref_name AS "refName", a.mgr_type AS "mgrType", a.pwd_security_level AS "pwdSecurityLevel", a.pwd_update_date AS "pwdUpdateDate", a.pwd_update_record AS "pwdUpdateRecord", a.pwd_question AS "pwdQuestion", a.pwd_question_answer AS "pwdQuestionAnswer", a.pwd_question_2 AS "pwdQuestion2", a.pwd_question_answer_2 AS "pwdQuestionAnswer2", a.pwd_question_3 AS "pwdQuestion3", a.pwd_question_answer_3 AS "pwdQuestionAnswer3", a.pwd_quest_update_date AS "pwdQuestUpdateDate", a.last_login_ip AS "lastLoginIp", a.last_login_date AS "lastLoginDate", a.freeze_date AS "freezeDate", a.freeze_cause AS "freezeCause", a.user_weight AS "userWeight", a.extend_s1 AS "extend.extendS1", a.extend_s2 AS "extend.extendS2", a.extend_s3 AS "extend.extendS3", a.extend_s4 AS "extend.extendS4", a.extend_s5 AS "extend.extendS5", a.extend_s6 AS "extend.extendS6", a.extend_s7 AS "extend.extendS7", a.extend_s8 AS "extend.extendS8", a.extend_i1 AS "extend.extendI1", a.extend_i2 AS "extend.extendI2", a.extend_i3 AS "extend.extendI3", a.extend_i4 AS "extend.extendI4", a.extend_f1 AS "extend.extendF1", a.extend_f2 AS "extend.extendF2", a.extend_f3 AS "extend.extendF3", a.extend_f4 AS "extend.extendF4", a.extend_d1 AS "extend.extendD1", a.extend_d2 AS "extend.extendD2", a.extend_d3 AS "extend.extendD3", a.extend_d4 AS "extend.extendD4" FROM js_sys_user a WHERE a.`user_code` = ? 
2019-07-09 13:29:12.749 DEBUG 15852 [           main] [com.jeesite.modules.sys.dao.UserDao.get] - ==> Parameters: system(String)
2019-07-09 13:29:12.779 DEBUG 15852 [           main] [com.jeesite.modules.sys.dao.UserDao.get] - <==      Total: 1
2019-07-09 13:29:12.828 DEBUG 15852 [           main] [c.j.m.s.dao.RoleDao.findListByUserCode ] - ==>  Preparing: SELECT a.corp_code AS "corpCode", a.corp_name AS "corpName", a.status AS "status", a.create_by AS "createBy", a.create_date AS "createDate", a.update_by AS "updateBy", a.update_date AS "updateDate", a.remarks AS "remarks", a.role_code AS "roleCode", a.role_name AS "roleName", a.role_type AS "roleType", a.role_sort AS "roleSort", a.is_sys AS "isSys", a.user_type AS "userType", a.data_scope AS "dataScope" FROM js_sys_role a JOIN js_sys_user_role ur ON a.role_code = ur.role_code WHERE a.status = ? AND ur.user_code = ? ORDER BY a.role_sort ASC 
2019-07-09 13:29:12.829 DEBUG 15852 [           main] [c.j.m.s.dao.RoleDao.findListByUserCode ] - ==> Parameters: 0(String), system(String)
2019-07-09 13:29:12.854 DEBUG 15852 [           main] [c.j.m.s.dao.RoleDao.findListByUserCode ] - <==      Total: 0
2019-07-09 13:29:12.935 DEBUG 15852 [           main] [c.j.c.m.m.provider.UpdateSqlProvider   ] - 270毫秒: UPDATE js_sys_menu SET `status` = #{param1.status}, `update_by` = #{param1.updateBy}, `update_date` = #{param1.updateDate} WHERE status != #{param2.STATUS_DELETE} AND module_codes LIKE #{param2.sqlMap.where#module_codes#LIKE1}
2019-07-09 13:29:12.936 DEBUG 15852 [           main] [c.j.m.s.d.MenuDao.updateStatusByEntity ] - ==>  Preparing: UPDATE js_sys_menu SET `status` = ?, `update_by` = ?, `update_date` = ? WHERE status != ? AND module_codes LIKE ? 
2019-07-09 13:29:12.939 DEBUG 15852 [           main] [c.j.m.s.d.MenuDao.updateStatusByEntity ] - ==> Parameters: 2(String), system(String), 2019-07-09 13:29:12.934(Timestamp), 1(String), %cms%(String)
2019-07-09 13:29:12.987 DEBUG 15852 [           main] [c.j.m.s.d.MenuDao.updateStatusByEntity ] - <==    Updates: 7
2019-07-09 13:29:13.122 DEBUG 15852 [           main] [c.j.c.m.m.provider.UpdateSqlProvider   ] - 3毫秒: UPDATE js_sys_menu SET `status` = #{param1.status}, `update_by` = #{param1.updateBy}, `update_date` = #{param1.updateDate} WHERE status != #{param2.STATUS_DELETE} AND module_codes LIKE #{param2.sqlMap.where#module_codes#LIKE1}
2019-07-09 13:29:13.122 DEBUG 15852 [           main] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@471d6571] will be managed by Spring
2019-07-09 13:29:13.123 DEBUG 15852 [           main] [c.j.m.s.d.MenuDao.updateStatusByEntity ] - ==>  Preparing: UPDATE js_sys_menu SET `status` = ?, `update_by` = ?, `update_date` = ? WHERE status != ? AND module_codes LIKE ? 
2019-07-09 13:29:13.124 DEBUG 15852 [           main] [c.j.m.s.d.MenuDao.updateStatusByEntity ] - ==> Parameters: 0(String), system(String), 2019-07-09 13:29:13.121(Timestamp), 1(String), %core%(String)
2019-07-09 13:29:13.173 DEBUG 15852 [           main] [c.j.m.s.d.MenuDao.updateStatusByEntity ] - <==    Updates: 70
2019-07-09 13:29:15.126 ERROR 15852 [           main] [o.apache.catalina.core.StandardService ] - Failed to start connector [Connector[HTTP/1.1-8980]]

org.apache.catalina.LifecycleException: Failed to start component [Connector[HTTP/1.1-8980]]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:167)
	at org.apache.catalina.core.StandardService.addConnector(StandardService.java:225)
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.addPreviouslyRemovedConnectors(TomcatWebServer.java:261)
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.start(TomcatWebServer.java:198)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.startWebServer(ServletWebServerApplicationContext.java:300)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.finishRefresh(ServletWebServerApplicationContext.java:162)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:551)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:140)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:754)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:386)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:307)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1242)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1230)
	at com.jeesite.modules.Application.main(Application.java:20)
Caused by: org.apache.catalina.LifecycleException: Protocol handler start failed
	at org.apache.catalina.connector.Connector.startInternal(Connector.java:1020)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:150)
	... 13 common frames omitted
Caused by: java.net.BindException: Address already in use: bind
	at sun.nio.ch.Net.bind0(Native Method)
	at sun.nio.ch.Net.bind(Net.java:433)
	at sun.nio.ch.Net.bind(Net.java:425)
	at sun.nio.ch.ServerSocketChannelImpl.bind(ServerSocketChannelImpl.java:223)
	at sun.nio.ch.ServerSocketAdaptor.bind(ServerSocketAdaptor.java:74)
	at org.apache.tomcat.util.net.NioEndpoint.bind(NioEndpoint.java:219)
	at org.apache.tomcat.util.net.AbstractEndpoint.start(AbstractEndpoint.java:1151)
	at org.apache.coyote.AbstractProtocol.start(AbstractProtocol.java:591)
	at org.apache.catalina.connector.Connector.startInternal(Connector.java:1018)
	... 14 common frames omitted

2019-07-09 13:29:15.182 ERROR 15852 [           main] [o.s.b.d.LoggingFailureAnalysisReporter ] - 

***************************
APPLICATION FAILED TO START
***************************

Description:

The Tomcat connector configured to listen on port 8980 failed to start. The port may already be in use or the connector may be misconfigured.

Action:

Verify the connector's configuration, identify and stop any process that's listening on port 8980, or configure this application to listen on another port.

2019-07-09 13:29:15.254 DEBUG 15852 [           main] [com.jeesite.common.utils.SpringUtils   ] - Clear ApplicationContext:org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@1536602f: startup date [Tue Jul 09 13:28:58 GMT+08:00 2019]; root of context hierarchy
2019-07-09 13:30:14.508 INFO  15836 [           main] [com.jeesite.modules.Application        ] - Starting Application on DESKTOP-FVHI4E5 with PID 15836 (E:\gitlabHome\HaoLangZhongProject\HaoLangZhong\src\main\webapp\WEB-INF\classes started by 1111111 in E:\gitlabHome\HaoLangZhongProject\HaoLangZhong)
2019-07-09 13:30:14.512 DEBUG 15836 [           main] [com.jeesite.modules.Application        ] - Running with Spring Boot v2.0.6.RELEASE, Spring v5.0.10.RELEASE
2019-07-09 13:30:14.512 INFO  15836 [           main] [com.jeesite.modules.Application        ] - The following profiles are active: default
2019-07-09 13:30:17.028 INFO  15836 [           main] [com.jeesite.common.config.Global       ] - Config files: [classpath:config/jeesite-core.yml, classpath:config/application.yml]
2019-07-09 13:30:17.029 INFO  15836 [           main] [com.jeesite.common.config.Global       ] - Spring cache cluster mode: false, session manager name: J1CacheSession
2019-07-09 13:30:17.615 INFO  15836 [           main] [com.jeesite.common.config.Global       ] - user.home: C:/Users/15040
2019-07-09 13:30:17.615 INFO  15836 [           main] [com.jeesite.common.config.Global       ] - user.dir: E:/gitlabHome/HaoLangZhongProject/HaoLangZhong
2019-07-09 13:30:17.615 INFO  15836 [           main] [com.jeesite.common.config.Global       ] - logPath: E:/gitlabHome/HaoLangZhongProject/HaoLangZhong/src/main/webapp/WEB-INF/classes

   _____        ___  _   _           ___
  |_   _|      / __'(_)_| |_        /   |
  _ | | __  __ \___ | |_   _| __   / /| |
 ( .| |/__\/__\ ___)| | | |_ /__\ / /_| |_
  \___|\__.\__.|____|_| \___)\__.(____   _|  :: JeeSite V4.1.3 :: 
======================================|_|==========================

    欢迎使用 JeeSite Demo V4.1

    您当前的版本为社区版，官方网站：http://jeesite.com

    机器码是：6c59ab5175477606a72e1628bfd13f1a
    产品名称：JeeSite Demo
    公司名称：ThinkGem

===================================================================

2019-07-09 13:30:18.997 INFO  15836 [           main] [o.s.b.w.embedded.tomcat.TomcatWebServer] - Tomcat initialized with port(s): 8980 (http)
2019-07-09 13:30:20.263 DEBUG 15836 [           main] [c.j.common.datasource.RoutingDataSource] - Set default target data source success.
2019-07-09 13:30:27.167 DEBUG 15836 [           main] [com.jeesite.common.beetl.BeetlUtils    ] - Beetl config files: [classpath:/config/beetl-core.properties, classpath:/config/beetl.properties]
2019-07-09 13:30:27.456 DEBUG 15836 [           main] [c.j.c.m.m.provider.SelectSqlProvider   ] - 4毫秒: SELECT a.status AS "status", a.create_by AS "createBy", a.create_date AS "createDate", a.update_by AS "updateBy", a.update_date AS "updateDate", a.remarks AS "remarks", a.module_code AS "moduleCode", a.module_name AS "moduleName", a.description AS "description", a.main_class_name AS "mainClassName", a.current_version AS "currentVersion", a.upgrade_info AS "upgradeInfo" FROM js_sys_module a WHERE a.status = #{sqlMap.where#status#EQ1} ORDER BY a.update_date DESC
2019-07-09 13:30:27.483 DEBUG 15836 [           main] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@2c1a0f82] will not be managed by Spring
2019-07-09 13:30:27.495 DEBUG 15836 [           main] [c.j.modules.sys.dao.ModuleDao.findList ] - ==>  Preparing: SELECT a.status AS "status", a.create_by AS "createBy", a.create_date AS "createDate", a.update_by AS "updateBy", a.update_date AS "updateDate", a.remarks AS "remarks", a.module_code AS "moduleCode", a.module_name AS "moduleName", a.description AS "description", a.main_class_name AS "mainClassName", a.current_version AS "currentVersion", a.upgrade_info AS "upgradeInfo" FROM js_sys_module a WHERE a.status = ? ORDER BY a.update_date DESC 
2019-07-09 13:30:27.523 DEBUG 15836 [           main] [c.j.modules.sys.dao.ModuleDao.findList ] - ==> Parameters: 0(String)
2019-07-09 13:30:27.564 DEBUG 15836 [           main] [c.j.modules.sys.dao.ModuleDao.findList ] - <==      Total: 2
2019-07-09 13:30:27.692 DEBUG 15836 [           main] [c.j.c.m.m.provider.SelectSqlProvider   ] - 0毫秒: SELECT a.corp_code AS "corpCode", a.corp_name AS "corpName", a.status AS "status", a.create_by AS "createBy", a.create_date AS "createDate", a.update_by AS "updateBy", a.update_date AS "updateDate", a.remarks AS "remarks", a.user_code AS "userCode", a.login_code AS "loginCode", a.user_name AS "userName", a.password AS "password", a.email AS "email", a.mobile AS "mobile", a.phone AS "phone", a.sex AS "sex", a.avatar AS "avatar", a.sign AS "sign", a.wx_openid AS "wxOpenid", a.mobile_imei AS "mobileImei", a.user_type AS "userType", a.ref_code AS "refCode", a.ref_name AS "refName", a.mgr_type AS "mgrType", a.pwd_security_level AS "pwdSecurityLevel", a.pwd_update_date AS "pwdUpdateDate", a.pwd_update_record AS "pwdUpdateRecord", a.pwd_question AS "pwdQuestion", a.pwd_question_answer AS "pwdQuestionAnswer", a.pwd_question_2 AS "pwdQuestion2", a.pwd_question_answer_2 AS "pwdQuestionAnswer2", a.pwd_question_3 AS "pwdQuestion3", a.pwd_question_answer_3 AS "pwdQuestionAnswer3", a.pwd_quest_update_date AS "pwdQuestUpdateDate", a.last_login_ip AS "lastLoginIp", a.last_login_date AS "lastLoginDate", a.freeze_date AS "freezeDate", a.freeze_cause AS "freezeCause", a.user_weight AS "userWeight", a.extend_s1 AS "extend.extendS1", a.extend_s2 AS "extend.extendS2", a.extend_s3 AS "extend.extendS3", a.extend_s4 AS "extend.extendS4", a.extend_s5 AS "extend.extendS5", a.extend_s6 AS "extend.extendS6", a.extend_s7 AS "extend.extendS7", a.extend_s8 AS "extend.extendS8", a.extend_i1 AS "extend.extendI1", a.extend_i2 AS "extend.extendI2", a.extend_i3 AS "extend.extendI3", a.extend_i4 AS "extend.extendI4", a.extend_f1 AS "extend.extendF1", a.extend_f2 AS "extend.extendF2", a.extend_f3 AS "extend.extendF3", a.extend_f4 AS "extend.extendF4", a.extend_d1 AS "extend.extendD1", a.extend_d2 AS "extend.extendD2", a.extend_d3 AS "extend.extendD3", a.extend_d4 AS "extend.extendD4" FROM js_sys_user a WHERE a.`user_code` = #{userCode}
2019-07-09 13:30:27.694 DEBUG 15836 [           main] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@2c1a0f82] will be managed by Spring
2019-07-09 13:30:27.694 DEBUG 15836 [           main] [com.jeesite.modules.sys.dao.UserDao.get] - ==>  Preparing: SELECT a.corp_code AS "corpCode", a.corp_name AS "corpName", a.status AS "status", a.create_by AS "createBy", a.create_date AS "createDate", a.update_by AS "updateBy", a.update_date AS "updateDate", a.remarks AS "remarks", a.user_code AS "userCode", a.login_code AS "loginCode", a.user_name AS "userName", a.password AS "password", a.email AS "email", a.mobile AS "mobile", a.phone AS "phone", a.sex AS "sex", a.avatar AS "avatar", a.sign AS "sign", a.wx_openid AS "wxOpenid", a.mobile_imei AS "mobileImei", a.user_type AS "userType", a.ref_code AS "refCode", a.ref_name AS "refName", a.mgr_type AS "mgrType", a.pwd_security_level AS "pwdSecurityLevel", a.pwd_update_date AS "pwdUpdateDate", a.pwd_update_record AS "pwdUpdateRecord", a.pwd_question AS "pwdQuestion", a.pwd_question_answer AS "pwdQuestionAnswer", a.pwd_question_2 AS "pwdQuestion2", a.pwd_question_answer_2 AS "pwdQuestionAnswer2", a.pwd_question_3 AS "pwdQuestion3", a.pwd_question_answer_3 AS "pwdQuestionAnswer3", a.pwd_quest_update_date AS "pwdQuestUpdateDate", a.last_login_ip AS "lastLoginIp", a.last_login_date AS "lastLoginDate", a.freeze_date AS "freezeDate", a.freeze_cause AS "freezeCause", a.user_weight AS "userWeight", a.extend_s1 AS "extend.extendS1", a.extend_s2 AS "extend.extendS2", a.extend_s3 AS "extend.extendS3", a.extend_s4 AS "extend.extendS4", a.extend_s5 AS "extend.extendS5", a.extend_s6 AS "extend.extendS6", a.extend_s7 AS "extend.extendS7", a.extend_s8 AS "extend.extendS8", a.extend_i1 AS "extend.extendI1", a.extend_i2 AS "extend.extendI2", a.extend_i3 AS "extend.extendI3", a.extend_i4 AS "extend.extendI4", a.extend_f1 AS "extend.extendF1", a.extend_f2 AS "extend.extendF2", a.extend_f3 AS "extend.extendF3", a.extend_f4 AS "extend.extendF4", a.extend_d1 AS "extend.extendD1", a.extend_d2 AS "extend.extendD2", a.extend_d3 AS "extend.extendD3", a.extend_d4 AS "extend.extendD4" FROM js_sys_user a WHERE a.`user_code` = ? 
2019-07-09 13:30:27.695 DEBUG 15836 [           main] [com.jeesite.modules.sys.dao.UserDao.get] - ==> Parameters: system(String)
2019-07-09 13:30:27.723 DEBUG 15836 [           main] [com.jeesite.modules.sys.dao.UserDao.get] - <==      Total: 1
2019-07-09 13:30:27.766 DEBUG 15836 [           main] [c.j.m.s.dao.RoleDao.findListByUserCode ] - ==>  Preparing: SELECT a.corp_code AS "corpCode", a.corp_name AS "corpName", a.status AS "status", a.create_by AS "createBy", a.create_date AS "createDate", a.update_by AS "updateBy", a.update_date AS "updateDate", a.remarks AS "remarks", a.role_code AS "roleCode", a.role_name AS "roleName", a.role_type AS "roleType", a.role_sort AS "roleSort", a.is_sys AS "isSys", a.user_type AS "userType", a.data_scope AS "dataScope" FROM js_sys_role a JOIN js_sys_user_role ur ON a.role_code = ur.role_code WHERE a.status = ? AND ur.user_code = ? ORDER BY a.role_sort ASC 
2019-07-09 13:30:27.766 DEBUG 15836 [           main] [c.j.m.s.dao.RoleDao.findListByUserCode ] - ==> Parameters: 0(String), system(String)
2019-07-09 13:30:27.791 DEBUG 15836 [           main] [c.j.m.s.dao.RoleDao.findListByUserCode ] - <==      Total: 0
2019-07-09 13:30:27.828 DEBUG 15836 [           main] [c.j.c.m.m.provider.UpdateSqlProvider   ] - 195毫秒: UPDATE js_sys_menu SET `status` = #{param1.status}, `update_by` = #{param1.updateBy}, `update_date` = #{param1.updateDate} WHERE status != #{param2.STATUS_DELETE} AND module_codes LIKE #{param2.sqlMap.where#module_codes#LIKE1}
2019-07-09 13:30:27.828 DEBUG 15836 [           main] [c.j.m.s.d.MenuDao.updateStatusByEntity ] - ==>  Preparing: UPDATE js_sys_menu SET `status` = ?, `update_by` = ?, `update_date` = ? WHERE status != ? AND module_codes LIKE ? 
2019-07-09 13:30:27.830 DEBUG 15836 [           main] [c.j.m.s.d.MenuDao.updateStatusByEntity ] - ==> Parameters: 2(String), system(String), 2019-07-09 13:30:27.827(Timestamp), 1(String), %cms%(String)
2019-07-09 13:30:27.878 DEBUG 15836 [           main] [c.j.m.s.d.MenuDao.updateStatusByEntity ] - <==    Updates: 7
2019-07-09 13:30:27.993 DEBUG 15836 [           main] [c.j.c.m.m.provider.UpdateSqlProvider   ] - 2毫秒: UPDATE js_sys_menu SET `status` = #{param1.status}, `update_by` = #{param1.updateBy}, `update_date` = #{param1.updateDate} WHERE status != #{param2.STATUS_DELETE} AND module_codes LIKE #{param2.sqlMap.where#module_codes#LIKE1}
2019-07-09 13:30:27.993 DEBUG 15836 [           main] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@2c1a0f82] will be managed by Spring
2019-07-09 13:30:27.993 DEBUG 15836 [           main] [c.j.m.s.d.MenuDao.updateStatusByEntity ] - ==>  Preparing: UPDATE js_sys_menu SET `status` = ?, `update_by` = ?, `update_date` = ? WHERE status != ? AND module_codes LIKE ? 
2019-07-09 13:30:27.994 DEBUG 15836 [           main] [c.j.m.s.d.MenuDao.updateStatusByEntity ] - ==> Parameters: 0(String), system(String), 2019-07-09 13:30:27.992(Timestamp), 1(String), %core%(String)
2019-07-09 13:30:28.042 DEBUG 15836 [           main] [c.j.m.s.d.MenuDao.updateStatusByEntity ] - <==    Updates: 70
2019-07-09 13:30:30.331 INFO  15836 [           main] [o.s.b.w.embedded.tomcat.TomcatWebServer] - Tomcat started on port(s): 8980 (http) with context path '/js'
2019-07-09 13:30:30.335 INFO  15836 [           main] [com.jeesite.modules.Application        ] - Started Application in 16.563 seconds (JVM running for 17.282)
2019-07-09 13:34:12.206 INFO  13016 [           main] [com.jeesite.modules.Application        ] - Starting Application on DESKTOP-FVHI4E5 with PID 13016 (E:\gitlabHome\HaoLangZhongProject\HaoLangZhong\src\main\webapp\WEB-INF\classes started by 1111111 in E:\gitlabHome\HaoLangZhongProject\HaoLangZhong)
2019-07-09 13:34:12.210 DEBUG 13016 [           main] [com.jeesite.modules.Application        ] - Running with Spring Boot v2.0.6.RELEASE, Spring v5.0.10.RELEASE
2019-07-09 13:34:12.210 INFO  13016 [           main] [com.jeesite.modules.Application        ] - The following profiles are active: default
2019-07-09 13:34:14.349 INFO  13016 [           main] [com.jeesite.common.config.Global       ] - Config files: [classpath:config/jeesite-core.yml, classpath:config/application.yml]
2019-07-09 13:34:14.350 INFO  13016 [           main] [com.jeesite.common.config.Global       ] - Spring cache cluster mode: false, session manager name: J1CacheSession
2019-07-09 13:34:14.901 INFO  13016 [           main] [com.jeesite.common.config.Global       ] - user.home: C:/Users/15040
2019-07-09 13:34:14.901 INFO  13016 [           main] [com.jeesite.common.config.Global       ] - user.dir: E:/gitlabHome/HaoLangZhongProject/HaoLangZhong
2019-07-09 13:34:14.901 INFO  13016 [           main] [com.jeesite.common.config.Global       ] - logPath: E:/gitlabHome/HaoLangZhongProject/HaoLangZhong/src/main/webapp/WEB-INF/classes

   _____        ___  _   _           ___
  |_   _|      / __'(_)_| |_        /   |
  _ | | __  __ \___ | |_   _| __   / /| |
 ( .| |/__\/__\ ___)| | | |_ /__\ / /_| |_
  \___|\__.\__.|____|_| \___)\__.(____   _|  :: JeeSite V4.1.3 :: 
======================================|_|==========================

    欢迎使用 JeeSite Demo V4.1

    您当前的版本为社区版，官方网站：http://jeesite.com

    机器码是：6c59ab5175477606a72e1628bfd13f1a
    产品名称：JeeSite Demo
    公司名称：ThinkGem

===================================================================

2019-07-09 13:34:16.123 INFO  13016 [           main] [o.s.b.w.embedded.tomcat.TomcatWebServer] - Tomcat initialized with port(s): 8980 (http)
2019-07-09 13:34:17.177 DEBUG 13016 [           main] [c.j.common.datasource.RoutingDataSource] - Set default target data source success.
2019-07-09 13:34:23.491 DEBUG 13016 [           main] [com.jeesite.common.beetl.BeetlUtils    ] - Beetl config files: [classpath:/config/beetl-core.properties, classpath:/config/beetl.properties]
2019-07-09 13:34:23.758 DEBUG 13016 [           main] [c.j.c.m.m.provider.SelectSqlProvider   ] - 2毫秒: SELECT a.status AS "status", a.create_by AS "createBy", a.create_date AS "createDate", a.update_by AS "updateBy", a.update_date AS "updateDate", a.remarks AS "remarks", a.module_code AS "moduleCode", a.module_name AS "moduleName", a.description AS "description", a.main_class_name AS "mainClassName", a.current_version AS "currentVersion", a.upgrade_info AS "upgradeInfo" FROM js_sys_module a WHERE a.status = #{sqlMap.where#status#EQ1} ORDER BY a.update_date DESC
2019-07-09 13:34:23.780 DEBUG 13016 [           main] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@4b9dd787] will not be managed by Spring
2019-07-09 13:34:23.792 DEBUG 13016 [           main] [c.j.modules.sys.dao.ModuleDao.findList ] - ==>  Preparing: SELECT a.status AS "status", a.create_by AS "createBy", a.create_date AS "createDate", a.update_by AS "updateBy", a.update_date AS "updateDate", a.remarks AS "remarks", a.module_code AS "moduleCode", a.module_name AS "moduleName", a.description AS "description", a.main_class_name AS "mainClassName", a.current_version AS "currentVersion", a.upgrade_info AS "upgradeInfo" FROM js_sys_module a WHERE a.status = ? ORDER BY a.update_date DESC 
2019-07-09 13:34:23.819 DEBUG 13016 [           main] [c.j.modules.sys.dao.ModuleDao.findList ] - ==> Parameters: 0(String)
2019-07-09 13:34:23.861 DEBUG 13016 [           main] [c.j.modules.sys.dao.ModuleDao.findList ] - <==      Total: 2
2019-07-09 13:34:23.993 DEBUG 13016 [           main] [c.j.c.m.m.provider.SelectSqlProvider   ] - 1毫秒: SELECT a.corp_code AS "corpCode", a.corp_name AS "corpName", a.status AS "status", a.create_by AS "createBy", a.create_date AS "createDate", a.update_by AS "updateBy", a.update_date AS "updateDate", a.remarks AS "remarks", a.user_code AS "userCode", a.login_code AS "loginCode", a.user_name AS "userName", a.password AS "password", a.email AS "email", a.mobile AS "mobile", a.phone AS "phone", a.sex AS "sex", a.avatar AS "avatar", a.sign AS "sign", a.wx_openid AS "wxOpenid", a.mobile_imei AS "mobileImei", a.user_type AS "userType", a.ref_code AS "refCode", a.ref_name AS "refName", a.mgr_type AS "mgrType", a.pwd_security_level AS "pwdSecurityLevel", a.pwd_update_date AS "pwdUpdateDate", a.pwd_update_record AS "pwdUpdateRecord", a.pwd_question AS "pwdQuestion", a.pwd_question_answer AS "pwdQuestionAnswer", a.pwd_question_2 AS "pwdQuestion2", a.pwd_question_answer_2 AS "pwdQuestionAnswer2", a.pwd_question_3 AS "pwdQuestion3", a.pwd_question_answer_3 AS "pwdQuestionAnswer3", a.pwd_quest_update_date AS "pwdQuestUpdateDate", a.last_login_ip AS "lastLoginIp", a.last_login_date AS "lastLoginDate", a.freeze_date AS "freezeDate", a.freeze_cause AS "freezeCause", a.user_weight AS "userWeight", a.extend_s1 AS "extend.extendS1", a.extend_s2 AS "extend.extendS2", a.extend_s3 AS "extend.extendS3", a.extend_s4 AS "extend.extendS4", a.extend_s5 AS "extend.extendS5", a.extend_s6 AS "extend.extendS6", a.extend_s7 AS "extend.extendS7", a.extend_s8 AS "extend.extendS8", a.extend_i1 AS "extend.extendI1", a.extend_i2 AS "extend.extendI2", a.extend_i3 AS "extend.extendI3", a.extend_i4 AS "extend.extendI4", a.extend_f1 AS "extend.extendF1", a.extend_f2 AS "extend.extendF2", a.extend_f3 AS "extend.extendF3", a.extend_f4 AS "extend.extendF4", a.extend_d1 AS "extend.extendD1", a.extend_d2 AS "extend.extendD2", a.extend_d3 AS "extend.extendD3", a.extend_d4 AS "extend.extendD4" FROM js_sys_user a WHERE a.`user_code` = #{userCode}
2019-07-09 13:34:23.994 DEBUG 13016 [           main] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@4b9dd787] will be managed by Spring
2019-07-09 13:34:23.995 DEBUG 13016 [           main] [com.jeesite.modules.sys.dao.UserDao.get] - ==>  Preparing: SELECT a.corp_code AS "corpCode", a.corp_name AS "corpName", a.status AS "status", a.create_by AS "createBy", a.create_date AS "createDate", a.update_by AS "updateBy", a.update_date AS "updateDate", a.remarks AS "remarks", a.user_code AS "userCode", a.login_code AS "loginCode", a.user_name AS "userName", a.password AS "password", a.email AS "email", a.mobile AS "mobile", a.phone AS "phone", a.sex AS "sex", a.avatar AS "avatar", a.sign AS "sign", a.wx_openid AS "wxOpenid", a.mobile_imei AS "mobileImei", a.user_type AS "userType", a.ref_code AS "refCode", a.ref_name AS "refName", a.mgr_type AS "mgrType", a.pwd_security_level AS "pwdSecurityLevel", a.pwd_update_date AS "pwdUpdateDate", a.pwd_update_record AS "pwdUpdateRecord", a.pwd_question AS "pwdQuestion", a.pwd_question_answer AS "pwdQuestionAnswer", a.pwd_question_2 AS "pwdQuestion2", a.pwd_question_answer_2 AS "pwdQuestionAnswer2", a.pwd_question_3 AS "pwdQuestion3", a.pwd_question_answer_3 AS "pwdQuestionAnswer3", a.pwd_quest_update_date AS "pwdQuestUpdateDate", a.last_login_ip AS "lastLoginIp", a.last_login_date AS "lastLoginDate", a.freeze_date AS "freezeDate", a.freeze_cause AS "freezeCause", a.user_weight AS "userWeight", a.extend_s1 AS "extend.extendS1", a.extend_s2 AS "extend.extendS2", a.extend_s3 AS "extend.extendS3", a.extend_s4 AS "extend.extendS4", a.extend_s5 AS "extend.extendS5", a.extend_s6 AS "extend.extendS6", a.extend_s7 AS "extend.extendS7", a.extend_s8 AS "extend.extendS8", a.extend_i1 AS "extend.extendI1", a.extend_i2 AS "extend.extendI2", a.extend_i3 AS "extend.extendI3", a.extend_i4 AS "extend.extendI4", a.extend_f1 AS "extend.extendF1", a.extend_f2 AS "extend.extendF2", a.extend_f3 AS "extend.extendF3", a.extend_f4 AS "extend.extendF4", a.extend_d1 AS "extend.extendD1", a.extend_d2 AS "extend.extendD2", a.extend_d3 AS "extend.extendD3", a.extend_d4 AS "extend.extendD4" FROM js_sys_user a WHERE a.`user_code` = ? 
2019-07-09 13:34:23.996 DEBUG 13016 [           main] [com.jeesite.modules.sys.dao.UserDao.get] - ==> Parameters: system(String)
2019-07-09 13:34:24.023 DEBUG 13016 [           main] [com.jeesite.modules.sys.dao.UserDao.get] - <==      Total: 1
2019-07-09 13:34:24.068 DEBUG 13016 [           main] [c.j.m.s.dao.RoleDao.findListByUserCode ] - ==>  Preparing: SELECT a.corp_code AS "corpCode", a.corp_name AS "corpName", a.status AS "status", a.create_by AS "createBy", a.create_date AS "createDate", a.update_by AS "updateBy", a.update_date AS "updateDate", a.remarks AS "remarks", a.role_code AS "roleCode", a.role_name AS "roleName", a.role_type AS "roleType", a.role_sort AS "roleSort", a.is_sys AS "isSys", a.user_type AS "userType", a.data_scope AS "dataScope" FROM js_sys_role a JOIN js_sys_user_role ur ON a.role_code = ur.role_code WHERE a.status = ? AND ur.user_code = ? ORDER BY a.role_sort ASC 
2019-07-09 13:34:24.068 DEBUG 13016 [           main] [c.j.m.s.dao.RoleDao.findListByUserCode ] - ==> Parameters: 0(String), system(String)
2019-07-09 13:34:24.092 DEBUG 13016 [           main] [c.j.m.s.dao.RoleDao.findListByUserCode ] - <==      Total: 0
2019-07-09 13:34:24.131 DEBUG 13016 [           main] [c.j.c.m.m.provider.UpdateSqlProvider   ] - 201毫秒: UPDATE js_sys_menu SET `status` = #{param1.status}, `update_by` = #{param1.updateBy}, `update_date` = #{param1.updateDate} WHERE status != #{param2.STATUS_DELETE} AND module_codes LIKE #{param2.sqlMap.where#module_codes#LIKE1}
2019-07-09 13:34:24.132 DEBUG 13016 [           main] [c.j.m.s.d.MenuDao.updateStatusByEntity ] - ==>  Preparing: UPDATE js_sys_menu SET `status` = ?, `update_by` = ?, `update_date` = ? WHERE status != ? AND module_codes LIKE ? 
2019-07-09 13:34:24.135 DEBUG 13016 [           main] [c.j.m.s.d.MenuDao.updateStatusByEntity ] - ==> Parameters: 2(String), system(String), 2019-07-09 13:34:24.131(Timestamp), 1(String), %cms%(String)
2019-07-09 13:34:24.180 DEBUG 13016 [           main] [c.j.m.s.d.MenuDao.updateStatusByEntity ] - <==    Updates: 7
2019-07-09 13:34:24.291 DEBUG 13016 [           main] [c.j.c.m.m.provider.UpdateSqlProvider   ] - 2毫秒: UPDATE js_sys_menu SET `status` = #{param1.status}, `update_by` = #{param1.updateBy}, `update_date` = #{param1.updateDate} WHERE status != #{param2.STATUS_DELETE} AND module_codes LIKE #{param2.sqlMap.where#module_codes#LIKE1}
2019-07-09 13:34:24.291 DEBUG 13016 [           main] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@4b9dd787] will be managed by Spring
2019-07-09 13:34:24.291 DEBUG 13016 [           main] [c.j.m.s.d.MenuDao.updateStatusByEntity ] - ==>  Preparing: UPDATE js_sys_menu SET `status` = ?, `update_by` = ?, `update_date` = ? WHERE status != ? AND module_codes LIKE ? 
2019-07-09 13:34:24.292 DEBUG 13016 [           main] [c.j.m.s.d.MenuDao.updateStatusByEntity ] - ==> Parameters: 0(String), system(String), 2019-07-09 13:34:24.29(Timestamp), 1(String), %core%(String)
2019-07-09 13:34:24.338 DEBUG 13016 [           main] [c.j.m.s.d.MenuDao.updateStatusByEntity ] - <==    Updates: 70
2019-07-09 13:34:26.233 INFO  13016 [           main] [o.s.b.w.embedded.tomcat.TomcatWebServer] - Tomcat started on port(s): 8980 (http) with context path '/js'
2019-07-09 13:34:26.238 INFO  13016 [           main] [com.jeesite.modules.Application        ] - Started Application in 14.742 seconds (JVM running for 15.446)
2019-07-09 13:34:55.718 DEBUG 13016 [nio-8980-exec-4] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@4b9dd787] will be managed by Spring
2019-07-09 13:34:55.719 DEBUG 13016 [nio-8980-exec-4] [c.j.m.a.d.D.saveDoctorComment!selectKey] - ==>  Preparing: select replace(uuid(),'-','') from dual 
2019-07-09 13:34:55.719 DEBUG 13016 [nio-8980-exec-4] [c.j.m.a.d.D.saveDoctorComment!selectKey] - ==> Parameters: 
2019-07-09 13:34:55.742 DEBUG 13016 [nio-8980-exec-4] [c.j.m.a.d.D.saveDoctorComment!selectKey] - <==      Total: 1
2019-07-09 13:34:55.747 DEBUG 13016 [nio-8980-exec-4] [c.j.m.a.d.D.saveDoctorComment          ] - ==>  Preparing: insert into sys_doctor_comment ( id, userid, doctorid, start, content, create_date, picid, del_flag ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-07-09 13:34:55.749 DEBUG 13016 [nio-8980-exec-4] [c.j.m.a.d.D.saveDoctorComment          ] - ==> Parameters: 48f89e58a20b11e9b780fa163e609e56(String), 123(String), 0f2067603f1111e99752bcaec5595fa3(String), 0(Integer), asdasdfewrwerewqewq(String), 2019-07-09 13:34:55(String), (String), 0(String)
2019-07-09 13:34:55.793 DEBUG 13016 [nio-8980-exec-4] [c.j.m.a.d.D.saveDoctorComment          ] - <==    Updates: 1
2019-07-09 13:34:57.943 DEBUG 13016 [nio-8980-exec-3] [c.j.c.m.m.provider.SelectSqlProvider   ] - 0毫秒: SELECT a.id AS "id", a.content AS "content", a.pic1 AS "pic1", a.pic2 AS "pic2", a.pic3 AS "pic3", a.check_state AS "checkState", a.user_id AS "userId", a.pay_price AS "payPrice", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.create_by AS "createBy", a.update_by AS "updateBy", a.del_flag AS "delFlag" FROM sys_air_prescription a WHERE a.user_id = #{sqlMap.where#user_id#EQ1} ORDER BY a.create_date DESC
2019-07-09 13:34:57.945 DEBUG 13016 [nio-8980-exec-3] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@4b9dd787] will not be managed by Spring
2019-07-09 13:34:57.946 DEBUG 13016 [nio-8980-exec-3] [c.j.m.a.dao.AirPrescriptionDao.findList] - ==>  Preparing: SELECT a.id AS "id", a.content AS "content", a.pic1 AS "pic1", a.pic2 AS "pic2", a.pic3 AS "pic3", a.check_state AS "checkState", a.user_id AS "userId", a.pay_price AS "payPrice", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.create_by AS "createBy", a.update_by AS "updateBy", a.del_flag AS "delFlag" FROM sys_air_prescription a WHERE a.user_id = ? ORDER BY a.create_date DESC 
2019-07-09 13:34:57.946 DEBUG 13016 [nio-8980-exec-3] [c.j.m.a.dao.AirPrescriptionDao.findList] - ==> Parameters: 123(String)
2019-07-09 13:34:57.978 DEBUG 13016 [nio-8980-exec-3] [c.j.m.a.dao.AirPrescriptionDao.findList] - <==      Total: 6
2019-07-09 13:35:02.479 DEBUG 13016 [nio-8980-exec-7] [c.j.c.m.m.provider.SelectSqlProvider   ] - 0毫秒: SELECT a.id AS "id", a.content AS "content", a.pic1 AS "pic1", a.pic2 AS "pic2", a.pic3 AS "pic3", a.check_state AS "checkState", a.user_id AS "userId", a.pay_price AS "payPrice", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.create_by AS "createBy", a.update_by AS "updateBy", a.del_flag AS "delFlag" FROM sys_air_prescription a WHERE a.user_id = #{sqlMap.where#user_id#EQ1} ORDER BY a.create_date DESC
2019-07-09 13:35:02.481 DEBUG 13016 [nio-8980-exec-7] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@4b9dd787] will not be managed by Spring
2019-07-09 13:35:02.483 DEBUG 13016 [nio-8980-exec-7] [c.j.m.a.dao.AirPrescriptionDao.findList] - ==>  Preparing: SELECT a.id AS "id", a.content AS "content", a.pic1 AS "pic1", a.pic2 AS "pic2", a.pic3 AS "pic3", a.check_state AS "checkState", a.user_id AS "userId", a.pay_price AS "payPrice", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.create_by AS "createBy", a.update_by AS "updateBy", a.del_flag AS "delFlag" FROM sys_air_prescription a WHERE a.user_id = ? ORDER BY a.create_date DESC 
2019-07-09 13:35:02.484 DEBUG 13016 [nio-8980-exec-7] [c.j.m.a.dao.AirPrescriptionDao.findList] - ==> Parameters: 123(String)
2019-07-09 13:35:02.512 DEBUG 13016 [nio-8980-exec-7] [c.j.m.a.dao.AirPrescriptionDao.findList] - <==      Total: 6
2019-07-09 13:35:25.711 DEBUG 13016 [nio-8980-exec-9] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@4b9dd787] will be managed by Spring
2019-07-09 13:35:25.712 DEBUG 13016 [nio-8980-exec-9] [c.j.m.a.d.A.insertAirPrescription      ] - ==>  Preparing: INSERT INTO sys_air_prescription ( content, pic1, check_state, user_id, create_date, create_by, del_flag ) values ( ?, ?, ?, ?, NOW(), ?, ? ) 
2019-07-09 13:35:25.712 DEBUG 13016 [nio-8980-exec-9] [c.j.m.a.d.A.insertAirPrescription      ] - ==> Parameters: wwqeewqasdadasdWEQQEQWE(String), (String), 0(String), 123(String), 创建人(String), 0(String)
2019-07-09 13:35:25.758 DEBUG 13016 [nio-8980-exec-9] [c.j.m.a.d.A.insertAirPrescription      ] - <==    Updates: 1
2019-07-09 13:35:37.806 DEBUG 13016 [nio-8980-exec-2] [c.j.c.m.m.provider.SelectSqlProvider   ] - 0毫秒: SELECT a.id AS "id", a.content AS "content", a.pic1 AS "pic1", a.pic2 AS "pic2", a.pic3 AS "pic3", a.check_state AS "checkState", a.user_id AS "userId", a.pay_price AS "payPrice", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.create_by AS "createBy", a.update_by AS "updateBy", a.del_flag AS "delFlag" FROM sys_air_prescription a WHERE a.user_id = #{sqlMap.where#user_id#EQ1} ORDER BY a.create_date DESC
2019-07-09 13:35:37.807 DEBUG 13016 [nio-8980-exec-2] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@4b9dd787] will not be managed by Spring
2019-07-09 13:35:37.809 DEBUG 13016 [nio-8980-exec-2] [c.j.m.a.dao.AirPrescriptionDao.findList] - ==>  Preparing: SELECT a.id AS "id", a.content AS "content", a.pic1 AS "pic1", a.pic2 AS "pic2", a.pic3 AS "pic3", a.check_state AS "checkState", a.user_id AS "userId", a.pay_price AS "payPrice", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.create_by AS "createBy", a.update_by AS "updateBy", a.del_flag AS "delFlag" FROM sys_air_prescription a WHERE a.user_id = ? ORDER BY a.create_date DESC 
2019-07-09 13:35:37.809 DEBUG 13016 [nio-8980-exec-2] [c.j.m.a.dao.AirPrescriptionDao.findList] - ==> Parameters: 123(String)
2019-07-09 13:35:37.841 DEBUG 13016 [nio-8980-exec-2] [c.j.m.a.dao.AirPrescriptionDao.findList] - <==      Total: 7
2019-07-09 13:35:43.321 DEBUG 13016 [nio-8980-exec-3] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@4b9dd787] will be managed by Spring
2019-07-09 13:35:43.321 DEBUG 13016 [nio-8980-exec-3] [c.j.m.a.d.D.saveDoctorComment!selectKey] - ==>  Preparing: select replace(uuid(),'-','') from dual 
2019-07-09 13:35:43.322 DEBUG 13016 [nio-8980-exec-3] [c.j.m.a.d.D.saveDoctorComment!selectKey] - ==> Parameters: 
2019-07-09 13:35:43.344 DEBUG 13016 [nio-8980-exec-3] [c.j.m.a.d.D.saveDoctorComment!selectKey] - <==      Total: 1
2019-07-09 13:35:43.345 DEBUG 13016 [nio-8980-exec-3] [c.j.m.a.d.D.saveDoctorComment          ] - ==>  Preparing: insert into sys_doctor_comment ( id, userid, doctorid, start, content, create_date, picid, del_flag ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-07-09 13:35:43.345 DEBUG 13016 [nio-8980-exec-3] [c.j.m.a.d.D.saveDoctorComment          ] - ==> Parameters: 655a81d4a20b11e9b780fa163e609e56(String), 123(String), 0f2067603f1111e99752bcaec5595fa3(String), 0(Integer), asdasdfewrwerewqewqQWEQWEQWE(String), 2019-07-09 13:35:43(String), (String), 0(String)
2019-07-09 13:35:43.391 DEBUG 13016 [nio-8980-exec-3] [c.j.m.a.d.D.saveDoctorComment          ] - <==    Updates: 1
2019-07-09 13:35:47.727 DEBUG 13016 [nio-8980-exec-5] [c.j.c.m.m.provider.SelectSqlProvider   ] - 0毫秒: SELECT a.id AS "id", a.content AS "content", a.pic1 AS "pic1", a.pic2 AS "pic2", a.pic3 AS "pic3", a.check_state AS "checkState", a.user_id AS "userId", a.pay_price AS "payPrice", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.create_by AS "createBy", a.update_by AS "updateBy", a.del_flag AS "delFlag" FROM sys_air_prescription a WHERE a.user_id = #{sqlMap.where#user_id#EQ1} ORDER BY a.create_date DESC
2019-07-09 13:35:47.728 DEBUG 13016 [nio-8980-exec-5] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@4b9dd787] will not be managed by Spring
2019-07-09 13:35:47.728 DEBUG 13016 [nio-8980-exec-5] [c.j.m.a.dao.AirPrescriptionDao.findList] - ==>  Preparing: SELECT a.id AS "id", a.content AS "content", a.pic1 AS "pic1", a.pic2 AS "pic2", a.pic3 AS "pic3", a.check_state AS "checkState", a.user_id AS "userId", a.pay_price AS "payPrice", a.create_date AS "createDate", a.update_date AS "updateDate", a.remarks AS "remarks", a.create_by AS "createBy", a.update_by AS "updateBy", a.del_flag AS "delFlag" FROM sys_air_prescription a WHERE a.user_id = ? ORDER BY a.create_date DESC 
2019-07-09 13:35:47.729 DEBUG 13016 [nio-8980-exec-5] [c.j.m.a.dao.AirPrescriptionDao.findList] - ==> Parameters: 123(String)
2019-07-09 13:35:47.756 DEBUG 13016 [nio-8980-exec-5] [c.j.m.a.dao.AirPrescriptionDao.findList] - <==      Total: 7
2019-07-09 15:43:07.886 INFO  17820 [           main] [com.jeesite.modules.Application        ] - Starting Application on DESKTOP-FVHI4E5 with PID 17820 (E:\gitlabHome\HaoLangZhongProject\HaoLangZhong\src\main\webapp\WEB-INF\classes started by 1111111 in E:\gitlabHome\HaoLangZhongProject\HaoLangZhong)
2019-07-09 15:43:07.890 DEBUG 17820 [           main] [com.jeesite.modules.Application        ] - Running with Spring Boot v2.0.6.RELEASE, Spring v5.0.10.RELEASE
2019-07-09 15:43:07.890 INFO  17820 [           main] [com.jeesite.modules.Application        ] - The following profiles are active: default
2019-07-09 15:43:10.092 INFO  17820 [           main] [com.jeesite.common.config.Global       ] - Config files: [classpath:config/jeesite-core.yml, classpath:config/application.yml]
2019-07-09 15:43:10.093 INFO  17820 [           main] [com.jeesite.common.config.Global       ] - Spring cache cluster mode: false, session manager name: J1CacheSession
2019-07-09 15:43:10.793 INFO  17820 [           main] [com.jeesite.common.config.Global       ] - user.home: C:/Users/15040
2019-07-09 15:43:10.794 INFO  17820 [           main] [com.jeesite.common.config.Global       ] - user.dir: E:/gitlabHome/HaoLangZhongProject/HaoLangZhong
2019-07-09 15:43:10.794 INFO  17820 [           main] [com.jeesite.common.config.Global       ] - logPath: E:/gitlabHome/HaoLangZhongProject/HaoLangZhong/src/main/webapp/WEB-INF/classes

   _____        ___  _   _           ___
  |_   _|      / __'(_)_| |_        /   |
  _ | | __  __ \___ | |_   _| __   / /| |
 ( .| |/__\/__\ ___)| | | |_ /__\ / /_| |_
  \___|\__.\__.|____|_| \___)\__.(____   _|  :: JeeSite V4.1.3 :: 
======================================|_|==========================

    欢迎使用 JeeSite Demo V4.1

    您当前的版本为社区版，官方网站：http://jeesite.com

    机器码是：6c59ab5175477606a72e1628bfd13f1a
    产品名称：JeeSite Demo
    公司名称：ThinkGem

===================================================================

2019-07-09 15:43:12.162 INFO  17820 [           main] [o.s.b.w.embedded.tomcat.TomcatWebServer] - Tomcat initialized with port(s): 8980 (http)
2019-07-09 15:43:13.275 DEBUG 17820 [           main] [c.j.common.datasource.RoutingDataSource] - Set default target data source success.
2019-07-09 15:43:19.356 DEBUG 17820 [           main] [com.jeesite.common.beetl.BeetlUtils    ] - Beetl config files: [classpath:/config/beetl-core.properties, classpath:/config/beetl.properties]
2019-07-09 15:43:19.792 DEBUG 17820 [           main] [c.j.c.m.m.provider.SelectSqlProvider   ] - 3毫秒: SELECT a.status AS "status", a.create_by AS "createBy", a.create_date AS "createDate", a.update_by AS "updateBy", a.update_date AS "updateDate", a.remarks AS "remarks", a.module_code AS "moduleCode", a.module_name AS "moduleName", a.description AS "description", a.main_class_name AS "mainClassName", a.current_version AS "currentVersion", a.upgrade_info AS "upgradeInfo" FROM js_sys_module a WHERE a.status = #{sqlMap.where#status#EQ1} ORDER BY a.update_date DESC
2019-07-09 15:43:19.831 DEBUG 17820 [           main] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@1cf7c055] will not be managed by Spring
2019-07-09 15:43:19.849 DEBUG 17820 [           main] [c.j.modules.sys.dao.ModuleDao.findList ] - ==>  Preparing: SELECT a.status AS "status", a.create_by AS "createBy", a.create_date AS "createDate", a.update_by AS "updateBy", a.update_date AS "updateDate", a.remarks AS "remarks", a.module_code AS "moduleCode", a.module_name AS "moduleName", a.description AS "description", a.main_class_name AS "mainClassName", a.current_version AS "currentVersion", a.upgrade_info AS "upgradeInfo" FROM js_sys_module a WHERE a.status = ? ORDER BY a.update_date DESC 
2019-07-09 15:43:19.892 DEBUG 17820 [           main] [c.j.modules.sys.dao.ModuleDao.findList ] - ==> Parameters: 0(String)
2019-07-09 15:43:19.935 DEBUG 17820 [           main] [c.j.modules.sys.dao.ModuleDao.findList ] - <==      Total: 2
2019-07-09 15:43:20.114 DEBUG 17820 [           main] [c.j.c.m.m.provider.SelectSqlProvider   ] - 0毫秒: SELECT a.corp_code AS "corpCode", a.corp_name AS "corpName", a.status AS "status", a.create_by AS "createBy", a.create_date AS "createDate", a.update_by AS "updateBy", a.update_date AS "updateDate", a.remarks AS "remarks", a.user_code AS "userCode", a.login_code AS "loginCode", a.user_name AS "userName", a.password AS "password", a.email AS "email", a.mobile AS "mobile", a.phone AS "phone", a.sex AS "sex", a.avatar AS "avatar", a.sign AS "sign", a.wx_openid AS "wxOpenid", a.mobile_imei AS "mobileImei", a.user_type AS "userType", a.ref_code AS "refCode", a.ref_name AS "refName", a.mgr_type AS "mgrType", a.pwd_security_level AS "pwdSecurityLevel", a.pwd_update_date AS "pwdUpdateDate", a.pwd_update_record AS "pwdUpdateRecord", a.pwd_question AS "pwdQuestion", a.pwd_question_answer AS "pwdQuestionAnswer", a.pwd_question_2 AS "pwdQuestion2", a.pwd_question_answer_2 AS "pwdQuestionAnswer2", a.pwd_question_3 AS "pwdQuestion3", a.pwd_question_answer_3 AS "pwdQuestionAnswer3", a.pwd_quest_update_date AS "pwdQuestUpdateDate", a.last_login_ip AS "lastLoginIp", a.last_login_date AS "lastLoginDate", a.freeze_date AS "freezeDate", a.freeze_cause AS "freezeCause", a.user_weight AS "userWeight", a.extend_s1 AS "extend.extendS1", a.extend_s2 AS "extend.extendS2", a.extend_s3 AS "extend.extendS3", a.extend_s4 AS "extend.extendS4", a.extend_s5 AS "extend.extendS5", a.extend_s6 AS "extend.extendS6", a.extend_s7 AS "extend.extendS7", a.extend_s8 AS "extend.extendS8", a.extend_i1 AS "extend.extendI1", a.extend_i2 AS "extend.extendI2", a.extend_i3 AS "extend.extendI3", a.extend_i4 AS "extend.extendI4", a.extend_f1 AS "extend.extendF1", a.extend_f2 AS "extend.extendF2", a.extend_f3 AS "extend.extendF3", a.extend_f4 AS "extend.extendF4", a.extend_d1 AS "extend.extendD1", a.extend_d2 AS "extend.extendD2", a.extend_d3 AS "extend.extendD3", a.extend_d4 AS "extend.extendD4" FROM js_sys_user a WHERE a.`user_code` = #{userCode}
2019-07-09 15:43:20.116 DEBUG 17820 [           main] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@1cf7c055] will be managed by Spring
2019-07-09 15:43:20.116 DEBUG 17820 [           main] [com.jeesite.modules.sys.dao.UserDao.get] - ==>  Preparing: SELECT a.corp_code AS "corpCode", a.corp_name AS "corpName", a.status AS "status", a.create_by AS "createBy", a.create_date AS "createDate", a.update_by AS "updateBy", a.update_date AS "updateDate", a.remarks AS "remarks", a.user_code AS "userCode", a.login_code AS "loginCode", a.user_name AS "userName", a.password AS "password", a.email AS "email", a.mobile AS "mobile", a.phone AS "phone", a.sex AS "sex", a.avatar AS "avatar", a.sign AS "sign", a.wx_openid AS "wxOpenid", a.mobile_imei AS "mobileImei", a.user_type AS "userType", a.ref_code AS "refCode", a.ref_name AS "refName", a.mgr_type AS "mgrType", a.pwd_security_level AS "pwdSecurityLevel", a.pwd_update_date AS "pwdUpdateDate", a.pwd_update_record AS "pwdUpdateRecord", a.pwd_question AS "pwdQuestion", a.pwd_question_answer AS "pwdQuestionAnswer", a.pwd_question_2 AS "pwdQuestion2", a.pwd_question_answer_2 AS "pwdQuestionAnswer2", a.pwd_question_3 AS "pwdQuestion3", a.pwd_question_answer_3 AS "pwdQuestionAnswer3", a.pwd_quest_update_date AS "pwdQuestUpdateDate", a.last_login_ip AS "lastLoginIp", a.last_login_date AS "lastLoginDate", a.freeze_date AS "freezeDate", a.freeze_cause AS "freezeCause", a.user_weight AS "userWeight", a.extend_s1 AS "extend.extendS1", a.extend_s2 AS "extend.extendS2", a.extend_s3 AS "extend.extendS3", a.extend_s4 AS "extend.extendS4", a.extend_s5 AS "extend.extendS5", a.extend_s6 AS "extend.extendS6", a.extend_s7 AS "extend.extendS7", a.extend_s8 AS "extend.extendS8", a.extend_i1 AS "extend.extendI1", a.extend_i2 AS "extend.extendI2", a.extend_i3 AS "extend.extendI3", a.extend_i4 AS "extend.extendI4", a.extend_f1 AS "extend.extendF1", a.extend_f2 AS "extend.extendF2", a.extend_f3 AS "extend.extendF3", a.extend_f4 AS "extend.extendF4", a.extend_d1 AS "extend.extendD1", a.extend_d2 AS "extend.extendD2", a.extend_d3 AS "extend.extendD3", a.extend_d4 AS "extend.extendD4" FROM js_sys_user a WHERE a.`user_code` = ? 
2019-07-09 15:43:20.116 DEBUG 17820 [           main] [com.jeesite.modules.sys.dao.UserDao.get] - ==> Parameters: system(String)
2019-07-09 15:43:20.144 DEBUG 17820 [           main] [com.jeesite.modules.sys.dao.UserDao.get] - <==      Total: 1
2019-07-09 15:43:20.191 DEBUG 17820 [           main] [c.j.m.s.dao.RoleDao.findListByUserCode ] - ==>  Preparing: SELECT a.corp_code AS "corpCode", a.corp_name AS "corpName", a.status AS "status", a.create_by AS "createBy", a.create_date AS "createDate", a.update_by AS "updateBy", a.update_date AS "updateDate", a.remarks AS "remarks", a.role_code AS "roleCode", a.role_name AS "roleName", a.role_type AS "roleType", a.role_sort AS "roleSort", a.is_sys AS "isSys", a.user_type AS "userType", a.data_scope AS "dataScope" FROM js_sys_role a JOIN js_sys_user_role ur ON a.role_code = ur.role_code WHERE a.status = ? AND ur.user_code = ? ORDER BY a.role_sort ASC 
2019-07-09 15:43:20.191 DEBUG 17820 [           main] [c.j.m.s.dao.RoleDao.findListByUserCode ] - ==> Parameters: 0(String), system(String)
2019-07-09 15:43:20.216 DEBUG 17820 [           main] [c.j.m.s.dao.RoleDao.findListByUserCode ] - <==      Total: 0
2019-07-09 15:43:20.276 DEBUG 17820 [           main] [c.j.c.m.m.provider.UpdateSqlProvider   ] - 259毫秒: UPDATE js_sys_menu SET `status` = #{param1.status}, `update_by` = #{param1.updateBy}, `update_date` = #{param1.updateDate} WHERE status != #{param2.STATUS_DELETE} AND module_codes LIKE #{param2.sqlMap.where#module_codes#LIKE1}
2019-07-09 15:43:20.277 DEBUG 17820 [           main] [c.j.m.s.d.MenuDao.updateStatusByEntity ] - ==>  Preparing: UPDATE js_sys_menu SET `status` = ?, `update_by` = ?, `update_date` = ? WHERE status != ? AND module_codes LIKE ? 
2019-07-09 15:43:20.280 DEBUG 17820 [           main] [c.j.m.s.d.MenuDao.updateStatusByEntity ] - ==> Parameters: 2(String), system(String), 2019-07-09 15:43:20.276(Timestamp), 1(String), %cms%(String)
2019-07-09 15:43:20.327 DEBUG 17820 [           main] [c.j.m.s.d.MenuDao.updateStatusByEntity ] - <==    Updates: 7
2019-07-09 15:43:20.465 DEBUG 17820 [           main] [c.j.c.m.m.provider.UpdateSqlProvider   ] - 6毫秒: UPDATE js_sys_menu SET `status` = #{param1.status}, `update_by` = #{param1.updateBy}, `update_date` = #{param1.updateDate} WHERE status != #{param2.STATUS_DELETE} AND module_codes LIKE #{param2.sqlMap.where#module_codes#LIKE1}
2019-07-09 15:43:20.466 DEBUG 17820 [           main] [o.m.s.t.SpringManagedTransaction       ] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@1cf7c055] will be managed by Spring
2019-07-09 15:43:20.466 DEBUG 17820 [           main] [c.j.m.s.d.MenuDao.updateStatusByEntity ] - ==>  Preparing: UPDATE js_sys_menu SET `status` = ?, `update_by` = ?, `update_date` = ? WHERE status != ? AND module_codes LIKE ? 
2019-07-09 15:43:20.467 DEBUG 17820 [           main] [c.j.m.s.d.MenuDao.updateStatusByEntity ] - ==> Parameters: 0(String), system(String), 2019-07-09 15:43:20.465(Timestamp), 1(String), %core%(String)
2019-07-09 15:43:20.513 DEBUG 17820 [           main] [c.j.m.s.d.MenuDao.updateStatusByEntity ] - <==    Updates: 70
2019-07-09 15:43:23.531 INFO  17820 [           main] [o.s.b.w.embedded.tomcat.TomcatWebServer] - Tomcat started on port(s): 8980 (http) with context path '/js'
2019-07-09 15:43:23.534 INFO  17820 [           main] [com.jeesite.modules.Application        ] - Started Application in 16.386 seconds (JVM running for 17.175)
